"""
–¢–µ—Å—Ç—ã –¥–ª—è ContextMenuManager.
"""

import pytest
from unittest.mock import Mock, AsyncMock
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from core.menu_manager import ContextMenuManager, MenuConfig
from core.permissions import UserRole


class TestContextMenuManager:
    """–¢–µ—Å—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é"""

    @pytest.fixture
    def mock_formatter(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è KeyboardFormatter"""
        formatter = Mock()
        formatter.create_main_menu.return_value = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='menu_help')]
        ])
        formatter.create_games_menu.return_value = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéØ –ò–≥—Ä–∞ 1", callback_data='game_1')]
        ])
        formatter.create_admin_menu.return_value = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users')]
        ])
        return formatter

    @pytest.fixture
    def mock_permission_manager(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è PermissionManager"""
        pm = Mock()
        pm.has_permission.return_value = True
        return pm

    @pytest.fixture
    def menu_manager(self, mock_permission_manager, mock_formatter):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è ContextMenuManager"""
        return ContextMenuManager(mock_permission_manager, mock_formatter)

    def test_initialization(self, menu_manager):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é"""
        assert menu_manager.menus is not None
        assert 'menu_main' in menu_manager.menus
        assert 'menu_admin' in menu_manager.menus

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
        assert 'user' in menu_manager.menu_levels
        assert 'admin' in menu_manager.menu_levels
        assert 'super_admin' in menu_manager.menu_levels

    def test_menu_registration(self, menu_manager):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é"""
        async def test_builder(role, **context):
            return InlineKeyboardMarkup([[InlineKeyboardButton("Test", callback_data='test')]])

        menu_manager.register_menu(
            'test_menu', test_builder, UserRole.USER, 'user', '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é'
        )

        assert 'test_menu' in menu_manager.menus
        config = menu_manager.menus['test_menu']
        assert config.required_role == UserRole.USER
        assert config.level == 'user'
        assert config.description == '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é'

    @pytest.mark.asyncio
    async def test_get_menu_for_user_success(self, menu_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        menu = await menu_manager.get_menu_for_user('menu_main', UserRole.USER)

        assert menu is not None
        assert isinstance(menu, InlineKeyboardMarkup)
        assert len(menu.inline_keyboard) > 0

    @pytest.mark.asyncio
    async def test_get_menu_for_user_insufficient_permissions(self, menu_manager, mock_permission_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö"""
        mock_permission_manager.has_permission.return_value = False

        menu = await menu_manager.get_menu_for_user('menu_admin', UserRole.USER)

        assert menu is None

    @pytest.mark.asyncio
    async def test_get_menu_for_user_unknown_menu(self, menu_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu = await menu_manager.get_menu_for_user('unknown_menu', UserRole.USER)

        assert menu is None

    def test_is_menu_available(self, menu_manager, mock_permission_manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–Ω—é"""
        # –î–æ—Å—Ç—É–ø–Ω–æ
        mock_permission_manager.has_permission.return_value = True
        assert menu_manager.is_menu_available('menu_main', UserRole.USER)

        # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        mock_permission_manager.has_permission.return_value = False
        assert not menu_manager.is_menu_available('menu_admin', UserRole.USER)

    def test_is_menu_available_unknown_menu(self, menu_manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        assert not menu_manager.is_menu_available('unknown_menu', UserRole.USER)

    def test_get_available_menus_for_role(self, menu_manager, mock_permission_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏"""
        mock_permission_manager.has_permission.return_value = True

        menus = menu_manager.get_available_menus_for_role(UserRole.USER)

        assert isinstance(menus, list)
        assert 'menu_main' in menus
        assert 'menu_help' in menus

    def test_get_menus_by_level(self, menu_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ø–æ —É—Ä–æ–≤–Ω—è–º"""
        user_menus = menu_manager.get_menus_by_level('user')
        admin_menus = menu_manager.get_menus_by_level('admin')

        assert isinstance(user_menus, list)
        assert isinstance(admin_menus, list)
        assert 'menu_main' in user_menus
        assert 'menu_admin' in admin_menus

    def test_get_menus_by_unknown_level(self, menu_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        menus = menu_manager.get_menus_by_level('unknown')

        assert menus == []

    def test_clear_cache(self, menu_manager):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —á—Ç–æ-—Ç–æ –≤ –∫–µ—à
        menu_manager.menu_cache['test'] = Mock()

        assert len(menu_manager.menu_cache) > 0

        menu_manager.clear_cache()

        assert len(menu_manager.menu_cache) == 0

    def test_menu_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
        async def handler():
            pass

        config = MenuConfig('test', handler, UserRole.ADMIN, 'admin', 'Test menu')

        assert config.menu_id == 'test'
        assert config.required_role == UserRole.ADMIN
        assert config.level == 'admin'
        assert config.description == 'Test menu'