"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
–û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞.
"""

from typing import Dict, List, Any, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup


class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    @staticmethod
    def format_user_info(user_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not user_data:
            return "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        name = MessageFormatter.escape_html(str(user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')))
        username = MessageFormatter.escape_html(str(user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')))

        return (
            "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
            f"üÜî ID: {user_data.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üì± Username: @{username}\n"
            f"üèÜ –†–µ–ø—É—Ç–∞—Ü–∏—è: {user_data.get('reputation', 0)}\n"
            f"‚≠ê –†–∞–Ω–≥: {MessageFormatter.escape_html(str(user_data.get('rank', '–ù–æ–≤–∏—á–æ–∫')))}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('message_count', 0)}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.get('joined_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}"
        )

    @staticmethod
    def format_rank_info(score: int, warnings: int, role: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–Ω–≥–µ"""
        return (
            "üèÜ <b>–í–∞—à —Ä–∞–Ω–≥:</b>\n"
            f"‚≠ê –û—á–∫–∏: {score}\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}\n"
            f"üëë –†–æ–ª—å: {MessageFormatter.escape_html(role)}"
        )

    @staticmethod
    def format_leaderboard(users: List[tuple]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        if not users:
            return "üì≠ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞"

        result = ["üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>\n"]

        for i, (user_id, username, display_name, points) in enumerate(users[:10], 1):
            medal = MessageFormatter._get_medal(i)
            name = MessageFormatter.escape_html(display_name or username or f"User{user_id}")
            result.append(f"{medal} <b>{name}</b> - {points} –æ—á–∫–æ–≤")

        return "\n".join(result)

    @staticmethod
    def _get_medal(position: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤"""
        if position == 1:
            return "ü•á"
        elif position == 2:
            return "ü•à"
        elif position == 3:
            return "ü•â"
        elif position == 10:
            return "üîü"
        else:
            return f"{position}."

    @staticmethod
    def format_weather_info(weather_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
        if not weather_data:
            return "üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞</b>\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        return (
            "üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞ –≤ {weather_data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ')}</b>\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data.get('temp', 0)}¬∞C\n"
            f"üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data.get('feels_like', 0)}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data.get('humidity', 0)}%\n"
            f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {MessageFormatter.escape_html(str(weather_data.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')))}"
        )

    @staticmethod
    def format_news(articles: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not articles:
            return "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        result = ["üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n"]

        for i, article in enumerate(articles[:10], 1):
            title = MessageFormatter.escape_html(article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
            url = article.get('url', '')
            result.append(f"{i}. <b>{title}</b>")
            if url:
                result.append(f"üîó {url}")

        return "\n".join(result)

    @staticmethod
    def format_error_report(error_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        if not error_data:
            return "üêõ <b>–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ</b>\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        return (
            "üêõ <b>–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ #{error_data.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}</b>\n"
            f"üìã –¢–∏–ø: {MessageFormatter.escape_html(str(error_data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')))}\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {MessageFormatter.escape_html(str(error_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')))}\n"
            f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {MessageFormatter.escape_html(str(error_data.get('priority', '–ù–µ —É–∫–∞–∑–∞–Ω')))}\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {MessageFormatter.escape_html(str(error_data.get('admin_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')))}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {error_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{MessageFormatter.escape_html(str(error_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')))}"
        )

    @staticmethod
    def format_donation_info(amount: float, points: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–Ω–∞—Ç–µ"""
        return (
            "üí∞ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n"
            f"üíµ –°—É–º–º–∞: {amount} RUB\n"
            f"‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}\n"
            "üéâ –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞!"
        )

    @staticmethod
    def format_achievement(achievement_name: str, description: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        return (
            "üèÜ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n"
            f"üéñ {MessageFormatter.escape_html(achievement_name)}\n"
            f"üìù {MessageFormatter.escape_html(description)}"
        )

    @staticmethod
    def format_moderation_info(media_type: str, user_name: str, transcription: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        media_types = {
            'audio': '–ê–£–î–ò–û',
            'video': '–í–ò–î–ï–û',
            'photo': '–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï',
            'document': '–î–û–ö–£–ú–ï–ù–¢'
        }

        result = (
            "üîç <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {MessageFormatter.escape_html(user_name)}\n"
            f"üìÅ –¢–∏–ø —Ñ–∞–π–ª–∞: {media_types.get(media_type.lower(), media_type.upper())}"
        )

        if transcription:
            result += f"\nüéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {MessageFormatter.escape_html(transcription)}"

        return result

    @staticmethod
    def escape_html(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        return (text.replace("&", "&")
                .replace("<", "<")
                .replace(">", ">")
                .replace('"', """)
                .replace("'", "&#x27;"))

    @staticmethod
    def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
        """–£—Å–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if not text or len(text) <= max_length:
            return text
        return text[:max_length - len(suffix)] + suffix


class KeyboardFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def create_main_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='menu_help')],
            [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã", callback_data='menu_games')],
            [InlineKeyboardButton("üí∞ –î–æ–Ω–∞—Ç", callback_data='menu_donate')],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data='menu_leaderboard')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_games_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏–≥—Ä"""
        keyboard = [
            [InlineKeyboardButton("üéØ –ò–≥—Ä–∞ 1", callback_data='game_1')],
            [InlineKeyboardButton("üé≤ –ò–≥—Ä–∞ 2", callback_data='game_2')],
            [InlineKeyboardButton("üé∞ –ò–≥—Ä–∞ 3", callback_data='game_3')],
            [InlineKeyboardButton("üé™ –ò–≥—Ä–∞ 4", callback_data='game_4')],
            [InlineKeyboardButton("üé® –ò–≥—Ä–∞ 5", callback_data='game_5')],
            [InlineKeyboardButton("üé≠ –ò–≥—Ä–∞ 6", callback_data='game_6')],
            [InlineKeyboardButton("üé™ –ò–≥—Ä–∞ 7", callback_data='game_7')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_donation_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–æ–Ω–∞—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üí∞ 100 ‚ÇΩ", callback_data='donate_100')],
            [InlineKeyboardButton("üí∞ 250 ‚ÇΩ", callback_data='donate_250')],
            [InlineKeyboardButton("üí∞ 500 ‚ÇΩ", callback_data='donate_500')],
            [InlineKeyboardButton("üí∞ 1000 ‚ÇΩ", callback_data='donate_1000')],
            [InlineKeyboardButton("üí∞ 2500 ‚ÇΩ", callback_data='donate_2500')],
            [InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='donate_custom')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_admin_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')],
            [InlineKeyboardButton("üêõ –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö", callback_data='admin_errors')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_moderation_menu(media_type: str, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'moderate_approve_{user_id}')],
            [InlineKeyboardButton("‚è∞ –û–¥–æ–±—Ä–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π", callback_data=f'moderate_delay_{user_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'moderate_reject_{user_id}')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_confirmation_menu(yes_callback: str, no_callback: str, yes_text: str = "–î–∞", no_text: str = "–ù–µ—Ç") -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton(yes_text, callback_data=yes_callback)],
            [InlineKeyboardButton(no_text, callback_data=no_callback)]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_pagination_menu(current_page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if total_pages == 1:
            # –î–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
            keyboard = [[InlineKeyboardButton(f"üìÑ {current_page}/{total_pages}", callback_data=f'{prefix}_info')]]
        else:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            navigation_row = []
            if current_page > 1:
                navigation_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'{prefix}_prev'))
            if current_page < total_pages:
                navigation_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f'{prefix}_next'))

            info_row = [[InlineKeyboardButton(f"üìÑ {current_page}/{total_pages}", callback_data=f'{prefix}_info')]]

            if navigation_row:
                keyboard = [navigation_row] + info_row
            else:
                keyboard = info_row

        return InlineKeyboardMarkup(keyboard)