"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –ø–ª–∞—Ç–µ–∂–∞—Ö.
"""

import logging
import asyncio
import time
from typing import Optional, Dict, Any
from telegram import Bot
from telegram.error import TelegramError, NetworkError, TimedOut, RetryAfter


class NotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    """

    def __init__(self, bot_token: str, admin_chat_ids: Optional[list] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            admin_chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        self.bot = Bot(token=bot_token)
        self.admin_chat_ids = admin_chat_ids or []
        self.logger = logging.getLogger(__name__)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.stats = {
            'successful_sends': 0,
            'failed_sends': 0,
            'network_errors': 0,
            'timeout_errors': 0,
            'rate_limit_errors': 0,
            'other_errors': 0
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.max_retries = 3
        self.base_retry_delay = 1.0  # —Å–µ–∫—É–Ω–¥—ã
        self.max_retry_delay = 30.0  # —Å–µ–∫—É–Ω–¥—ã

        # Rate limiting
        self.last_request_time = 0
        self.min_request_interval = 0.1  # –º–∏–Ω–∏–º—É–º 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    async def notify_payment_success(self, user_id: int, amount: float, currency: str = "RUB"):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency: –í–∞–ª—é—Ç–∞
        """
        try:
            message = (
                f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: <code>{amount:.2f} {currency}</code>\n"
                f"üéØ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç!\n\n"
                f"–í—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É. "
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /rank"
            )

            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )

            self.logger.info(f"Sent success notification to user {user_id} for amount {amount}")

        except TelegramError as e:
            self.logger.error(f"Failed to send success notification to user {user_id}: {e}")
        except Exception as e:
            self.logger.error(f"Unexpected error sending success notification: {e}")

    async def notify_payment_failed(self, user_id: int, reason: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏
        """
        try:
            message = (
                f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>\n\n"
                f"üí° –ü—Ä–∏—á–∏–Ω–∞: <code>{reason}</code>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, "
                f"–µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è."
            )

            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )

            self.logger.info(f"Sent failure notification to user {user_id}: {reason}")

        except TelegramError as e:
            self.logger.error(f"Failed to send failure notification to user {user_id}: {e}")
        except Exception as e:
            self.logger.error(f"Unexpected error sending failure notification: {e}")

    async def notify_payment_cancelled(self, user_id: int):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            message = (
                f"üö´ <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                f"–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
            )

            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )

            self.logger.info(f"Sent cancellation notification to user {user_id}")

        except TelegramError as e:
            self.logger.error(f"Failed to send cancellation notification to user {user_id}: {e}")
        except Exception as e:
            self.logger.error(f"Unexpected error sending cancellation notification: {e}")

    async def notify_payment_pending(self, user_id: int, payment_url: str, amount: float):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_url: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            message = (
                f"‚è≥ <b>–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
                f"üí∞ –°—É–º–º–∞: <code>{amount:.2f} RUB</code>\n"
                f"üîó <a href=\"{payment_url}\">–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É</a>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ."
            )

            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )

            self.logger.info(f"Sent pending notification to user {user_id}")

        except TelegramError as e:
            self.logger.error(f"Failed to send pending notification to user {user_id}: {e}")
        except Exception as e:
            self.logger.error(f"Unexpected error sending pending notification: {e}")

    async def notify_admin_payment_issue(self, payment_id: str, error: str, user_id: Optional[int] = None):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø–ª–∞—Ç–µ–∂–æ–º.

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            error: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            user_info = f" (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})" if user_id else ""
            message = (
                f"üö® <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º</b>\n\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_id}</code>{user_info}\n"
                f"‚ùå –û—à–∏–±–∫–∞: <code>{error}</code>\n\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞."
            )

            for admin_chat_id in self.admin_chat_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_chat_id,
                        text=message,
                        parse_mode='HTML'
                    )
                except TelegramError as e:
                    self.logger.error(f"Failed to send admin notification to {admin_chat_id}: {e}")

            self.logger.warning(f"Sent admin notification for payment {payment_id}: {error}")

        except Exception as e:
            self.logger.error(f"Unexpected error sending admin notification: {e}")

    async def notify_admin_system_error(self, error_type: str, error_message: str, details: Optional[str] = None):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ.

        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        try:
            message = (
                f"üî• <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
                f"‚ö†Ô∏è –¢–∏–ø: <code>{error_type}</code>\n"
                f"üìù –û—à–∏–±–∫–∞: <code>{error_message}</code>\n"
            )

            if details:
                message += f"üìã –î–µ—Ç–∞–ª–∏: <code>{details[:500]}</code>\n\n"

            message += "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"

            for admin_chat_id in self.admin_chat_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_chat_id,
                        text=message,
                        parse_mode='HTML'
                    )
                except TelegramError as e:
                    self.logger.error(f"Failed to send system error notification to {admin_chat_id}: {e}")

            self.logger.critical(f"Sent system error notification: {error_type} - {error_message}")

        except Exception as e:
            self.logger.error(f"Unexpected error sending system error notification: {e}")

    async def notify_admin_payment_stats(self, stats: dict):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π.

        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        """
        try:
            message = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
                f"üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: <code>{stats.get('total_payments', 0)}</code>\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: <code>{stats.get('successful_payments', 0)}</code>\n"
                f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: <code>{stats.get('failed_payments', 0)}</code>\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: <code>{stats.get('pending_payments', 0)}</code>\n"
                f"üìà –û–±—â–∞—è —Å—É–º–º–∞: <code>{stats.get('total_amount', 0):.2f} RUB</code>\n"
            )

            for admin_chat_id in self.admin_chat_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_chat_id,
                        text=message,
                        parse_mode='HTML'
                    )
                except TelegramError as e:
                    self.logger.error(f"Failed to send stats notification to {admin_chat_id}: {e}")

            self.logger.info("Sent payment statistics notification to admins")

        except Exception as e:
            self.logger.error(f"Unexpected error sending stats notification: {e}")

    async def send_custom_notification(self, user_id: int, message: str, parse_mode: str = 'HTML'):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ ('HTML', 'Markdown', None)
        """
        await self._send_with_retry(user_id, message, parse_mode)

    async def _send_with_retry(self, user_id: int, message: str, parse_mode: str = 'HTML', attempt: int = 1):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ rate limiting.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            attempt: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        """
        # Rate limiting
        await self._apply_rate_limit()

        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=parse_mode if parse_mode != 'HTML' else None,
                disable_web_page_preview=True
            )

            self.stats['successful_sends'] += 1
            self.logger.info(f"Sent notification to user {user_id} (attempt {attempt})")

        except RetryAfter as e:
            # Rate limit –æ—Ç Telegram API
            self.stats['rate_limit_errors'] += 1
            self.logger.warning(f"Rate limit hit for user {user_id}, retry after {e.retry_after}s")
            await asyncio.sleep(e.retry_after)
            await self._send_with_retry(user_id, message, parse_mode, attempt)

        except TimedOut as e:
            # –¢–∞–π–º–∞—É—Ç —Å–µ—Ç–∏
            self.stats['timeout_errors'] += 1
            self.logger.warning(f"Timeout sending notification to user {user_id} (attempt {attempt})")
            await self._handle_retry(user_id, message, parse_mode, attempt, "timeout")

        except NetworkError as e:
            # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            self.stats['network_errors'] += 1
            self.logger.warning(f"Network error sending notification to user {user_id} (attempt {attempt}): {e}")
            await self._handle_retry(user_id, message, parse_mode, attempt, "network")

        except TelegramError as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram
            self.stats['other_errors'] += 1
            self.logger.error(f"Telegram error sending notification to user {user_id} (attempt {attempt}): {e}")
            self.stats['failed_sends'] += 1

        except Exception as e:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            self.stats['other_errors'] += 1
            self.logger.error(f"Unexpected error sending notification to user {user_id} (attempt {attempt}): {e}")
            self.stats['failed_sends'] += 1

    async def _apply_rate_limit(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ rate limiting –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏."""
        current_time = time.time()
        time_since_last_request = current_time - self.last_request_time

        if time_since_last_request < self.min_request_interval:
            await asyncio.sleep(self.min_request_interval - time_since_last_request)

        self.last_request_time = time.time()

    async def _handle_retry(self, user_id: int, message: str, parse_mode: str, attempt: int, error_type: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            attempt: –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        """
        if attempt >= self.max_retries:
            self.stats['failed_sends'] += 1
            self.logger.error(f"Max retries ({self.max_retries}) exceeded for user {user_id}, giving up")
            return

        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delay = min(self.base_retry_delay * (2 ** (attempt - 1)), self.max_retry_delay)
        self.logger.info(f"Retrying notification to user {user_id} in {delay}s (attempt {attempt + 1}/{self.max_retries})")
        await asyncio.sleep(delay)

        await self._send_with_retry(user_id, message, parse_mode, attempt + 1)

    def get_notification_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

        Returns:
            Dict —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        total_attempts = (
            self.stats['successful_sends'] +
            self.stats['failed_sends'] +
            self.stats['network_errors'] +
            self.stats['timeout_errors'] +
            self.stats['rate_limit_errors'] +
            self.stats['other_errors']
        )

        return {
            **self.stats,
            'total_attempts': total_attempts,
            'success_rate': (self.stats['successful_sends'] / total_attempts * 100) if total_attempts > 0 else 0.0
        }

    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.stats = {
            'successful_sends': 0,
            'failed_sends': 0,
            'network_errors': 0,
            'timeout_errors': 0,
            'rate_limit_errors': 0,
            'other_errors': 0
        }