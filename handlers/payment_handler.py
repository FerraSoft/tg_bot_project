"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import json
import logging
from typing import Dict, Any, Optional
from flask import Request, jsonify, Response
from telegram import Update
from telegram.ext import ContextTypes

from services.donation_service import DonationService
from core.payment_exceptions import PaymentError, PaymentSecurityError, PaymentProviderError


class PaymentHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è Telegram –±–æ—Ç–∞.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    - –û–±—Ä–∞–±–æ—Ç–∫—É webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–µ–π
    """

    def __init__(self, donation_service: DonationService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π.

        Args:
            donation_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤
        """
        self.donation_service = donation_service
        self.logger = logging.getLogger(__name__)

    async def handle_donate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /donate.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        try:
            user = update.effective_user
            args = context.args or []

            if not args:
                await self._show_donation_menu(update)
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã
            try:
                amount = float(args[0])
            except (ValueError, IndexError):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /donate 100"
                )
                return

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é stripe)
            provider = args[1] if len(args) > 1 else 'stripe'

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞
            donation_response = await self.donation_service.create_donation(
                user_id=user.id,
                amount=amount,
                provider_name=provider
            )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            message = (
                f"üí∞ <b>–î–æ–Ω–∞—Ç {amount:.2f} ‚ÇΩ</b>\n\n"
                f"üîó <a href=\"{donation_response.payment_url}\">–û–ø–ª–∞—Ç–∏—Ç—å</a>\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç."
            )

            await update.message.reply_html(
                message,
                disable_web_page_preview=True
            )

        except PaymentError as e:
            self.logger.warning(f"Payment error for user {user.id}: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        except Exception as e:
            self.logger.error(f"Unexpected error in donate command: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_payment_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /payment_status <payment_id>.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        try:
            user = update.effective_user
            args = context.args or []

            if not args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞: /payment_status 123"
                )
                return

            try:
                payment_id = int(args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            payment = self.donation_service.get_payment_status(payment_id)

            if not payment:
                await update.message.reply_text("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if payment['user_id'] != user.id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
            status_emoji = {
                'pending': '‚è≥',
                'processing': 'üîÑ',
                'succeeded': '‚úÖ',
                'failed': '‚ùå',
                'cancelled': 'üö´',
                'refunded': '‚Ü©Ô∏è'
            }

            message = (
                f"{status_emoji.get(payment['status'], '‚ùì')} <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ #{payment_id}</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {payment['amount']:.2f} {payment['currency']}\n"
                f"üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {payment['provider']}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {payment['created_at'][:19]}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: <code>{payment['status']}</code>\n"
            )

            if payment.get('processed_at'):
                message += f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {payment['processed_at'][:19]}\n"

            if payment.get('error_message'):
                message += f"‚ùå –û—à–∏–±–∫–∞: {payment['error_message']}\n"

            await update.message.reply_html(message)

        except Exception as e:
            self.logger.error(f"Error in payment status command: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞")

    async def handle_my_payments(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_payments.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        try:
            user = update.effective_user

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payments = self.donation_service.get_user_payments(user.id, limit=10)

            if not payments:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
                return

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            message = "<b>üí≥ –í–∞—à–∏ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n"

            for payment in payments:
                status_emoji = {
                    'pending': '‚è≥',
                    'processing': 'üîÑ',
                    'succeeded': '‚úÖ',
                    'failed': '‚ùå',
                    'cancelled': 'üö´',
                    'refunded': '‚Ü©Ô∏è'
                }

                message += (
                    f"{status_emoji.get(payment['status'], '‚ùì')} #{payment['id']} - "
                    f"{payment['amount']:.2f} {payment['currency']} "
                    f"({payment['created_at'][:10]}) - <code>{payment['status']}</code>\n"
                )

            message += "\n–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: /payment_status <ID>"

            await update.message.reply_html(message)

        except Exception as e:
            self.logger.error(f"Error in my payments command: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π")

    async def handle_cancel_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel_payment <payment_id>.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        try:
            user = update.effective_user
            args = context.args or []

            if not args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞: /cancel_payment 123"
                )
                return

            try:
                payment_id = int(args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞")
                return

            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
            success = self.donation_service.cancel_payment(payment_id, user.id)

            if success:
                await update.message.reply_text("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)")

        except Exception as e:
            self.logger.error(f"Error in cancel payment command: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞")

    async def _show_donation_menu(self, update: Update) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–Ω–∞—Ç–æ–≤.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        """
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = [
            [
                InlineKeyboardButton("üí∞ 100 ‚ÇΩ", callback_data="donate_100"),
                InlineKeyboardButton("üíé 500 ‚ÇΩ", callback_data="donate_500"),
            ],
            [
                InlineKeyboardButton("üèÜ 1000 ‚ÇΩ", callback_data="donate_1000"),
                InlineKeyboardButton("üëë 2500 ‚ÇΩ", callback_data="donate_2500"),
            ],
            [
                InlineKeyboardButton("üéØ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="donate_custom"),
            ]
        ]

        message = (
            "üéÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:\n"
            "<code>/donate 500</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∏ –ø–æ–º–æ–∂–µ—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞! üöÄ"
        )

        await update.message.reply_html(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


class WebhookHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
    """

    def __init__(self, donation_service: DonationService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook.

        Args:
            donation_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤
        """
        self.donation_service = donation_service
        self.logger = logging.getLogger(__name__)

    async def handle_stripe_webhook(self, request: Request) -> Response:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Stripe.

        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å

        Returns:
            Response: HTTP –æ—Ç–≤–µ—Ç
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–ø–∏—Å–∏
            payload = await request.get_data()
            signature = request.headers.get('Stripe-Signature', '')

            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                webhook_data = json.loads(payload)
            except json.JSONDecodeError:
                return jsonify({'error': 'Invalid JSON'}), 400

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —á–µ—Ä–µ–∑ donation service
            await self.donation_service.process_payment_webhook(
                provider_name='stripe',
                webhook_data=webhook_data,
                signature=signature
            )

            return jsonify({'status': 'ok'}), 200

        except PaymentSecurityError:
            self.logger.warning("Invalid Stripe webhook signature")
            return jsonify({'error': 'Invalid signature'}), 401
        except PaymentProviderError as e:
            self.logger.error(f"Stripe webhook processing error: {e}")
            return jsonify({'error': 'Processing error'}), 500
        except Exception as e:
            self.logger.error(f"Unexpected error in Stripe webhook: {e}", exc_info=True)
            return jsonify({'error': 'Internal error'}), 500

    async def handle_yookassa_webhook(self, request: Request) -> Response:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç YooKassa.

        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å

        Returns:
            Response: HTTP –æ—Ç–≤–µ—Ç
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–ø–∏—Å–∏
            payload = await request.get_data()
            signature = request.headers.get('Authorization', '')

            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                webhook_data = json.loads(payload)
            except json.JSONDecodeError:
                return jsonify({'error': 'Invalid JSON'}), 400

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —á–µ—Ä–µ–∑ donation service
            await self.donation_service.process_payment_webhook(
                provider_name='yookassa',
                webhook_data=webhook_data,
                signature=signature
            )

            return jsonify({'status': 'ok'}), 200

        except PaymentSecurityError:
            self.logger.warning("Invalid YooKassa webhook signature")
            return jsonify({'error': 'Invalid signature'}), 401
        except PaymentProviderError as e:
            self.logger.error(f"YooKassa webhook processing error: {e}")
            return jsonify({'error': 'Processing error'}), 500
        except Exception as e:
            self.logger.error(f"Unexpected error in YooKassa webhook: {e}", exc_info=True)
            return jsonify({'error': 'Internal error'}), 500

    async def handle_sbp_webhook(self, request: Request) -> Response:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –°–ë–ü.

        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å

        Returns:
            Response: HTTP –æ—Ç–≤–µ—Ç
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–ø–∏—Å–∏
            payload = await request.get_data()
            signature = request.headers.get('X-SBP-Signature', '')

            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                webhook_data = json.loads(payload)
            except json.JSONDecodeError:
                return jsonify({'error': 'Invalid JSON'}), 400

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —á–µ—Ä–µ–∑ donation service
            await self.donation_service.process_payment_webhook(
                provider_name='sbp',
                webhook_data=webhook_data,
                signature=signature
            )

            return jsonify({'status': 'ok'}), 200

        except PaymentSecurityError:
            self.logger.warning("Invalid SBP webhook signature")
            return jsonify({'error': 'Invalid signature'}), 401
        except PaymentProviderError as e:
            self.logger.error(f"SBP webhook processing error: {e}")
            return jsonify({'error': 'Processing error'}), 500
        except Exception as e:
            self.logger.error(f"Unexpected error in SBP webhook: {e}", exc_info=True)
            return jsonify({'error': 'Internal error'}), 500