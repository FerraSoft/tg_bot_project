"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
–û—Ç–≤–µ—á–∞—é—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏.
"""

from typing import Dict, Callable, List, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .base_handler import BaseHandler

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.user_service import UserService
from services.welcome_service import WelcomeService
from utils.formatters import MessageFormatter, KeyboardFormatter
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–º–µ—Å—Ç–æ PostgreSQL database.py
from database.repository import UserRepository

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
BANK_DETAILS_TEXT = """
üè¶ –ë–∞–Ω–∫: –°–±–µ—Ä–±–∞–Ω–∫
üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4276 3800 1234 5678
üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–í–ê–ù–û–í –ò.–ò.

üì± QIWI –ö–æ—à–µ–ª–µ–∫: +79123456789

üí∞ –ÆMoney: 410011234567890

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è
"""

# –°–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
PROFANITY_WORDS = {
    '–ø–∏–∑–¥–∞', '–ø–∏–∑–¥–µ', '–ø–∏–∑–¥—É', '–ø–∏–∑–¥—ã', '—Ö—É–π', '—Ö—É—è', '—Ö—É–µ', '—Ö—É–∏', '—Ö—É–π–Ω—è', '—Ö—É–π–Ω—é', '—Ö—É–π–Ω–µ',
    '–±–ª—è–¥—å', '–±–ª—è–¥–∏', '–±–ª—è–¥—å', '—Å—É–∫–∞', '—Å—É–∫–∏', '—Å—É–∫—É', '–µ–±–∞—Ç—å', '–µ–±–∞–ª', '–µ–±–ª–∞', '–µ–±–ª–∏', '–µ–±–ª–æ',
    '–µ–±–∞–Ω', '–µ–±–∞–Ω–∞', '–µ–±–∞–Ω—É', '–µ–±–∞–Ω—ã', '–ø–∏–¥–æ—Ä', '–ø–∏–¥–æ—Ä–∞', '–ø–∏–¥–æ—Ä—É', '–ø–∏–¥–æ—Ä—ã', '–ø–∏–¥–∞—Ä', '–ø–∏–¥–∞—Ä–∞',
    '–ø–∏–¥–∞—Ä—É', '–ø–∏–¥–∞—Ä—ã', '–≥–∞–Ω–¥–æ–Ω', '–≥–∞–Ω–¥–æ–Ω–∞', '–≥–∞–Ω–¥–æ–Ω—É', '–≥–∞–Ω–¥–æ–Ω—ã', '—á–ª–µ–Ω', '—á–ª–µ–Ω–∞', '—á–ª–µ–Ω–µ',
    '—á–ª–µ–Ω—É', '—á–ª–µ–Ω—ã', '–º—É–¥–∞–∫', '–º—É–¥–∞–∫–∞', '–º—É–¥–∞–∫—É', '–º—É–¥–∞–∫–∏', '—É–µ–±–æ–∫', '—É–µ–±–∫–∞', '—É–µ–±–∫—É', '—É–µ–±–∫–∏',
    'fuck', 'shit', 'bitch', 'ass', 'asshole', 'bastard', 'damn', 'cunt', 'dick', 'cock', 'pussy'
}


class UserHandlers(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.

    –ö–æ–º–∞–Ω–¥—ã:
    - /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    - /help - –ø–æ–º–æ—â—å
    - /rank - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–Ω–≥–∞
    - /leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
    - /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """

    def __init__(self, config, metrics, user_service: UserService, error_repo=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            metrics: –°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
            user_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            error_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—à–∏–±–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        super().__init__(config, metrics, MessageFormatter())
        self.keyboard_formatter = KeyboardFormatter()
        self.user_service = user_service
        self.welcome_service = WelcomeService()
        self.error_repo = error_repo

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç
        self._user_service = user_service

    def get_command_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        return {
            'start': self.handle_start,
            'help': self.handle_help,
            'rank': self.handle_rank,
            'leaderboard': self.handle_leaderboard,
            'info': self.handle_info,
            'weather': self.handle_weather,
            'news': self.handle_news,
            'translate': self.handle_translate,
            'donate': self.handle_donate,
        }

    def get_callback_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'menu_main': self.handle_main_menu,
            'menu_help': self.handle_help_menu,
            'menu_rank': self.handle_rank_menu,
            'menu_donate': self.handle_donate_menu,
            'menu_leaderboard': self.handle_leaderboard_menu,
            'donate_100': self.handle_donation_callback,
            'donate_500': self.handle_donation_callback,
            'donate_1000': self.handle_donation_callback,
            'donate_2500': self.handle_donation_callback,
            'donate_5000': self.handle_donation_callback,
            'donate_custom': self.handle_donation_custom,
            'donate_confirm': self.handle_donate_confirm_callback,
            'menu_moderation': lambda u, c: None,  # Stub - handled by AdminHandlers
            'menu_admin': lambda u, c: None,  # Stub - handled by AdminHandlers
            'menu_triggers': lambda u, c: None,  # Stub - handled by AdminHandlers
        }

    def get_message_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            'text': self.handle_text_message,
            'voice': self.handle_voice_message,
            'audio': self.handle_audio_message,
            'video': self.handle_video_message,
        }

    def _generate_personalized_help(self, user_role, user_name=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–æ–ª–∏
        available_commands = self.welcome_service.get_available_commands_for_role(user_role)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_name = f", {user_name}" if user_name else ""
        help_text = f"[HELP] <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞{header_name}</b>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if 'user_commands' in available_commands:
            help_text += "<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            for cmd in available_commands['user_commands'][:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                help_text += f"‚Ä¢ {cmd}\n"
            help_text += "\n"

        if 'games' in available_commands:
            help_text += "<b>üéÆ –ò–≥—Ä—ã:</b>\n"
            for cmd in available_commands['games'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
                help_text += f"‚Ä¢ {cmd}\n"
            help_text += "\n"

        if 'moderation' in available_commands:
            help_text += "<b>üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b>\n"
            for cmd in available_commands['moderation']:
                help_text += f"‚Ä¢ {cmd}\n"
            help_text += "\n"

        if 'admin' in available_commands:
            help_text += "<b>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            for cmd in available_commands['admin'][:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                help_text += f"‚Ä¢ {cmd}\n"
            help_text += "\n"

        if 'super_admin' in available_commands:
            help_text += "<b>üîß –°–∏—Å—Ç–µ–º–∞:</b>\n"
            for cmd in available_commands['super_admin']:
                help_text += f"‚Ä¢ {cmd}\n"
            help_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–∞—Ç–∞—Ö –¥–ª—è –≤—Å–µ—Ö
        help_text += "<b>üí∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n"
        help_text += "‚Ä¢ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–æ–Ω–∞—Ç–æ–º\n\n"

        help_text += "<b>üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞.</b>"

        return help_text

    async def handle_start(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self.safe_execute(update, context, "start", self._handle_start)

    async def _handle_start(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –≤—ã–∑–æ–≤ user_service.get_or_create_user() –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        profile = await self.user_service.get_or_create_user(
            user.id, user.username, user.first_name, user.last_name
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ enum
        role_enum = self.user_service.get_user_role_enum(user.id)
        print(f"[DEBUG] User {user.id} has role: {role_enum.value}")  # –û–¢–õ–ê–î–ö–ê

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        welcome_text = self.welcome_service.get_welcome_message(
            role_enum,
            user.first_name
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        chat_type = "private" if update.message.chat.type == "private" else "group"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ —á–∞—Ç–∞
        keyboard = self.keyboard_formatter.create_main_menu(role_enum.value, chat_type)
        print(f"[DEBUG] Created menu with {len(keyboard.inline_keyboard)} rows for role {role_enum.value} in {chat_type} chat")  # –û–¢–õ–ê–î–ö–ê

        # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for i, row in enumerate(keyboard.inline_keyboard):
            for button in row:
                print(f"[DEBUG] Menu button {i}: {button.text} -> {button.callback_data}")  # –û–¢–õ–ê–î–ö–ê

        reply_markup = keyboard

        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            await self.send_response(update, welcome_text, reply_markup=reply_markup)

    async def handle_help(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.safe_execute(update, context, "help", self._handle_help)

    async def _handle_help(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ enum
        role_enum = self.user_service.get_user_role_enum(user.id)
        print(f"[DEBUG] Help handler - User {user.id} has role: {role_enum.value}")  # –û–¢–õ–ê–î–ö–ê

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ WelcomeService
        help_text = self._generate_personalized_help(role_enum, user.first_name)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –º–µ–Ω—é
        chat_type = "private" if update.effective_chat.type == "private" else "group"

        keyboard = self.keyboard_formatter.create_main_menu(role_enum.value, chat_type)
        print(f"[DEBUG] Help handler - Created menu with {len(keyboard.inline_keyboard)} rows for role {role_enum.value} in {chat_type} chat")  # –û–¢–õ–ê–î–ö–ê

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏–∑ callback –∫–Ω–æ–ø–∫–∏
        message_sent = False

        if update.message:
            # –í—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /help
            await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=keyboard)
            message_sent = True
        elif update.callback_query and update.callback_query.message:
            # –í—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–º–æ—â–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                current_text = update.callback_query.message.text
                current_markup = update.callback_query.message.reply_markup

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                text_changed = current_text != help_text if current_text and help_text else False
                markup_changed = self._compare_keyboards(current_markup, keyboard)

                if text_changed or markup_changed:
                    await update.callback_query.edit_message_text(help_text, parse_mode='HTML', reply_markup=keyboard)
                    self.logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    self.logger.debug("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ")
                message_sent = True
            except Exception as e:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ help: {e}")
                await update.callback_query.message.reply_text(help_text, parse_mode='HTML', reply_markup=keyboard)
                message_sent = True

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤
        if not message_sent:
            try:
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if update.effective_chat:
                    await update.effective_chat.send_message(help_text, parse_mode='HTML', reply_markup=keyboard)
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Ç–∞")
            except Exception as e:
                await self.send_response(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏", reply_markup=keyboard)

    async def handle_rank(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rank"""
        await self.safe_execute(update, context, "rank", self._handle_rank)

    async def _handle_rank(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rank"""
        user = update.effective_user

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await self.user_service.get_or_create_user(
            user.id, user.username, user.first_name, user.last_name
        )

        if not profile:
            error_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            await self.send_response(update, error_text)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
        rank_progress = self.user_service.get_rank_progress(profile.reputation)

        if not rank_progress:
            error_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ä–∞–Ω–≥–∞"
            await self.send_response(update, error_text)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        rank_text = (
            f"üèÜ <b>–í–∞—à —Ä–∞–Ω–≥:</b>\n\n"
            f"‚≠ê –û—á–∫–∏: {profile.reputation}\n"
            f"üëë –†–∞–Ω–≥: {profile.rank}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {profile.message_count}\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {profile.warnings}\n\n"
        )

        if rank_progress.get('next_rank') != profile.rank:
            rank_text += (
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {rank_progress.get('next_rank', '—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞')}:\n"
                f"   {rank_progress.get('progress', 0)}/{rank_progress.get('needed', 0)} –æ—á–∫–æ–≤\n"
                f"   ({rank_progress.get('percentage', 0):.1f}%)\n"
            )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.send_response(update, rank_text, parse_mode='HTML')

    async def handle_leaderboard(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
        await self.safe_execute(update, context, "leaderboard", self._handle_leaderboard)

    async def _handle_leaderboard(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await self.user_service.get_top_users(10)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if top_users:
            leaderboard_text = "üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>\n\n"

            for i, (user_id, username, first_name, score) in enumerate(top_users, 1):
                name = username if username else first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                medal = self._get_medal(i)
                leaderboard_text += f"{medal} <b>{name}</b> - {score} –æ—á–∫–æ–≤\n"
        else:
            leaderboard_text = "üì≠ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞"

        await self.send_response(update, leaderboard_text, parse_mode='HTML')

    async def handle_info(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info"""
        await self.safe_execute(update, context, "info", self._handle_info)

    async def _handle_info(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        is_admin = await self.is_admin(update, user.id)

        if context.args and is_admin:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å
            target_user_id = self.extract_user_id_from_args(context.args)
            if target_user_id:
                profile = await self.user_service.get_or_create_user(target_user_id, None, None, None)
                if not profile:
                    error_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    await self.send_response(update, error_text)
                    return
                print(f"[DEBUG] _handle_info: showing profile for target_user_id={target_user_id}, warnings={profile.warnings}")
                info_text = self._format_user_info(profile, target_user_id)
            else:
                info_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self.user_service.get_or_create_user(
                user.id, user.username, user.first_name, user.last_name
            )
            if not profile:
                error_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                await self.send_response(update, error_text)
                return
            print(f"[DEBUG] _handle_info: showing profile for user_id={user.id}, warnings={profile.warnings}")
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å UserService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SQLite —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
            info_text = self._format_user_info(profile, user.id)

        await self.send_response(update, info_text, parse_mode='HTML')

    async def _send_info_response(self, update: Update, text: str, parse_mode: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /info —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        message_sent = False

        if update.message:
            # –í—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /info
            await update.message.reply_text(text, parse_mode=parse_mode)
            message_sent = True
        elif update.callback_query and update.callback_query.message:
            # –í—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (–µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞)
            try:
                await update.callback_query.edit_message_text(text, parse_mode=parse_mode)
                message_sent = True
            except Exception as e:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ info: {e}")
                await update.callback_query.message.reply_text(text, parse_mode=parse_mode)
                message_sent = True

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤
        if not message_sent:
            try:
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if update.effective_chat:
                    await update.effective_chat.send_message(text, parse_mode=parse_mode)
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Ç–∞")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

    async def handle_weather(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather"""
        await self.safe_execute(update, context, "weather", self._handle_weather)

    async def _handle_weather(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather"""
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        city = ' '.join(context.args) if context.args else 'Moscow'

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
        if not city or len(city.strip()) < 2:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return

        if len(city) > 50:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        api_key = self.config.api_keys.openweather

        if not api_key:
            await update.message.reply_text("‚ùå API –∫–ª—é—á –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return

        try:
            import requests

            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenWeatherMap API
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"

            response = requests.get(url, timeout=10)

            if response.status_code == 401:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –ø–æ–≥–æ–¥—ã")
                return
            elif response.status_code == 429:
                await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code >= 500:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code != 200:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")
                return

            data = response.json()

            if data.get('cod') == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if not all(key in data for key in ['name', 'main', 'weather']):
                    await update.message.reply_text("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                weather_text = (
                    f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ <b>{data['name']}</b>\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{data['main']['temp']}¬∞C</b>\n"
                    f"üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>{data['main']['feels_like']}¬∞C</b>\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{data['main']['humidity']}%</b>\n"
                    f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{data['weather'][0]['description'].capitalize()}</b>\n"
                )

                await self.send_response(update, weather_text, parse_mode='HTML')
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç API
                if data.get('cod') == '404':
                    await update.message.reply_text(f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                elif data.get('cod') == '401':
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API –ø–æ–≥–æ–¥—ã")
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        except requests.exceptions.Timeout:
            await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except requests.exceptions.ConnectionError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        except requests.exceptions.RequestException as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)[:100]}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {str(e)[:100]}")

    async def handle_news(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /news"""
        await self.safe_execute(update, context, "news", self._handle_news)

    async def _handle_news(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /news"""
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        api_key = self.config.api_keys.news

        if not api_key:
            await update.message.reply_text("‚ùå API –∫–ª—é—á –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return

        try:
            import requests

            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ NewsAPI
            url = f"https://newsapi.org/v2/top-headlines?country=ru&apiKey={api_key}"

            response = requests.get(url, timeout=10)

            if response.status_code == 401:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –Ω–æ–≤–æ—Å—Ç–µ–π")
                return
            elif response.status_code == 429:
                await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code >= 500:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code != 200:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
                return

            data = response.json()

            if data.get('status') == 'ok' and data.get('articles'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
                articles = data['articles'][:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                valid_articles = []

                for article in articles:
                    if article.get('title') and article.get('url'):
                        valid_articles.append(article)

                if not valid_articles:
                    await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                news_text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏:</b>\n\n"

                for i, article in enumerate(valid_articles, 1):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    title = article['title'][:200] if len(article['title']) > 200 else article['title']
                    url = article['url'][:500] if len(article['url']) > 500 else article['url']  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º URL

                    news_text += f"{i}. <b>{title}</b>\n"
                    news_text += f"üîó {url}\n\n"

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(news_text) > 4000:
                    news_text = news_text[:3997] + "..."

                await self.send_response(update, news_text, parse_mode='HTML')
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç API
                if data.get('status') == 'error':
                    error_code = data.get('code', 'unknown')
                    error_message = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

                    if error_code == 'apiKeyInvalid':
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –Ω–æ–≤–æ—Å—Ç–µ–π")
                    elif error_code == 'rateLimited':
                        await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –Ω–æ–≤–æ—Å—Ç–µ–π")
                    elif error_code == 'sourcesUnavailable':
                        await update.message.reply_text("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    else:
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π: {error_message}")
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")

        except requests.exceptions.Timeout:
            await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except requests.exceptions.ConnectionError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–æ–≤–æ—Å—Ç–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        except requests.exceptions.RequestException as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)[:100]}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)[:100]}")

    async def handle_translate(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /translate"""
        await self.safe_execute(update, context, "translate", self._handle_translate)

    async def _handle_translate(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /translate"""
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate [—Ç–µ–∫—Å—Ç] [—è–∑—ã–∫]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/translate Hello world en\n"
                "/translate –ü—Ä–∏–≤–µ—Ç –º–∏—Ä es\n"
                "/translate Bonjour le monde fr\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: en, es, fr, de, it, pt, ru, ja, ko, zh"
            )
            return

        text = ' '.join(context.args[:-1])
        target_lang = context.args[-1].lower()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not text or not text.strip():
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        if not target_lang or len(target_lang) != 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: en, ru, es)")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if len(text) > 1000:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
        supported_languages = {
            'en': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', 'es': '–∏—Å–ø–∞–Ω—Å–∫–∏–π', 'fr': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
            'de': '–Ω–µ–º–µ—Ü–∫–∏–π', 'it': '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', 'pt': '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
            'ru': '—Ä—É—Å—Å–∫–∏–π', 'ja': '—è–ø–æ–Ω—Å–∫–∏–π', 'ko': '–∫–æ—Ä–µ–π—Å–∫–∏–π', 'zh': '–∫–∏—Ç–∞–π—Å–∫–∏–π'
        }

        if target_lang not in supported_languages:
            await update.message.reply_text(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {target_lang}\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {', '.join(supported_languages.keys())}"
            )
            return

        try:
            # –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–µ–Ω API)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Google Translate API, Yandex Translate, –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å

            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª –±—ã –ø–µ—Ä–µ–≤–æ–¥
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤

            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if target_lang == 'en':
                if '–ø—Ä–∏–≤–µ—Ç' in text.lower():
                    translated = "Hello"
                elif '–º–∏—Ä' in text.lower():
                    translated = "World"
                elif '—Å–ø–∞—Å–∏–±–æ' in text.lower():
                    translated = "Thank you"
                else:
                    translated = f"[EN] {text}"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤
            elif target_lang == 'es':
                if '–ø—Ä–∏–≤–µ—Ç' in text.lower():
                    translated = "Hola"
                elif '–º–∏—Ä' in text.lower():
                    translated = "Mundo"
                elif '—Å–ø–∞—Å–∏–±–æ' in text.lower():
                    translated = "Gracias"
                else:
                    translated = f"[ES] {text}"
            elif target_lang == 'fr':
                if '–ø—Ä–∏–≤–µ—Ç' in text.lower():
                    translated = "Bonjour"
                elif '–º–∏—Ä' in text.lower():
                    translated = "Monde"
                elif '—Å–ø–∞—Å–∏–±–æ' in text.lower():
                    translated = "Merci"
                else:
                    translated = f"[FR] {text}"
            else:
                translated = f"[{target_lang.upper()}] {text}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = (
                "üîÑ <b>–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
                f"üìù <b>–û—Ä–∏–≥–∏–Ω–∞–ª:</b> {text}\n"
                f"üåê <b>–Ø–∑—ã–∫:</b> {supported_languages[target_lang]}\n"
                f"üìã <b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}\n\n"
                "üí° <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å "
                "—Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞ (Google Translate API, Yandex Translate –∏–ª–∏ –¥—Ä—É–≥–æ–π).</i>"
            )

            await self.send_response(update, response_text, parse_mode='HTML')

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)[:100]}")

    async def handle_donate(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /donate"""
        await self.safe_execute(update, context, "donate", self._handle_donate)

    async def _handle_donate(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /donate"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É–º–º–∞–º–∏ –¥–æ–Ω–∞—Ç–æ–≤
        keyboard = [
            [InlineKeyboardButton("üí∞ 100 ‚ÇΩ", callback_data='donate_100')],
            [InlineKeyboardButton("üí∞ 500 ‚ÇΩ", callback_data='donate_500')],
            [InlineKeyboardButton("üí∞ 1000 ‚ÇΩ", callback_data='donate_1000')],
            [InlineKeyboardButton("üí∞ 2500 ‚ÇΩ", callback_data='donate_2500')],
            [InlineKeyboardButton("üí∞ 5000 ‚ÇΩ", callback_data='donate_5000')],
            [InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='donate_custom')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        user_info = await self.user_service.get_or_create_user(user.id, user.username, user.first_name, user.last_name)

        donate_text = (
            "üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
            "üéÅ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:</b>\n"
            "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏–≥—Ä—ã\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-–∏–≥—Ä–∞–º\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
            "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>"
        )

        if update.message:
            await update.message.reply_text(donate_text, parse_mode='HTML', reply_markup=reply_markup)
        elif update.callback_query and update.callback_query.message:
            await update.callback_query.edit_message_text(donate_text, parse_mode='HTML', reply_markup=reply_markup)

    async def handle_text_message(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.safe_execute(update, context, "text_message", self._handle_text_message)

    async def _handle_text_message(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = update.effective_user
        message_text = update.message.text.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "+" –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ–º - –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û –î–û –ü–†–û–í–ï–†–ö–ò –ö–û–ù–§–õ–ò–ö–¢–ê –° –¢–†–ò–ì–ì–ï–†–ê–ú–ò
        # if "+" in message_text:
        #     try:
        #         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ set_message_reaction (–¥–æ—Å—Ç—É–ø–µ–Ω —Å –≤–µ—Ä—Å–∏–∏ 21+)
        #         await context.bot.set_message_reaction(
        #             chat_id=update.message.chat_id,
        #             message_id=update.message.message_id,
        #             reaction="ü§ù"
        #         )
        #         print(f"[DEBUG] Reaction set successfully for message {update.message.message_id}")
        #         self.logger.debug(f"Reaction set for message with '+' by user {user.id}")
        #
        #     except Exception as e:
        #         # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        #         print(f"[WARNING] Failed to set reaction, using fallback: {e}")
        #         self.logger.warning(f"Failed to set reaction for message with '+' by user {user.id}, using fallback: {e}")
        #
        #         try:
        #             # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply —Å emoji —Ä–µ–∞–∫—Ü–∏–∏ –∫–∞–∫ fallback
        #             reaction_message = await update.message.reply_text("ü§ù", reply_to_message_id=update.message.message_id)
        #             print(f"[DEBUG] Reaction reply sent successfully for message {update.message.message_id}")
        #             self.logger.debug(f"Reaction reply fallback sent for message with '+' by user {user.id}")
        #
        #             # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–∫—Ü–∏–µ–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        #             import asyncio
        #             async def delete_reaction():
        #                 try:
        #                     await asyncio.sleep(5)
        #                     await reaction_message.delete()
        #                     print(f"[DEBUG] Reaction reply deleted for message {update.message.message_id}")
        #                 except Exception as delete_e:
        #                     print(f"[WARNING] Failed to delete reaction reply: {delete_e}")
        #
        #             # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è
        #             asyncio.create_task(delete_reaction())
        #
        #         except Exception as fallback_e:
        #             print(f"[ERROR] Both reaction methods failed: primary={e}, fallback={fallback_e}")
        #             self.logger.error(f"Both reaction methods failed for message with '+' by user {user.id}: primary={e}, fallback={fallback_e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        if self._check_profanity(message_text):
            await self._handle_profanity_violation(update, user)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
        if "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã" in message_text or "—Ä–µ–∫–≤–∏–∑–∏—Ç" in message_text:
            await self.send_response(update, BANK_DETAILS_TEXT, reply_to_message_id=update.message.message_id)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.user_service.update_user_activity(user.id, update.effective_chat.id)

    async def handle_donation_callback(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–æ–Ω–∞—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()

        amount_str = query.data.split('_')[1]

        try:
            amount = float(amount_str)
            user = query.from_user

            points = int(amount // 100)
            keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f'donate_confirm_{amount}')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"üí∞ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</b>\n\n"
                f"–°—É–º–º–∞: {amount} RUB\n"
                f"–ü–æ–ª—É—á–∏—Ç–µ –æ—á–∫–æ–≤: {points}\n\n"
                f"üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n\n"
                f"{BANK_DETAILS_TEXT}\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )

        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")

    async def handle_donation_custom(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 750",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='menu_main')]])
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
        context.user_data['waiting_for_donation_amount'] = True

    async def handle_donation_amount_input(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞"""
        try:
            amount = float(update.message.text.strip())
            if amount <= 0:
                raise ValueError()

            user = update.effective_user
            points = int(amount // 100)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await self.user_service.add_donation(user.id, amount)

            if success:
                await update.message.reply_text(
                    f"üí∞ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
                    f"–°—É–º–º–∞: {amount} RUB\n"
                    f"–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞! üéâ",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        except ValidationError as e:
            error_message = str(e)
            if "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in error_message:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif "–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞" in error_message:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_message}")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            error_details = {
                'user_id': user.id if 'user' in locals() else 'unknown',
                'amount': amount if 'amount' in locals() else 'unknown',
                'error_type': 'custom_donation_processing_error',
                'error_message': str(e),
                'error_context': f"handle_donation_amount_input: {type(e).__name__}",
            }
            await self._log_error_to_database(error_details)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–Ω–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        context.user_data.pop('waiting_for_donation_amount', None)

    async def handle_donate_confirm_callback(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É –∏–∑ callback_data
        parts = query.data.split('_')
        if len(parts) < 3:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç–∞")
            return

        try:
            amount = float(parts[2])
            user = query.from_user

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await self.user_service.add_donation(user.id, amount)

            if success:
                points = int(amount // 100)
                await query.edit_message_text(
                    f"üí∞ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
                    f"–°—É–º–º–∞: {amount} RUB\n"
                    f"–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞! üéâ",
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except ValueError:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞")
        except ValidationError as e:
            error_message = str(e)
            if "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in error_message:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif "–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞" in error_message:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_message}")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            error_details = {
                'user_id': user.id if 'user' in locals() else 'unknown',
                'amount': amount if 'amount' in locals() else 'unknown',
                'error_type': 'donation_processing_error',
                'error_message': str(e),
                'error_context': f"handle_donate_confirm_callback: {type(e).__name__}",
                'callback_data': query.data
            }
            await self._log_error_to_database(error_details)
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–Ω–∞—Ç–∞: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–Ω–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    def _check_profanity(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏"""
        if not text:
            return False

        text_lower = text.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        for word in PROFANITY_WORDS:
            if word in text_lower:
                return True

        return False

    async def _handle_profanity_violation(self, update: Update, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º
            await update.message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
        username = user.username if user.username else user.first_name
        await self.send_response(update, f"‚ö†Ô∏è {username}, –≤ –≥—Ä—É–ø–ø–µ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.", parse_mode='HTML')

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            print(f"[DEBUG] Adding warning to user {user.id} for profanity")
            await self.user_service.add_warning(user.id, "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞", 0)  # 0 - —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            print(f"[DEBUG] Warning added successfully to user {user.id}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

    async def handle_voice_message(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.safe_execute(update, context, "voice_message", self._handle_voice_message)

    async def _handle_voice_message(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = update.effective_user
        voice = update.message.voice

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.user_service.update_user_activity(user.id, update.effective_chat.id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        duration = voice.duration

        # –ü–æ–ø—ã—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        transcription = await self._transcribe_voice_message(voice, update)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if transcription and transcription != "[–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å]":
            await update.message.reply_text(
                f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({duration} —Å–µ–∫)\n\n"
                f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcription}\n\n"
                f"üí° +1 –æ—á–∫–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
                reply_to_message_id=update.message.message_id
            )
        else:
            await update.message.reply_text(
                f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({duration} —Å–µ–∫)\n\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å\n"
                f"üí° +1 –æ—á–∫–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
                reply_to_message_id=update.message.message_id
            )

    async def _transcribe_voice_message(self, voice, update: Update) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            try:
                import speech_recognition as sr
                SPEECH_RECOGNITION_AVAILABLE = True
            except ImportError:
                return "[–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ speech_recognition –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞]"

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
            import tempfile
            import os

            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                temp_ogg_path = temp_ogg.name

            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                voice_file = await voice.get_file()
                await voice_file.download_to_drive(temp_ogg_path)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV –¥–ª—è speech_recognition
                temp_wav_path = temp_ogg_path.replace('.ogg', '.wav')

                try:
                    # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    try:
                        from pydub import AudioSegment
                        audio = AudioSegment.from_ogg(temp_ogg_path)
                        audio.export(temp_wav_path, format='wav')
                    except ImportError:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                        import subprocess
                        try:
                            subprocess.run([
                                'ffmpeg', '-i', temp_ogg_path, '-acodec', 'pcm_s16le',
                                '-ar', '16000', '-ac', '1', temp_wav_path
                            ], check=True, capture_output=True)
                        except (subprocess.CalledProcessError, FileNotFoundError):
                            return "[–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pydub –∏–ª–∏ ffmpeg]"

                    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                    recognizer = sr.Recognizer()

                    with sr.AudioFile(temp_wav_path) as source:
                        audio_data = recognizer.record(source)

                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                        try:
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Google Speech Recognition (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                            text = recognizer.recognize_google(audio_data, language='ru-RU')
                            return text
                        except sr.UnknownValueError:
                            return "[–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å]"
                        except sr.RequestError:
                            # –ï—Å–ª–∏ Google API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Sphinx (–ª–æ–∫–∞–ª—å–Ω—ã–π, –Ω–æ –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π)
                            try:
                                text = recognizer.recognize_sphinx(audio_data, language='ru-RU')
                                return text
                            except sr.UnknownValueError:
                                return "[–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å (–ª–æ–∫–∞–ª—å–Ω–æ)]"
                            except sr.RequestError:
                                return "[—Å–µ—Ä–≤–∏—Å—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]"

                finally:
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    try:
                        if os.path.exists(temp_ogg_path):
                            os.unlink(temp_ogg_path)
                        if os.path.exists(temp_wav_path):
                            os.unlink(temp_wav_path)
                    except:
                        pass

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                return "[–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è]"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return "[–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏]"

    async def handle_audio_message(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        await self._handle_media_for_moderation(update, context, "audio")

    async def handle_video_message(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        await self._handle_media_for_moderation(update, context, "video")

    async def _handle_media_for_moderation(self, update: Update, context: ContextTypes, media_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        message = update.message

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.user_service.update_user_activity(user.id, update.effective_chat.id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        if media_type == "audio":
            media = message.audio
            duration = getattr(media, 'duration', 0)
            file_size = getattr(media, 'file_size', 0)
            title = getattr(media, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            performer = getattr(media, 'performer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
        elif media_type == "video":
            media = message.video
            duration = getattr(media, 'duration', 0)
            file_size = getattr(media, 'file_size', 0)
            width = getattr(media, 'width', 0)
            height = getattr(media, 'height', 0)
        else:
            return

        # –ü–æ–ø—ã—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ (–µ—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ)
        transcription = ""
        if media_type == "audio":
            transcription = await self._transcribe_audio_for_moderation(media, update)

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        context.user_data['media_for_moderation'] = {
            'message_id': message.message_id,
            'chat_id': message.chat.id,
            'user_id': user.id,
            'media_type': media_type,
            'file_id': media.file_id,
            'duration': duration,
            'file_size': file_size,
            'transcription': transcription,
            'caption': message.caption or "",
            'timestamp': datetime.now()
        }

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'moderate_approve_now_{user.id}')],
            [InlineKeyboardButton("‚è∞ –û–¥–æ–±—Ä–∏—Ç—å —Å –æ—Ç—Å—Ä–æ—á–∫–æ–π (8 —á–∞—Å–æ–≤)", callback_data=f'moderate_approve_delay_{user.id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'moderate_reject_{user.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await self._notify_admins_for_moderation(context, user, media_type, transcription, message.caption or "")

    async def _transcribe_audio_for_moderation(self, audio, update: Update) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            try:
                import speech_recognition as sr
            except ImportError:
                return "[–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞]"

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
            import tempfile
            import os

            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                temp_ogg_path = temp_ogg.name

            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
                audio_file = await audio.get_file()
                await audio_file.download_to_drive(temp_ogg_path)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV –¥–ª—è speech_recognition
                temp_wav_path = temp_ogg_path.replace('.ogg', '.wav')

                try:
                    # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    try:
                        from pydub import AudioSegment
                        audio_seg = AudioSegment.from_ogg(temp_ogg_path)
                        audio_seg.export(temp_wav_path, format='wav')
                    except ImportError:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                        import subprocess
                        try:
                            subprocess.run([
                                'ffmpeg', '-i', temp_ogg_path, '-acodec', 'pcm_s16le',
                                '-ar', '16000', '-ac', '1', temp_wav_path
                            ], check=True, capture_output=True)
                        except (subprocess.CalledProcessError, FileNotFoundError):
                            return "[–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏]"

                    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                    recognizer = sr.Recognizer()

                    with sr.AudioFile(temp_wav_path) as source:
                        audio_data = recognizer.record(source)

                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                        try:
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Google Speech Recognition (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                            text = recognizer.recognize_google(audio_data, language='ru-RU')
                            return text
                        except sr.UnknownValueError:
                            return "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å]"
                        except sr.RequestError:
                            # –ï—Å–ª–∏ Google API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Sphinx (–ª–æ–∫–∞–ª—å–Ω—ã–π, –Ω–æ –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π)
                            try:
                                text = recognizer.recognize_sphinx(audio_data, language='ru-RU')
                                return text
                            except sr.UnknownValueError:
                                return "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å (–ª–æ–∫–∞–ª—å–Ω–æ)]"
                            except sr.RequestError:
                                return "[–°–µ—Ä–≤–∏—Å—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]"

                finally:
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    try:
                        if os.path.exists(temp_ogg_path):
                            os.unlink(temp_ogg_path)
                        if os.path.exists(temp_wav_path):
                            os.unlink(temp_wav_path)
                    except:
                        pass

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
                return "[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ]"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return "[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ]"

    async def _notify_admins_for_moderation(self, context: ContextTypes, user, media_type: str, transcription: str, caption: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            admin_ids = self.config.bot_config.admin_ids

            for admin_id in admin_ids:
                try:
                    notification_text = (
                        "üîî <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username if user.username else '–Ω–µ—Ç'})\n"
                        f"üÜî ID: {user.id}\n"
                        f"üìÅ –¢–∏–ø —Ñ–∞–π–ª–∞: {media_type}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {caption[:100]}{'...' if len(caption) > 100 else ''}\n"
                        f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription[:200]}{'...' if len(transcription) > 200 else ''}\n\n"
                        "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                    )

                    await self.send_response(update, notification_text, parse_mode='HTML', chat_id=admin_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")

    async def handle_main_menu(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()

        await self._handle_start(update, context)

    async def handle_help_menu(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
        query = update.callback_query
        await query.answer()

        await self._handle_help(update, context)

    async def handle_rank_menu(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–µ–Ω—é —Ä–∞–Ω–≥–∞"""
        query = update.callback_query
        await query.answer()

        await self._handle_rank(update, context)

    async def handle_donate_menu(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–µ–Ω—é –¥–æ–Ω–∞—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()

        await self._handle_donate(update, context)
        return

    async def handle_leaderboard_menu(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–µ–Ω—é —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()

        await self._handle_leaderboard(update, context)

    async def _log_error_to_database(self, error_details: Dict) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            admin_id = error_details.get('user_id', 'unknown')
            if admin_id == 'unknown' and hasattr(self.config, 'bot_config') and hasattr(self.config.bot_config, 'admin_ids'):
                admin_id = self.config.bot_config.admin_ids[0] if self.config.bot_config.admin_ids else 0

            error_type = error_details.get('error_type', 'unknown_error')
            title = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–Ω–∞—Ç–∞: {error_details.get('error_context', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç')}"
            description = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {error_details.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"–°—É–º–º–∞: {error_details.get('amount', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}\n"
                f"–¢–∏–ø –æ—à–∏–±–∫–∏: {error_details.get('error_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_details.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {error_details.get('error_context', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"Callback: {error_details.get('callback_data', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            if 'ValidationError' in error_details.get('error_context', ''):
                priority = 'medium'
            elif 'DatabaseError' in error_details.get('error_context', ''):
                priority = 'high'
            else:
                priority = 'high'  # –î–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if hasattr(self, 'error_repo') and self.error_repo:
                error_id = self.error_repo.add_error(admin_id, error_type, title, description, priority)
                if error_id:
                    self.logger.info(f"–û—à–∏–±–∫–∞ #{error_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                else:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            else:
                self.logger.warning("ErrorRepository –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏")

        except Exception as log_error:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {log_error}", exc_info=True)
    def _format_user_info(self, profile, user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return (
            "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {profile.first_name}\n"
            f"üì± Username: @{profile.username if profile.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üèÜ –†–µ–ø—É—Ç–∞—Ü–∏—è: {profile.reputation}\n"
            f"‚≠ê –†–∞–Ω–≥: {profile.rank}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {profile.message_count}\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {profile.warnings}\n"
            f"üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {profile.joined_date.strftime('%Y-%m-%d') if profile.joined_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        )

    def _compare_keyboards(self, markup1: InlineKeyboardMarkup, markup2: InlineKeyboardMarkup) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å"""
        if not markup1 and not markup2:
            return False  # –û–±–µ –ø—É—Å—Ç—ã–µ - –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if not markup1 or not markup2:
            return True   # –û–¥–Ω–∞ –ø—É—Å—Ç–∞—è, –¥—Ä—É–≥–∞—è –Ω–µ—Ç - –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        if len(markup1.inline_keyboard) != len(markup2.inline_keyboard):
            return True

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É
        for row1, row2 in zip(markup1.inline_keyboard, markup2.inline_keyboard):
            if len(row1) != len(row2):
                return True
            for btn1, btn2 in zip(row1, row2):
                if (btn1.text != btn2.text or
                    btn1.callback_data != btn2.callback_data or
                    btn1.url != btn2.url):
                    return True

        return False  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã

    def _get_medal(self, position: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
        medals = {
            1: "ü•á", 2: "ü•à", 3: "ü•â",
            4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü"
        }
        return medals.get(position, f"{position}.")