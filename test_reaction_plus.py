import pytest
import asyncio
from unittest.mock import AsyncMock, Mock, patch
from telegram import Update, Message, Chat, User, CallbackQuery
from telegram.ext import ContextTypes


class TestReactionPlus:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ "+" –≤ —á–∞—Ç–µ"""

    @pytest.fixture
    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        user_repo = Mock(spec=UserRepository)
        score_repo = Mock(spec=ScoreRepository)

        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_service = Mock(spec=UserService)
        user_service.get_or_create_user = AsyncMock(return_value=Mock(user_id=123456789))
        user_service.update_user_activity = AsyncMock(return_value={'activity_updated': True})

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UserHandlers –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from handlers.user_handlers import UserHandlers

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        config = Mock()
        config.bot_config = Mock()
        config.bot_config.token = "test_token"

        metrics = Mock()
        error_repo = None

        handlers = UserHandlers(config, metrics, user_service, error_repo)
        return handlers, user_service

    @pytest.mark.asyncio
    async def test_reaction_plus_success(self, setup_handlers):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å '+'"""
        handlers, user_service = setup_handlers

        # –°–æ–∑–¥–∞–µ–º mock –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "+"
        message = Mock(spec=Message)
        message.text = "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! +"
        message.set_reaction = AsyncMock(return_value=True)
        message.chat.id = -1001234567890

        update = Mock(spec=Update)
        update.message = message
        update.effective_user = Mock(spec=User, id=123456789, username="testuser", first_name="Test", last_name="User")
        update.effective_chat = Mock(spec=Chat, id=-1001234567890)

        context = Mock(spec=ContextTypes)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await handlers._handle_text_message(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        message.set_reaction.assert_called_once_with("ü§ù")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        user_service.update_user_activity.assert_called_once_with(123456789, -1001234567890)

    @pytest.mark.asyncio
    async def test_reaction_plus_no_plus(self, setup_handlers):
        """–¢–µ—Å—Ç, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –Ω–µ —Å—Ç–∞–≤–∏—Ç—Å—è –µ—Å–ª–∏ –Ω–µ—Ç '+'"""
        handlers, user_service = setup_handlers

        # –°–æ–∑–¥–∞–µ–º mock –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ "+"
        message = Mock(spec=Message)
        message.text = "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!"
        message.set_reaction = AsyncMock(return_value=True)
        message.chat.id = -1001234567890

        update = Mock(spec=Update)
        update.message = message
        update.effective_user = Mock(spec=User, id=123456789, username="testuser", first_name="Test", last_name="User")
        update.effective_chat = Mock(spec=Chat, id=-1001234567890)

        context = Mock(spec=ContextTypes)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await handlers._handle_text_message(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –ù–ï –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        message.set_reaction.assert_not_called()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        user_service.update_user_activity.assert_called_once_with(123456789, -1001234567890)

    @pytest.mark.asyncio
    async def test_reaction_plus_error_handling(self, setup_handlers):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏"""
        handlers, user_service = setup_handlers

        # –°–æ–∑–¥–∞–µ–º mock –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        message = Mock(spec=Message)
        message.text = "–°–æ–≥–ª–∞—Å–µ–Ω +"
        message.set_reaction = AsyncMock(side_effect=Exception("Reaction failed"))
        message.chat.id = -1001234567890

        update = Mock(spec=Update)
        update.message = message
        update.effective_user = Mock(spec=User, id=123456789, username="testuser", first_name="Test", last_name="User")
        update.effective_chat = Mock(spec=Chat, id=-1001234567890)

        context = Mock(spec=ContextTypes)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å —Å –æ—à–∏–±–∫–æ–π)
        await handlers._handle_text_message(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∞–Ω–∞
        message.set_reaction.assert_called_once_with("ü§ù")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —Ä–µ–∞–∫—Ü–∏–∏
        user_service.update_user_activity.assert_called_once_with(123456789, -1001234567890)

    @pytest.mark.asyncio
    async def test_reaction_plus_multiple_plus(self, setup_handlers):
        """–¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ '+'"""
        handlers, user_service = setup_handlers

        # –°–æ–∑–¥–∞–µ–º mock –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ "+"
        message = Mock(spec=Message)
        message.text = "+++ –û—Ç–ª–∏—á–Ω–æ +++"
        message.set_reaction = AsyncMock(return_value=True)
        message.chat.id = -1001234567890

        update = Mock(spec=Update)
        update.message = message
        update.effective_user = Mock(spec=User, id=123456789, username="testuser", first_name="Test", last_name="User")
        update.effective_chat = Mock(spec=Chat, id=-1001234567890)

        context = Mock(spec=ContextTypes)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await handlers._handle_text_message(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        message.set_reaction.assert_called_once_with("ü§ù")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        user_service.update_user_activity.assert_called_once_with(123456789, -1001234567890)

    @pytest.mark.asyncio
    async def test_reaction_plus_profanity_filtered(self, setup_handlers):
        """–¢–µ—Å—Ç, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –Ω–µ —Å—Ç–∞–≤–∏—Ç—Å—è –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É"""
        handlers, user_service = setup_handlers

        # –°–æ–∑–¥–∞–µ–º mock –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –º–∞—Ç–æ–º
        message = Mock(spec=Message)
        message.text = "–û—Ç–ª–∏—á–Ω–æ –ø–∏–∑–¥–∞"  # –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        message.set_reaction = AsyncMock(return_value=True)
        message.delete = AsyncMock(return_value=True)
        message.chat.id = -1001234567890

        update = Mock(spec=Update)
        update.message = message
        update.effective_user = Mock(spec=User, id=123456789, username="testuser", first_name="Test", last_name="User")
        update.effective_chat = Mock(spec=Chat, id=-1001234567890)

        context = Mock(spec=ContextTypes)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await handlers._handle_text_message(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
        message.delete.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –ù–ï –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–∏–∑-–∑–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è)
        message.set_reaction.assert_not_called()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–∏–∑-–∑–∞ —É–¥–∞–ª–µ–Ω–∏—è)
        user_service.update_user_activity.assert_not_called()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])