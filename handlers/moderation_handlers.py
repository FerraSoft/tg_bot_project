"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
–û—Ç–≤–µ—á–∞—é—Ç –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∑–∞–≥–ª—É—à–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""

from typing import Dict, Callable, List
from telegram import Update
from telegram.ext import ContextTypes
from .base_handler import BaseHandler
from services.user_service import UserService
from services.moderation_service import ModerationService


class ModerationHandlers(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.

    –ö–æ–º–∞–Ω–¥—ã:
    - /warn [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞] - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    - /mute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - /unmute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–∫—É
    """

    def __init__(self, config, metrics, user_service: UserService, moderation_service: ModerationService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            metrics: –°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
            user_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            moderation_service: –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        """
        super().__init__(config, metrics)
        self.user_service = user_service
        self.moderation_service = moderation_service

    def get_command_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return {
            'warn': self.handle_warn,
            'mute': self.handle_mute,
            'unmute': self.handle_unmute,
            'ban': self.handle_ban,
            'unban': self.handle_unban,
            'kick': self.handle_kick,
        }

    def get_callback_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {}

    def get_message_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {}

    async def handle_warn(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /warn"""
        await self.safe_execute(update, context, "warn", self._handle_warn, context.args)

    async def _handle_warn(self, update: Update, context: ContextTypes, args: List[str]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /warn"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ middleware, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if not await self.is_moderator(update, user.id):
            await self.send_response(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return

        if len(args) < 2:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /warn 123456789 –°–ø–∞–º –≤ —á–∞—Ç–µ"
            )
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        target_user_id = self.extract_user_id_from_args([args[0]])
        if not target_user_id:
            await self.send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        reason = ' '.join(args[1:])

        # –í—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        result = await self.moderation_service.warn_user(target_user_id, reason, user.id)

        if result['success']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            target_profile = await self.user_service.get_or_create_user(target_user_id)
            target_name = target_profile.first_name if target_profile else f"ID:{target_user_id}"

            response_text = (
                f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_name}\n"
                f"üÜî ID: {target_user_id}\n"
                f"üìä –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result['warnings_count']}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}"
            )

            if result['action_taken']:
                response_text += f"\n\nüö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {result['action_taken']}"

            await self.send_response(update, response_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                private_message = (
                    f"‚ö†Ô∏è –í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n\n"
                    f"üìä –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result['warnings_count']}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}\n\n"
                    f"–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –∫ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞!"
                )
                await context.bot.send_message(chat_id=target_user_id, text=private_message)
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

        else:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")

    async def handle_mute(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mute"""
        await self.safe_execute(update, context, "mute", self._handle_mute, context.args)

    async def _handle_mute(self, update: Update, context: ContextTypes, args: List[str]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mute"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_moderator(update, user.id):
            await self.send_response(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return

        if len(args) < 2:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /mute 123456789 300 –°–ø–∞–º –≤ —á–∞—Ç–µ\n"
                "–í—Ä–µ–º—è: 300 = 5 –º–∏–Ω, 3600 = 1 —á–∞—Å, 86400 = 24 —á–∞—Å–∞"
            )
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        target_user_id = self.extract_user_id_from_args([args[0]])
        if not target_user_id:
            await self.send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        try:
            duration = int(args[1])
            if duration <= 0 or duration > 86400:  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
                raise ValueError()
        except ValueError:
            await self.send_response(update, "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 86400 —Å–µ–∫—É–Ω–¥")
            return

        reason = ' '.join(args[2:]) if len(args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"

        # –ó–∞–≥–ª—É—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await self.moderation_service.mute_user(target_user_id, reason, user.id, duration)

        if result['success']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
            target_profile = await self.user_service.get_or_create_user(target_user_id)
            target_name = target_profile.first_name if target_profile else f"ID:{target_user_id}"

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            hours = duration // 3600
            minutes = (duration % 3600) // 60
            seconds = duration % 60

            time_parts = []
            if hours > 0:
                time_parts.append(f"{hours}—á")
            if minutes > 0:
                time_parts.append(f"{minutes}–º")
            if seconds > 0 and not time_parts:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç
                time_parts.append(f"{seconds}—Å")

            time_str = " ".join(time_parts)

            response_text = (
                f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_name}\n"
                f"üÜî ID: {target_user_id}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_str}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}\n"
                f"üïê –î–æ: {result['expires_at'].strftime('%Y-%m-%d %H:%M:%S')}"
            )

            await self.send_response(update, response_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                private_message = (
                    f"üîá –í—ã –∑–∞–≥–ª—É—à–µ–Ω—ã –≤ —á–∞—Ç–µ!\n\n"
                    f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_str}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}\n"
                    f"üïê –î–æ: {result['expires_at'].strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"–í–æ –≤—Ä–µ–º—è –∑–∞–≥–ª—É—à–∫–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
                await context.bot.send_message(chat_id=target_user_id, text=private_message)
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

        else:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥–ª—É—à–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def handle_unmute(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unmute"""
        await self.safe_execute(update, context, "unmute", self._handle_unmute, context.args)

    async def _handle_unmute(self, update: Update, context: ContextTypes, args: List[str]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unmute"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_moderator(update, user.id):
            await self.send_response(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return

        if not args:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /unmute 123456789"
            )
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        target_user_id = self.extract_user_id_from_args(args)
        if not target_user_id:
            await self.send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –°–Ω–∏–º–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        success = await self.moderation_service.unmute_user(target_user_id, user.id)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
            target_profile = await self.user_service.get_or_create_user(target_user_id)
            target_name = target_profile.first_name if target_profile else f"ID:{target_user_id}"

            response_text = (
                f"üîä –ó–∞–≥–ª—É—à–∫–∞ —Å–Ω—è—Ç–∞!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_name}\n"
                f"üÜî ID: {target_user_id}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}"
            )

            await self.send_response(update, response_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                private_message = (
                    f"üîä –ó–∞–≥–ª—É—à–∫–∞ —Å–Ω—è—Ç–∞!\n\n"
                    f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
                )
                await context.bot.send_message(chat_id=target_user_id, text=private_message)
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

        else:
            await self.send_response(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∑–∞–≥–ª—É—à–∫–∏")

    async def handle_ban(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban"""
        await self.safe_execute(update, context, "ban", self._handle_ban, context.args)

    async def _handle_ban(self, update: Update, context: ContextTypes, args: List[str]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_moderator(update, user.id):
            await self.send_response(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return

        if len(args) < 2:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /ban 123456789 –°–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞"
            )
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        target_user_id = self.extract_user_id_from_args([args[0]])
        if not target_user_id:
            await self.send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        reason = ' '.join(args[1:])

        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await self.moderation_service.ban_user(target_user_id, reason, user.id)

        if result['success']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            target_profile = await self.user_service.get_or_create_user(target_user_id)
            target_name = target_profile.first_name if target_profile else f"ID:{target_user_id}"

            response_text = (
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_name}\n"
                f"üÜî ID: {target_user_id}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}"
            )

            if result['permanent']:
                response_text += "\n\n–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω"
            else:
                response_text += f"\n\n–ò—Å—Ç–µ–∫–∞–µ—Ç: {result['expires_at'].strftime('%Y-%m-%d %H:%M:%S')}"

            await self.send_response(update, response_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                private_message = (
                    f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã!\n\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}\n\n"
                    f"–ë–∞–Ω {'–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π' if result['permanent'] else '–∏—Å—Ç–µ–∫–∞–µ—Ç ' + result['expires_at'].strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–æ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞."
                )
                await context.bot.send_message(chat_id=target_user_id, text=private_message)
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

        else:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def handle_unban(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban"""
        await self.safe_execute(update, context, "unban", self._handle_unban, context.args)

    async def _handle_unban(self, update: Update, context: ContextTypes, args: List[str]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_moderator(update, user.id):
            await self.send_response(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return

        if not args:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /unban 123456789"
            )
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        target_user_id = self.extract_user_id_from_args(args)
        if not target_user_id:
            await self.send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await self.moderation_service.unban_user(target_user_id, user.id)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
            target_profile = await self.user_service.get_or_create_user(target_user_id)
            target_name = target_profile.first_name if target_profile else f"ID:{target_user_id}"

            response_text = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_name}\n"
                f"üÜî ID: {target_user_id}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}"
            )

            await self.send_response(update, response_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                private_message = (
                    f"‚úÖ –í–∞—à –±–∞–Ω –±—ã–ª —Å–Ω—è—Ç!\n\n"
                    f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ."
                )
                await context.bot.send_message(chat_id=target_user_id, text=private_message)
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

        else:
            await self.send_response(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ")

    async def handle_kick(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kick"""
        await self.safe_execute(update, context, "kick", self._handle_kick, context.args)

    async def _handle_kick(self, update: Update, context: ContextTypes, args: List[str]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /kick"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_moderator(update, user.id):
            await self.send_response(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return

        if len(args) < 2:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kick [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /kick 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
            )
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        target_user_id = self.extract_user_id_from_args([args[0]])
        if not target_user_id:
            await self.send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        reason = ' '.join(args[1:])

        # –ü—ã—Ç–∞–µ–º—Å—è –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
        try:
            await context.bot.ban_chat_member(
                chat_id=update.effective_chat.id,
                user_id=target_user_id,
                until_date=None  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –¥–ª—è –∫–∏–∫–∞
            )

            # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ (—ç—Ñ—Ñ–µ–∫—Ç –∫–∏–∫–∞)
            import asyncio
            async def unban_after_delay():
                await asyncio.sleep(30)
                try:
                    await context.bot.unban_chat_member(
                        chat_id=update.effective_chat.id,
                        user_id=target_user_id
                    )
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∫–∏–∫–∞ {target_user_id}: {e}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(unban_after_delay())

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
            target_profile = await self.user_service.get_or_create_user(target_user_id)
            target_name = target_profile.first_name if target_profile else f"ID:{target_user_id}"

            response_text = (
                f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_name}\n"
                f"üÜî ID: {target_user_id}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {user.first_name}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
            )

            await self.send_response(update, response_text)

        except Exception as e:
            await self.send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

    async def is_moderator(self, update: Update, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤).

        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if user_id in self.config.bot_config.admin_ids:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä = –º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
        try:
            chat = update.effective_chat
            if chat:
                member = await chat.get_member(user_id)
                return member.status in ['administrator', 'creator']
        except Exception:
            pass

        return False