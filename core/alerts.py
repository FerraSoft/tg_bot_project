"""
–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Callable
from datetime import datetime, timedelta
import requests
from .config import Config
from .monitoring import MetricsCollector


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, config: Config, metrics: MetricsCollector):
        self.config = config
        self.metrics = metrics
        self.logger = logging.getLogger(__name__)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_rules = {
            'high_error_rate': {
                'enabled': True,
                'threshold': 10,  # –æ—à–∏–±–æ–∫ –≤ –º–∏–Ω—É—Ç—É
                'window': 60,  # —Å–µ–∫—É–Ω–¥—ã
                'cooldown': 300,  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏
                'last_alert': None
            },
            'bot_down': {
                'enabled': True,
                'cooldown': 60,
                'last_alert': None
            },
            'high_response_time': {
                'enabled': True,
                'threshold': 5.0,  # —Å–µ–∫—É–Ω–¥—ã
                'cooldown': 300,
                'last_alert': None
            },
            'database_connection_failed': {
                'enabled': True,
                'cooldown': 60,
                'last_alert': None
            }
        }

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_handlers: List[Callable] = [
            self._send_telegram_alert,
            self._send_email_alert,
            self._send_webhook_alert
        ]

    async def check_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
            await self._check_error_rate_alert()
            await self._check_bot_status_alert()
            await self._check_response_time_alert()
            await self._check_database_alert()

        except Exception as e:
            self.logger.error(f"Error checking alerts: {e}")

    async def _check_error_rate_alert(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –Ω–∞ –≤—ã—Å–æ–∫—É—é —á–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫"""
        rule = self.alert_rules['high_error_rate']

        if not rule['enabled']:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–µ–∫—É–Ω–¥
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Prometheus –º–µ—Ç—Ä–∏–∫–∏
        current_time = datetime.now()
        if (rule['last_alert'] and
            current_time - rule['last_alert'] < timedelta(seconds=rule['cooldown'])):
            return

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)
        error_count = self._get_error_count_last_minute()

        if error_count > rule['threshold']:
            await self._trigger_alert(
                'high_error_rate',
                f"–í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {error_count} –æ—à–∏–±–æ–∫ –≤ –º–∏–Ω—É—Ç—É (–ø–æ—Ä–æ–≥: {rule['threshold']})",
                {'error_count': error_count, 'threshold': rule['threshold']}
            )
            rule['last_alert'] = current_time

    async def _check_bot_status_alert(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞"""
        rule = self.alert_rules['bot_down']

        if not rule['enabled']:
            return

        current_time = datetime.now()
        if (rule['last_alert'] and
            current_time - rule['last_alert'] < timedelta(seconds=rule['cooldown'])):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        if self.metrics.bot_status._value.get() == 0:  # –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await self._trigger_alert(
                'bot_down',
                "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                {'status': 'down'}
            )
            rule['last_alert'] = current_time

    async def _check_response_time_alert(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞"""
        rule = self.alert_rules['high_response_time']

        if not rule['enabled']:
            return

        current_time = datetime.now()
        if (rule['last_alert'] and
            current_time - rule['last_alert'] < timedelta(seconds=rule['cooldown'])):
            return

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
        avg_response_time = self._get_average_response_time()

        if avg_response_time > rule['threshold']:
            await self._trigger_alert(
                'high_response_time',
                f"–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {avg_response_time:.2f}—Å (–ø–æ—Ä–æ–≥: {rule['threshold']}—Å)",
                {'response_time': avg_response_time, 'threshold': rule['threshold']}
            )
            rule['last_alert'] = current_time

    async def _check_database_alert(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        rule = self.alert_rules['database_connection_failed']

        if not rule['enabled']:
            return

        current_time = datetime.now()
        if (rule['last_alert'] and
            current_time - rule['last_alert'] < timedelta(seconds=rule['cooldown'])):
            return

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        if not self._check_database_connection():
            await self._trigger_alert(
                'database_connection_failed',
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!",
                {'status': 'connection_failed'}
            )
            rule['last_alert'] = current_time

    async def _trigger_alert(self, alert_type: str, message: str, extra_data: Dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        self.logger.warning(f"ALERT [{alert_type}]: {message}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.alert_handlers:
            try:
                await handler(alert_type, message, extra_data or {})
            except Exception as e:
                self.logger.error(f"Error in alert handler {handler.__name__}: {e}")

    async def _send_telegram_alert(self, alert_type: str, message: str, extra_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        if not self.config.bot_config.enable_developer_notifications:
            return

        try:
            developer_chat_id = self.config.bot_config.developer_chat_id
            if not developer_chat_id:
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞
            alert_emojis = {
                'high_error_rate': 'üö®',
                'bot_down': 'üí•',
                'high_response_time': 'üêå',
                'database_connection_failed': 'üóÑÔ∏è'
            }

            emoji = alert_emojis.get(alert_type, '‚ö†Ô∏è')
            alert_message = f"{emoji} <b>–ê–õ–ï–†–¢: {alert_type.replace('_', ' ').title()}</b>\n\n{message}"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            alert_message += f"\n\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if extra_data:
                alert_message += "\n\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:"
                for key, value in extra_data.items():
                    alert_message += f"\n‚Ä¢ {key}: {value}"

            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±–æ—Ç
            self.logger.info(f"Telegram alert sent: {alert_message[:100]}...")

        except Exception as e:
            self.logger.error(f"Failed to send Telegram alert: {e}")

    async def _send_email_alert(self, alert_type: str, message: str, extra_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ email"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SMTP –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –≤—Ä–æ–¥–µ SendGrid
        self.logger.info(f"Email alert for {alert_type}: {message}")

    async def _send_webhook_alert(self, alert_type: str, message: str, extra_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ webhook"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è webhook
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å POST –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook URL
        self.logger.info(f"Webhook alert for {alert_type}: {message}")

    def _get_error_count_last_minute(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É"""
        # –ò–º–∏—Ç–∞—Ü–∏—è: –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Prometheus –º–µ—Ç—Ä–∏–∫–∏
        return 5  # –ó–∞–≥–ª—É—à–∫–∞

    def _get_average_response_time(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞"""
        # –ò–º–∏—Ç–∞—Ü–∏—è: –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Prometheus –º–µ—Ç—Ä–∏–∫–∏
        return 2.5  # –ó–∞–≥–ª—É—à–∫–∞

    def _check_database_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        # –ò–º–∏—Ç–∞—Ü–∏—è: –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        return True  # –ó–∞–≥–ª—É—à–∫–∞

    def add_alert_rule(self, name: str, rule: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        self.alert_rules[name] = rule
        self.logger.info(f"Added alert rule: {name}")

    def disable_alert_rule(self, name: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        if name in self.alert_rules:
            self.alert_rules[name]['enabled'] = False
            self.logger.info(f"Disabled alert rule: {name}")

    def enable_alert_rule(self, name: str):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        if name in self.alert_rules:
            self.alert_rules[name]['enabled'] = True
            self.logger.info(f"Enabled alert rule: {name}")