"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å AI —Å–µ—Ä–≤–∏—Å–∞–º–∏.
"""

import logging
from typing import Dict, Any, List
from aiogram import types
from aiogram.dispatcher import FSMContext

from services.ai_service import ai_integration
from core.permissions import permission_manager, UserRole
from utils.validators import InputValidator


class AIHandlers:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∫–æ–º–∞–Ω–¥.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏.
    """

    def __init__(self, bot, user_service, message_service=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ AI.

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            user_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            message_service: –°–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.bot = bot
        self.user_service = user_service
        self.message_service = message_service
        self.logger = logging.getLogger(__name__)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
        self.ai_states = {}

    async def handle_gigachat_command(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gigachat [–∑–∞–ø—Ä–æ—Å]

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        query = message.get_args()

        if not query:
            await message.reply(
                "ü§ñ <b>GigaChat</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gigachat <i>–≤–∞—à –∑–∞–ø—Ä–æ—Å</i>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /gigachat –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –ú–æ—Å–∫–≤–µ\n"
                "‚Ä¢ /gigachat –ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
                "‚Ä¢ /gigachat –û–±—ä—è—Å–Ω–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò",
                parse_mode='HTML'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not await self._check_ai_access(user_id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–≤–æ–¥–∞
        await self.bot.send_chat_action(message.chat.id, "typing")

        try:
            response = await ai_integration.generate_response('gigachat', query, user_id)
            await message.reply(f"ü§ñ <b>GigaChat:</b>\n\n{response}", parse_mode='HTML')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ GigaChat –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_yandexgpt_command(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /yandexgpt [–∑–∞–ø—Ä–æ—Å]

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        query = message.get_args()

        if not query:
            await message.reply(
                "üß† <b>YandexGPT</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /yandexgpt <i>–≤–∞—à –∑–∞–ø—Ä–æ—Å</i>\n\n"
                "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /yandexgpt –ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –º–Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?\n"
                "‚Ä¢ /yandexgpt –ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–∞—Ä–∫–∞\n"
                "‚Ä¢ /yandexgpt –ê–Ω–∞–ª–∏–∑ –º–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤",
                parse_mode='HTML'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not await self._check_ai_access(user_id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–≤–æ–¥–∞
        await self.bot.send_chat_action(message.chat.id, "typing")

        try:
            response = await ai_integration.generate_response('yandexgpt', query, user_id)
            await message.reply(f"üß† <b>YandexGPT:</b>\n\n{response}", parse_mode='HTML')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ YandexGPT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_max_sync_command(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /max_sync

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not await self._check_ai_access(user_id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º.")
            return

        await message.reply(
            "üí¨ <b>MAX –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "‚Ä¢ /gigachat - –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            "‚Ä¢ /yandexgpt - –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
            "‚Ä¢ /ai_help - –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ AI —Ñ—É–Ω–∫—Ü–∏—è–º",
            parse_mode='HTML'
        )

    async def handle_ai_help_command(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ai_help

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        available_services = await ai_integration.get_available_services()

        help_text = (
            "ü§ñ <b>AI –ü–æ–º–æ—â–Ω–∏–∫–∏ –≤ \"–ë–æ—Ç –≤ –ø–æ–º–æ—â—å\"</b>\n\n"
            "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–∏—à–∫–∞: <b>–ú—É–ª—å—Ç–∏-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ AI</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        )

        if 'gigachat' in available_services:
            help_text += "ü§ñ /gigachat <–∑–∞–ø—Ä–æ—Å> - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ GigaChat\n"
        else:
            help_text += "ü§ñ /gigachat - –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

        if 'yandexgpt' in available_services:
            help_text += "üß† /yandexgpt <–∑–∞–ø—Ä–æ—Å> - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI YandexGPT\n"
        else:
            help_text += "üß† /yandexgpt - –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

        help_text += "üí¨ /max_sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å MAX (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
        help_text += "‚ùì /ai_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"

        help_text += "<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        help_text += "‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        help_text += "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ AI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏\n"
        help_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤\n"
        help_text += "‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n\n"

        help_text += "<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        help_text += "‚Ä¢ /gigachat –ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?\n"
        help_text += "‚Ä¢ /yandexgpt –ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—á–∏—Ç–∞—Ç—å?\n"
        help_text += "‚Ä¢ /gigachat –û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"

        await message.reply(help_text, parse_mode='HTML')

    async def handle_ai_message(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ AI —á–∞—Ç–∞)

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ AI —á–∞—Ç–∞
        if user_id not in self.ai_states:
            return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ AI —Å–æ–æ–±—â–µ–Ω–∏–µ

        ai_state = self.ai_states[user_id]
        service_name = ai_state.get('service', 'gigachat')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not await self._check_ai_access(user_id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–≤–æ–¥–∞
        await self.bot.send_chat_action(message.chat.id, "typing")

        try:
            query = message.text.strip()
            response = await ai_integration.generate_response(service_name, query, user_id)

            service_emoji = {'gigachat': 'ü§ñ', 'yandexgpt': 'üß†', 'max': 'üí¨'}.get(service_name, 'ü§ñ')
            await message.reply(f"{service_emoji} <b>{service_name.title()}:</b>\n\n{response}", parse_mode='HTML')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ AI —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_switch_ai_command(self, message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–∞

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        args = message.get_args()

        if not args:
            available = await ai_integration.get_available_services()
            services_text = "\n".join([f"‚Ä¢ {s}" for s in available])

            await message.reply(
                "üîÑ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /switch_ai <i>—Å–µ—Ä–≤–∏—Å</i>\n\n"
                f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:</b>\n{services_text}\n\n"
                f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                f"‚Ä¢ /switch_ai gigachat\n"
                f"‚Ä¢ /switch_ai yandexgpt",
                parse_mode='HTML'
            )
            return

        service_name = args.lower().strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not await self._check_ai_access(user_id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º.")
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        success = await ai_integration.switch_service(user_id, service_name)

        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.ai_states[user_id] = {'service': service_name, 'timestamp': message.date}

            emoji = {'gigachat': 'ü§ñ', 'yandexgpt': 'üß†', 'max': 'üí¨'}.get(service_name, 'ü§ñ')
            await message.reply(
                f"{emoji} <b>AI —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: <i>{service_name.title()}</i>\n\n"
                f"–í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å.",
                parse_mode='HTML'
            )
        else:
            await message.reply(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    async def _check_ai_access(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role = await self.user_service.get_user_role_enum_async(user_id)

            # AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (USER –∏ –≤—ã—à–µ)
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ USE_AI_SERVICES
            return user_role in [UserRole.USER, UserRole.MODERATOR, UserRole.ADMIN, UserRole.SUPER_ADMIN]

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ AI: {e}")
            return False

    def get_command_handlers(self) -> Dict[str, callable]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

        Returns:
            –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥
        """
        return {
            'gigachat': self.handle_gigachat_command,
            'yandexgpt': self.handle_yandexgpt_command,
            'max_sync': self.handle_max_sync_command,
            'ai_help': self.handle_ai_help_command,
            'switch_ai': self.handle_switch_ai_command
        }

    def get_message_handlers(self) -> List[callable]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        return [self.handle_ai_message]