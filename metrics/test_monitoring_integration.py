#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ—Ç—Ä–∏–∫, –ª–æ–≥–æ–≤ –∏ –∞–ª–µ—Ä—Ç–æ–≤.
"""

import asyncio
import logging
import time
import sys
import io
from core.config import Config
from .monitoring import MetricsCollector, structured_logger
from .alerts import AlertManager

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


async def test_monitoring_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    import os
    os.environ['BOT_TOKEN'] = 'test_token_for_monitoring'
    os.environ['ADMIN_IDS'] = '123456789'

    config = Config()

    metrics = MetricsCollector(config)
    alert_manager = AlertManager(config, metrics)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = structured_logger('test_monitoring', config)

    print("‚úÖ –°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫
    print("\nüìä –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫...")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics.record_error('TestError', 'test_handler', Exception('Test exception'))
    metrics.record_command('test_command', 'test_handler', 1.5)
    metrics.record_message('text')
    metrics.record_api_call('weather_api', 2.3)
    metrics.update_active_users(100)
    metrics.set_bot_status(1)

    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã")

    # –¢–µ—Å—Ç 2: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüìù –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")

    logger.info("Test info message", extra={'user_id': 123, 'command': 'test'})
    logger.warning("Test warning message", extra={'handler': 'test_handler'})
    logger.error("Test error message", extra={'error_type': 'test_error'})

    print("‚úÖ –õ–æ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã")

    # –¢–µ—Å—Ç 3: –ê–ª–µ—Ä—Ç—ã
    print("\nüö® –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤...")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
    metrics.error_counter.labels(error_type='TestError', handler='test_handler')._value.set(15)

    await alert_manager.check_alerts()

    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    # –¢–µ—Å—Ç 4: Sentry (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if config.bot_config.enable_sentry:
        print("\nüõ°Ô∏è –¢–µ—Å—Ç Sentry –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        metrics.send_sentry_message("Test message from integration test", "info")
        print("‚úÖ Sentry —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ /metrics")
    print("‚Ä¢ –õ–æ–≥–∏: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON –ª–æ–≥–∏ –≤ bot.log")
    print("‚Ä¢ –ê–ª–µ—Ä—Ç—ã: —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("‚Ä¢ Sentry: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)")


if __name__ == "__main__":
    asyncio.run(test_monitoring_system())