"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º:
–æ—Ç /start -> –∏–≥—Ä—ã -> –º–æ–¥–µ—Ä–∞—Ü–∏—è -> –¥–æ–Ω–∞—Ç—ã -> –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—Å–µ—Ö —Å–ª–æ–µ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

import pytest
import tempfile
import os
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.config import Config
from services.user_service import UserService
from services.game_service import GameService
from services.moderation_service import ModerationService
from services.donation_service import DonationService
from handlers.user_handlers import UserHandlers
from handlers.game_handlers import GameHandlers
from handlers.moderation_handlers import ModerationHandlers
from database import UserRepository, ScoreRepository, PaymentRepository


class TestFullUserScenarioIntegration:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""

    @pytest.fixture
    def temp_config(self):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
            f.write("""
BOT_TOKEN = "123456789:integration_test_token"
ADMIN_IDS = [123456789, 987654321]
MODERATOR_IDS = [555666777]
OPENWEATHER_API_KEY = "test_key"
NEWS_API_KEY = "test_key"
OPENAI_API_KEY = "test_key"
STRIPE_SECRET_KEY = "sk_test_123456789"
YOOKASSA_SHOP_ID = "123456"
YOOKASSA_SECRET_KEY = "test_secret_key"
""")
            config_path = f.name

        yield config_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(config_path):
            os.unlink(config_path)

    @pytest.fixture
    def temp_db(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        from database.models import DatabaseSchema

        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        repo = UserRepository(db_path)
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            for table_sql in DatabaseSchema.get_create_tables_sql():
                repo._execute_query(table_sql)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            repo.initialize_achievements()

        finally:
            repo.close()

        yield db_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(db_path):
            os.unlink(db_path)

    @pytest.fixture
    def mock_update(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        update = Mock()

        # –ú–æ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Mock()
        user.id = 123456789
        user.username = "test_user"
        user.first_name = "Test"
        user.last_name = "User"
        update.effective_user = user

        # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Mock()
        message.message_id = 1
        message.reply_text = AsyncMock()
        message.edit_text = AsyncMock()
        update.message = message

        # –ú–æ–∫–∞–µ–º —á–∞—Ç
        chat = Mock()
        chat.id = -1001234567890
        update.effective_chat = chat

        # –ú–æ–∫–∞–µ–º callback_query
        callback_query = Mock()
        callback_query.id = "test_callback_id"
        callback_query.data = "test_data"
        callback_query.message = message
        callback_query.answer = AsyncMock()
        update.callback_query = callback_query

        return update

    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.args = []

        # –ú–æ–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Mock()
        app._date_time = datetime.now()
        context._application = app

        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞
        bot = AsyncMock()
        context.bot = bot

        context.user_data = {}

        return context

    @pytest.mark.asyncio
    async def test_complete_new_user_journey(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        payment_repo = PaymentRepository(temp_db)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(user_repo, score_repo)
        game_service = GameService(user_repo, score_repo)
        moderation_service = ModerationService(user_repo, score_repo)
        donation_service = DonationService(payment_repo, config.api_keys)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        user_handlers = UserHandlers(config, user_service)
        game_handlers = GameHandlers(config, config, game_service, config)
        moderation_handlers = ModerationHandlers(config, config, user_service, moderation_service)

        try:
            # === –≠–¢–ê–ü 1: –ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç - /start ===
            print("–≠—Ç–∞–ø 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await user_handlers.handle_start(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )
            assert profile.user_id == mock_update.effective_user.id
            assert profile.rank == "–ù–æ–≤–∏—á–æ–∫"
            assert profile.reputation == 0

            # === –≠–¢–ê–ü 2: –ò–∑—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ - /help ===
            print("–≠—Ç–∞–ø 2: –ò–∑—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_help(mock_update, mock_context)

            help_response = mock_update.message.reply_text.call_args[0][0]
            assert "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º" in help_response or "üìã" in help_response

            # === –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω–≥–∞ - /rank ===
            print("–≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω–≥–∞")
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_rank(mock_update, mock_context)

            rank_response = mock_update.message.reply_text.call_args[0][0]
            assert "üèÜ" in rank_response or "–†–∞–Ω–≥" in rank_response

            # === –≠–¢–ê–ü 4: –ò–≥—Ä–∞ - –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ ===
            print("–≠—Ç–∞–ø 4: –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞")
            mock_update.message.reply_text.reset_mock()
            await game_handlers._handle_play_game(mock_update, mock_context)

            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–º–µ–Ω—å
            mock_context.args = ['rock']
            await game_handlers.handle_rps_choice(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É
            game_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )
            assert game_profile.reputation >= 0  # –û—á–∫–∏ –º–æ–≥–ª–∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å—Å—è

            # === –≠–¢–ê–ü 5: –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ ===
            print("–≠—Ç–∞–ø 5: –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")
            mock_update.message.reply_text.reset_mock()
            await game_handlers._handle_tic_tac_toe(mock_update, mock_context)

            # –î–µ–ª–∞–µ–º —Ö–æ–¥
            mock_context.args = ['4']
            await game_handlers.handle_tictactoe_move(mock_update, mock_context)

            # === –≠–¢–ê–ü 6: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ===
            print("–≠—Ç–∞–ø 6: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
            mock_update.message.reply_text.reset_mock()
            await game_handlers._handle_quiz(mock_update, mock_context)

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
            mock_context.args = ['0']
            await game_handlers.handle_quiz_answer(mock_update, mock_context)

            # === –≠–¢–ê–ü 7: –ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç ===
            print("–≠—Ç–∞–ø 7: –ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç")
            donation_amount = 500.0
            success = await user_service.add_donation(mock_update.effective_user.id, donation_amount)
            assert success

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = await user_service.get_user_achievements(mock_update.effective_user.id)
            achievement_names = []
            for ach_id, unlocked_at in achievements:
                ach_data = user_repo.get_all_achievements()
                for ach in ach_data:
                    if ach['id'] == ach_id:
                        achievement_names.append(ach['name'])
                        break

            assert "–ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç" in achievement_names

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
            donator_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )
            assert donator_profile.reputation >= 5  # –ú–∏–Ω–∏–º—É–º 5 –æ—á–∫–æ–≤ –æ—Ç –¥–æ–Ω–∞—Ç–∞

            # === –≠–¢–ê–ü 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ===
            print("–≠—Ç–∞–ø 8: –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_leaderboard(mock_update, mock_context)

            leaderboard_response = mock_update.message.reply_text.call_args[0][0]
            assert "ü•á" in leaderboard_response or "–¢–æ–ø" in leaderboard_response

            # === –≠–¢–ê–ü 9: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ===
            print("–≠—Ç–∞–ø 9: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            final_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            assert final_profile.reputation > 0
            assert final_profile.user_id == mock_update.effective_user.id
            assert final_profile.username == mock_update.effective_user.username

            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {final_profile.reputation} –æ—á–∫–æ–≤, —Ä–∞–Ω–≥: {final_profile.rank}")

        finally:
            user_repo.close()
            score_repo.close()
            payment_repo.close()

    @pytest.mark.asyncio
    async def test_user_progression_scenario(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ –æ–ø—ã—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        payment_repo = PaymentRepository(temp_db)

        user_service = UserService(user_repo, score_repo)
        game_service = GameService(user_repo, score_repo)
        donation_service = DonationService(payment_repo, config.api_keys)

        try:
            # === –§–ê–ó–ê 1: –ù–æ–≤–∏—á–æ–∫ ===
            print("–§–∞–∑–∞ 1: –ù–æ–≤–∏—á–æ–∫")
            profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )
            assert profile.rank == "–ù–æ–≤–∏—á–æ–∫"
            initial_score = profile.reputation

            # –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
            for _ in range(5):
                await score_repo.update_score(mock_update.effective_user.id, 2)  # +2 –∑–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É

            # === –§–ê–ó–ê 2: –ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç ===
            print("–§–∞–∑–∞ 2: –ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç")
            await user_service.add_donation(mock_update.effective_user.id, 300.0)  # +3 –æ—á–∫–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = await user_service.get_user_achievements(mock_update.effective_user.id)
            achievement_names = [user_repo.get_all_achievements()[i]['name']
                               for i, _ in achievements if i < len(user_repo.get_all_achievements())]

            # === –§–ê–ó–ê 3: –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ ===
            print("–§–∞–∑–∞ 3: –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫")
            # –ï—â–µ –∏–≥—Ä—ã –∏ –¥–æ–Ω–∞—Ç—ã
            for _ in range(10):
                await score_repo.update_score(mock_update.effective_user.id, 1)

            await user_service.add_donation(mock_update.effective_user.id, 1000.0)  # +10 –æ—á–∫–æ–≤

            # === –§–ê–ó–ê 4: –û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ===
            print("–§–∞–∑–∞ 4: –û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            final_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            total_score = final_profile.reputation
            assert total_score > initial_score + 20  # –ú–∏–Ω–∏–º—É–º 20+ –æ—á–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            final_achievements = await user_service.get_user_achievements(mock_update.effective_user.id)
            assert len(final_achievements) >= 2  # –ú–∏–Ω–∏–º—É–º 2 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

            print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_score} –æ—á–∫–æ–≤, {len(final_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

        finally:
            user_repo.close()
            score_repo.close()
            payment_repo.close()

    @pytest.mark.asyncio
    async def test_user_interaction_with_moderation(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        user_service = UserService(user_repo, score_repo)
        moderation_service = ModerationService(user_repo, score_repo)
        user_handlers = UserHandlers(config, user_service)
        moderation_handlers = ModerationHandlers(config, config, user_service, moderation_service)

        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            regular_user_id = 999999999
            await user_service.get_or_create_user(regular_user_id, "regular", "Regular", "User")

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            mock_context.args = [str(regular_user_id), "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"]
            await moderation_handlers._handle_warn(mock_update, mock_context, mock_context.args)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ
            user_history = await moderation_service.get_user_moderation_history(regular_user_id)
            assert len(user_history) >= 1

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            regular_profile = await user_service.get_or_create_user(regular_user_id, "regular", "Regular", "User")
            assert regular_profile.warnings >= 1

            # –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö - –º—É—Ç
            await moderation_service.warn_user(regular_user_id, "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", mock_update.effective_user.id)
            await moderation_service.warn_user(regular_user_id, "–ï—â–µ –æ–¥–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", mock_update.effective_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
            is_muted = moderation_service.is_user_muted(regular_user_id)
            # –õ–æ–≥–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–π, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å

            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_community_interaction_scenario(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        payment_repo = PaymentRepository(temp_db)

        user_service = UserService(user_repo, score_repo)
        donation_service = DonationService(payment_repo, config.api_keys)
        user_handlers = UserHandlers(config, user_service)

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            users_data = [
                (111111111, "alice", "Alice", "Smith"),
                (222222222, "bob", "Bob", "Johnson"),
                (333333333, "charlie", "Charlie", "Brown"),
                (mock_update.effective_user.id, mock_update.effective_user.username,
                 mock_update.effective_user.first_name, mock_update.effective_user.last_name)
            ]

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, username, first_name, last_name in users_data:
                await user_service.get_or_create_user(user_id, username, first_name, last_name)

                # –ö–∞–∂–¥—ã–π –¥–µ–ª–∞–µ—Ç –¥–æ–Ω–∞—Ç
                await user_service.add_donation(user_id, 200.0)  # +2 –æ—á–∫–∞ –∫–∞–∂–¥–æ–º—É

                # –ö–∞–∂–¥—ã–π –∏–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—ã
                await score_repo.update_score(user_id, 5)  # +5 –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–º—É

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_leaderboard(mock_update, mock_context)

            leaderboard_response = mock_update.message.reply_text.call_args[0][0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
            top_users = await user_service.get_top_users(10)
            assert len(top_users) >= 4

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞–Ω–≥–æ–≤
            ranks = set()
            for user_id, username, first_name, score in top_users:
                profile = await user_service.get_or_create_user(user_id, username, first_name, "Test")
                ranks.add(profile.rank)

            assert len(ranks) >= 1  # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–Ω–≥

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
            total_achievements = 0
            for user_id, _, _, _ in top_users[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø-3
                user_achievements = await user_service.get_user_achievements(user_id)
                total_achievements += len(user_achievements)

            assert total_achievements >= 3  # –ú–∏–Ω–∏–º—É–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

            print(f"‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ: {len(top_users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, {total_achievements} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

        finally:
            user_repo.close()
            score_repo.close()
            payment_repo.close()

    @pytest.mark.asyncio
    async def test_user_retention_scenario(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        payment_repo = PaymentRepository(temp_db)

        user_service = UserService(user_repo, score_repo)
        game_service = GameService(user_repo, score_repo)
        donation_service = DonationService(payment_repo, config.api_keys)
        user_handlers = UserHandlers(config, user_service)

        try:
            # === –ù–ï–î–ï–õ–Ø 1: –ù–∞—á–∞–ª–æ ===
            print("–ù–µ–¥–µ–ª—è 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
            await user_handlers.handle_start(mock_update, mock_context)

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–≥—Ä—ã
            for day in range(7):
                await score_repo.update_score(mock_update.effective_user.id, 3)  # 3 –∏–≥—Ä—ã –≤ –¥–µ–Ω—å

            week1_score = score_repo.get_total_score(mock_update.effective_user.id)

            # === –ù–ï–î–ï–õ–Ø 2: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ===
            print("–ù–µ–¥–µ–ª—è 2: –†–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            # –î–æ–Ω–∞—Ç
            await user_service.add_donation(mock_update.effective_user.id, 300.0)

            # –ë–æ–ª—å—à–µ –∏–≥—Ä
            for day in range(7):
                await score_repo.update_score(mock_update.effective_user.id, 5)  # 5 –∏–≥—Ä –≤ –¥–µ–Ω—å

            week2_score = score_repo.get_total_score(mock_update.effective_user.id)

            # === –ù–ï–î–ï–õ–Ø 3: –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
            print("–ù–µ–¥–µ–ª—è 3: –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            # –ï—â–µ –æ–¥–∏–Ω –¥–æ–Ω–∞—Ç
            await user_service.add_donation(mock_update.effective_user.id, 500.0)

            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            for day in range(7):
                await score_repo.update_score(mock_update.effective_user.id, 8)  # 8 –∏–≥—Ä –≤ –¥–µ–Ω—å

            week3_score = score_repo.get_total_score(mock_update.effective_user.id)

            # === –ü–†–û–í–ï–†–ö–ò ===
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Ç–∏
            assert week2_score > week1_score
            assert week3_score > week2_score

            # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            final_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = await user_service.get_user_achievements(mock_update.effective_user.id)
            assert len(achievements) >= 2  # –ú–∏–Ω–∏–º—É–º 2 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ 3 –Ω–µ–¥–µ–ª–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω–≥
            assert final_profile.reputation >= 50  # –ú–∏–Ω–∏–º—É–º 50 –æ—á–∫–æ–≤

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–Ω–∞—Ç–æ–≤
            total_donations = await user_service.get_total_donations(mock_update.effective_user.id, 2025)
            assert total_donations >= 800.0

            print(f"‚úÖ –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ: {final_profile.reputation} –æ—á–∫–æ–≤, —Ä–∞–Ω–≥ {final_profile.rank}")

        finally:
            user_repo.close()
            score_repo.close()
            payment_repo.close()

    @pytest.mark.asyncio
    async def test_error_recovery_scenario(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, user_service)

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_handlers.handle_start(mock_update, mock_context)

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Å–µ—Ä–≤–∏—Å–µ
            original_get_or_create = user_service.get_or_create_user
            user_service.get_or_create_user = AsyncMock(side_effect=Exception("Temporary service error"))

            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É (–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É)
            await user_handlers.handle_rank(mock_update, mock_context)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            user_service.get_or_create_user = original_get_or_create

            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É (—Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_rank(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            assert mock_update.message.reply_text.called
            rank_response = mock_update.message.reply_text.call_args[0][0]
            assert "–†–∞–Ω–≥" in rank_response or "üèÜ" in rank_response

            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_cross_feature_integration_scenario(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        payment_repo = PaymentRepository(temp_db)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        user_service = UserService(user_repo, score_repo)
        game_service = GameService(user_repo, score_repo)
        moderation_service = ModerationService(user_repo, score_repo)
        donation_service = DonationService(payment_repo, config.api_keys)

        user_handlers = UserHandlers(config, user_service)
        game_handlers = GameHandlers(config, config, game_service, config)
        moderation_handlers = ModerationHandlers(config, config, user_service, moderation_service)

        try:
            # === –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô ===
            print("–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π")

            # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            await user_handlers.handle_start(mock_update, mock_context)

            # 2. –ò–≥—Ä—ã
            await game_handlers._handle_play_game(mock_update, mock_context)
            mock_context.args = ['rock']
            await game_handlers.handle_rps_choice(mock_update, mock_context)

            # 3. –î–æ–Ω–∞—Ç—ã
            await user_service.add_donation(mock_update.effective_user.id, 1000.0)

            # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞)
            target_user_id = 777777777
            await user_service.get_or_create_user(target_user_id, "target", "Target", "User")

            mock_context.args = [str(target_user_id), "–¢–µ—Å—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏"]
            await moderation_handlers._handle_warn(mock_update, mock_context, mock_context.args)

            # === –ü–†–û–í–ï–†–ö–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            final_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            assert final_profile.reputation >= 10  # –ú–∏–Ω–∏–º—É–º –æ—Ç –¥–æ–Ω–∞—Ç–∞
            assert final_profile.user_id == mock_update.effective_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = await user_service.get_user_achievements(mock_update.effective_user.id)
            assert len(achievements) >= 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã
            game_stats = game_service.get_game_statistics(mock_update.effective_user.id)
            assert isinstance(game_stats, dict)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
            moderation_stats = await moderation_service.get_moderation_stats()
            assert isinstance(moderation_stats, dict)
            assert moderation_stats['total_warnings'] >= 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
            total_donations = await user_service.get_total_donations(mock_update.effective_user.id, 2025)
            assert total_donations >= 1000.0

            print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ")

        finally:
            user_repo.close()
            score_repo.close()
            payment_repo.close()