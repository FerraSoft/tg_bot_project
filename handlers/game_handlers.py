"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.
–û—Ç–≤–µ—á–∞—é—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–≥—Ä–∞–º–∏ –∏ –∏–≥—Ä–æ–≤—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏.
"""

import logging
from typing import Dict, Callable, List, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .base_handler import BaseHandler
from services.game_service import GameService


class GameHandlers(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.

    –ò–≥—Ä—ã:
    - –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
    - –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
    - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
    """

    def __init__(self, config, metrics, game_service: GameService, moderation_service=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            metrics: –°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
            game_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏
            moderation_service: –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        super().__init__(config, metrics)
        self.game_service = game_service
        self.moderation_service = moderation_service

    def get_command_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        return {
            'play_game': self.handle_play_game,
            'rock_paper_scissors': self.handle_rock_paper_scissors,
            'tic_tac_toe': self.handle_tic_tac_toe,
            'quiz': self.handle_quiz,
            'battleship': self.handle_battleship,
            'game_2048': self.handle_2048,
            'tetris': self.handle_tetris,
            'snake': self.handle_snake,
        }

    def get_callback_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'game_rps_rock': self.handle_rps_choice,
            'game_rps_paper': self.handle_rps_choice,
            'game_rps_scissors': self.handle_rps_choice,
            'game_rps_start': self.handle_rock_paper_scissors,
            'game_tictactoe_move': self.handle_tictactoe_move,
            'game_tictactoe_start': self.handle_tic_tac_toe,
            'game_quiz_answer': self.handle_quiz_answer,
            'game_quiz_start': self.handle_quiz,
            'game_menu': self.handle_game_menu,
            'menu_games': self.handle_game_menu,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–∏–Ω–∏ –∏–≥—Ä—ã"
            'game_battleship_shot': self.handle_battleship_shot,
            'game_battleship_start': self.handle_battleship,
            'game_2048_move': self.handle_2048_move,
            'game_2048_start': self.handle_2048,
            'game_tetris_move': self.handle_tetris_move,
            'game_tetris_start': self.handle_tetris,
            'game_snake_move': self.handle_snake_move,
            'game_snake_start': self.handle_snake,
        }

    def get_message_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {}

    async def handle_play_game(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /play_game"""
        await self.safe_execute(update, context, "play_game", self._handle_play_game)

    async def _handle_play_game(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /play_game"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
        keyboard = [
            [InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps_start')],
            [InlineKeyboardButton("‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tictactoe_start')],
            [InlineKeyboardButton("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='game_quiz_start')],
            [InlineKeyboardButton("üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='game_battleship_start')],
            # [InlineKeyboardButton("üî¢ 2048", callback_data='game_2048_start')],
            # [InlineKeyboardButton("üß© –¢–µ—Ç—Ä–∏—Å", callback_data='game_tetris_start')],
            # [InlineKeyboardButton("üêç –ó–º–µ–π–∫–∞", callback_data='game_snake_start')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_main')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_response(
            update,
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n\n"
            "ü™® –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞\n"
            "‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ - —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞\n"
            "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π\n"
            "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π - –ø–æ—Ç–æ–ø–∏ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n"
            "üî¢ 2048 - —Å–æ–µ–¥–∏–Ω—è–π —á–∏—Å–ª–∞ –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ 2048\n"
            "üß© –¢–µ—Ç—Ä–∏—Å - —Å–∫–ª–∞–¥—ã–≤–∞–π —Ñ–∏–≥—É—Ä—ã –∏ –∑–∞–ø–æ–ª–Ω—è–π –ª–∏–Ω–∏–∏\n"
            "üêç –ó–º–µ–π–∫–∞ - —É–ø—Ä–∞–≤–ª—è–π –∑–º–µ–π–∫–æ–π –∏ —Å–æ–±–∏—Ä–∞–π –µ–¥—É\n\n"
            "–ó–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
            reply_markup=reply_markup
        )

    async def handle_rock_paper_scissors(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rock_paper_scissors"""
        await self.safe_execute(update, context, "rock_paper_scissors", self._handle_rock_paper_scissors)

    async def _handle_rock_paper_scissors(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rock_paper_scissors"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = self.game_service.create_game_session('rock_paper_scissors', user.id, update.effective_chat.id)

        if not session or not session.game_id:
            if update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å", callback_data=f'game_rps_rock_{session.game_id}')],
            [InlineKeyboardButton("üìÑ –ë—É–º–∞–≥–∞", callback_data=f'game_rps_paper_{session.game_id}')],
            [InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data=f'game_rps_scissors_{session.game_id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_response(
            update,
            "ü§ñ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:",
            reply_markup=reply_markup
        )

    async def handle_tic_tac_toe(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tic_tac_toe"""
        await self.safe_execute(update, context, "tic_tac_toe", self._handle_tic_tac_toe)

    async def _handle_tic_tac_toe(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tic_tac_toe"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = self.game_service.create_game_session('tic_tac_toe', user.id, update.effective_chat.id)

        if not session or not session.game_id:
            if update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        keyboard = self._create_tictactoe_keyboard(session.game_id)

        await self.send_response(
            update,
            "‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!\n\n–í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º (‚ùå). –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:",
            reply_markup=keyboard
        )

    async def handle_quiz(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /quiz"""
        await self.safe_execute(update, context, "quiz", self._handle_quiz)

    async def _handle_quiz(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /quiz"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = self.game_service.create_game_session('quiz', user.id, update.effective_chat.id)

        if not session or not session.game_id:
            if update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await self._send_quiz_question(update, session)

    async def handle_rps_choice(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º callback_data
        parts = query.data.split('_')
        self.logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è RPS: {query.data}, parts: {parts}")
        if len(parts) < 4:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: rps, len(parts) < 4, parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        choice = parts[2]  # rock, paper, –∏–ª–∏ scissors
        game_id = '_'.join(parts[3:])  # ID –∏–≥—Ä—ã

        if not game_id:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: rps, game_id –ø—É—Å—Ç–æ–π, parts: {parts}")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        await self.safe_execute(update, context, "rps_choice", self._handle_rps_choice, game_id, choice)

    async def _handle_rps_choice(self, update: Update, context: ContextTypes, game_id: str, choice: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ RPS"""
        query = update.callback_query

        if not game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        session = self.game_service.get_game_session(game_id)
        if not session or session.status != "active":
            await self.handle_game_menu(update, context)
            return

        # –ò–≥—Ä–∞–µ–º –≤ RPS
        result = self.game_service.play_rock_paper_scissors(game_id, choice)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        choice_emojis = {
            'rock': 'ü™®',
            'paper': 'üìÑ',
            'scissors': '‚úÇÔ∏è'
        }

        result_text = (
            f"ü§ñ –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞!\n\n"
            f"–í–∞—à –≤—ã–±–æ—Ä: {choice_emojis[choice]}\n"
            f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {choice_emojis[result['bot_choice']]}\n\n"
        )

        if result['result'] == 'win':
            result_text += f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{result['points']} –æ—á–∫–æ–≤"
        elif result['result'] == 'draw':
            result_text += f"ü§ù –ù–∏—á—å—è! +{result['points']} –æ—á–∫–æ–≤"
        else:
            result_text += "üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        self.game_service.end_game_session(game_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_response(update, result_text, reply_markup=reply_markup)

    async def handle_tictactoe_move(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º callback_data
        parts = query.data.split('_')
        logging.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è tictactoe: {query.data}, parts: {parts}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ start –∫–æ–º–∞–Ω–¥–æ–π
        if len(parts) == 3 and parts[2] == 'start':
            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ start –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è tictactoe, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: {query.data}")
            return

        if len(parts) < 5:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: tictactoe, len(parts) < 5, parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        try:
            position = int(parts[3])  # –ø–æ–∑–∏—Ü–∏—è —Ö–æ–¥–∞
            game_id = '_'.join(parts[4:]) if len(parts) > 4 else None
        except (ValueError, IndexError):
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –¥–ª—è tictactoe: parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ tictactoe: game_id={game_id}, position={position}, parts={parts}")
        if not game_id:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: tictactoe, game_id –ø—É—Å—Ç–æ–π, parts: {parts}")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        await self.safe_execute(update, context, "tictactoe_move", self._handle_tictactoe_move, game_id, position)

    async def _handle_tictactoe_move(self, update: Update, context: ContextTypes, game_id: str, position: int):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
        query = update.callback_query

        if not game_id:
            logging.error("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: tictactoe, game_id –ø—É—Å—Ç–æ–π")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        session = self.game_service.get_game_session(game_id)
        if not session or session.status != "active":
            await self.handle_game_menu(update, context)
            return

        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        result = self.game_service.make_tic_tac_toe_move(game_id, position)

        if result['status'] == 'player_win':
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            keyboard = self._create_tictactoe_keyboard(game_id)
            await self.send_response(
                update,
                f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üèÜ\n\n{self._format_tictactoe_board(result['board'])}",
                reply_markup=keyboard
            )
            self.game_service.end_game_session(game_id)
        elif result['status'] == 'bot_win':
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_response(
                update,
                f"üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!\n\n{self._format_tictactoe_board(result['board'])}",
                reply_markup=reply_markup
            )
            self.game_service.end_game_session(game_id)
        elif result['status'] == 'draw':
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_response(
                update,
                f"ü§ù –ù–∏—á—å—è!\n\n{self._format_tictactoe_board(result['board'])}",
                reply_markup=reply_markup
            )
            self.game_service.end_game_session(game_id)
        elif result['status'] == 'already_occupied':
            # –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            await update.callback_query.answer("–ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        elif result['status'] == 'continue':
            # –•–æ–¥ —Å–¥–µ–ª–∞–Ω
            keyboard = self._create_tictactoe_keyboard(game_id)
            await self.send_response(
                update,
                f"–•–æ–¥ –±–æ—Ç–∞ —Å–¥–µ–ª–∞–Ω!\n\n{self._format_tictactoe_board(result['board'])}\n\n–í–∞—à —Ö–æ–¥:",
                reply_markup=keyboard
            )

    async def handle_quiz_answer(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º callback_data
        parts = query.data.split('_')
        logging.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è quiz: {query.data}, parts: {parts}")
        if len(parts) < 4:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: quiz, len(parts) < 4, parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        answer_index = int(parts[3])  # –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞
        game_id = '_'.join(parts[4:]) if len(parts) > 4 else None

        if not game_id:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: quiz, game_id –ø—É—Å—Ç–æ–π, parts: {parts}")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        await self.safe_execute(update, context, "quiz_answer", self._handle_quiz_answer, game_id, answer_index)

    async def _handle_quiz_answer(self, update: Update, context: ContextTypes, game_id: str, answer_index: int):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
        query = update.callback_query

        if not game_id:
            logging.error("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: quiz, game_id –ø—É—Å—Ç–æ–π")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        session = self.game_service.get_game_session(game_id)
        if not session or session.status != "active":
            await self.handle_game_menu(update, context)
            return

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
        result = self.game_service.answer_quiz_question(game_id, answer_index)

        if result['status'] == 'game_over':
            # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_response(
                update,
                f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {result['final_score']}\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {result['points']}",
                reply_markup=reply_markup
            )
            self.game_service.end_game_session(game_id)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
            session = self.game_service.get_game_session(game_id)
            if session:
                await self._send_quiz_question(update, session, edit_message=True)

    async def handle_game_menu(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()

        # –î–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é –Ω–µ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∏–≥—Ä–∞
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
        keyboard = [
            [InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps_start')],
            [InlineKeyboardButton("‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tictactoe_start')],
            [InlineKeyboardButton("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='game_quiz_start')],
            [InlineKeyboardButton("üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='game_battleship_start')],
            # [InlineKeyboardButton("üî¢ 2048", callback_data='game_2048_start')],
            # [InlineKeyboardButton("üß© –¢–µ—Ç—Ä–∏—Å", callback_data='game_tetris_start')],
            # [InlineKeyboardButton("üêç –ó–º–µ–π–∫–∞", callback_data='game_snake_start')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_help')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_response(
            update,
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n\n"
            "ü™® –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞\n"
            "‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ - —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞\n"
            "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π\n"
            "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π - –ø–æ—Ç–æ–ø–∏ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n"
            "üî¢ 2048 - —Å–æ–µ–¥–∏–Ω—è–π —á–∏—Å–ª–∞ –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ 2048\n"
            "üß© –¢–µ—Ç—Ä–∏—Å - —Å–∫–ª–∞–¥—ã–≤–∞–π —Ñ–∏–≥—É—Ä—ã –∏ –∑–∞–ø–æ–ª–Ω—è–π –ª–∏–Ω–∏–∏\n"
            "üêç –ó–º–µ–π–∫–∞ - —É–ø—Ä–∞–≤–ª—è–π –∑–º–µ–π–∫–æ–π –∏ —Å–æ–±–∏—Ä–∞–π –µ–¥—É\n\n"
            "–ó–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
            reply_markup=reply_markup
        )

    def _create_tictactoe_keyboard(self, game_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
        keyboard = []
        if not game_id:
            return InlineKeyboardMarkup([])

        session = self.game_service.get_game_session(game_id)

        if not session:
            return InlineKeyboardMarkup([])

        board = session.data['board']

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è 3x3
        for i in range(3):
            row = []
            for j in range(3):
                position = i * 3 + j
                cell_value = board[position]

                if cell_value == ' ':
                    button_text = "‚¨ú"
                    callback_data = f"game_tictactoe_move_{position}_{game_id}"
                elif cell_value == 'X':
                    button_text = "‚ùå"
                    callback_data = f"game_tictactoe_move_{position}_{game_id}"
                else:
                    button_text = "‚≠ï"
                    callback_data = f"game_tictactoe_move_{position}_{game_id}"

                row.append(InlineKeyboardButton(button_text, callback_data=callback_data))

            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')])

        return InlineKeyboardMarkup(keyboard)

    def _format_tictactoe_board(self, board: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        symbols = {' ': '‚¨ú', 'X': '‚ùå', 'O': '‚≠ï'}

        formatted_board = ""
        for i in range(3):
            for j in range(3):
                formatted_board += symbols[board[i * 3 + j]]
            formatted_board += "\n"

        return formatted_board

    async def _send_quiz_question(self, update: Update, session, edit_message: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        current_q = session.data['current_question']
        questions = session.data['questions']

        if current_q >= len(questions):
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        question = questions[current_q]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        keyboard = []
        for i, answer in enumerate(question['answers']):
            keyboard.append([InlineKeyboardButton(
                answer,
                callback_data=f"game_quiz_answer_{i}_{session.game_id}"
            )])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        question_text = (
            f"üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –í–æ–ø—Ä–æ—Å {current_q + 1}/{len(questions)}\n\n"
            f"<b>{question['question']}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
        )

        await self.send_response(
            update,
            question_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    # ===== –ù–û–í–´–ï –ò–ì–†–´ =====

    async def handle_battleship(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /battleship"""
        await self.safe_execute(update, context, "battleship", self._handle_battleship)

    async def _handle_battleship(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /battleship"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = self.game_service.create_game_session('battleship', user.id, update.effective_chat.id)

        if not session or not session.game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã
        keyboard = self._create_battleship_keyboard(session.game_id)

        await self.send_response(
            update,
            "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!\n\n"
            "–ü–æ—Ç–æ–ø–∏ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.\n\n"
            "–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–∫–∞_—Å—Ç–æ–ª–±–µ—Ü (0-4)",
            reply_markup=keyboard
        )

    async def handle_2048(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /game_2048"""
        await self.safe_execute(update, context, "game_2048", self._handle_2048)

    async def _handle_2048(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /game_2048"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = self.game_service.create_game_session('game_2048', user.id, update.effective_chat.id)

        if not session or not session.game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã
        keyboard = self._create_2048_keyboard(session.game_id)

        await self.send_response(
            update,
            "üî¢ 2048!\n\n"
            "–°–æ–µ–¥–∏–Ω—è–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ —Å—Ç—Ä–µ–ª–∫–∞–º–∏!\n"
            "–¶–µ–ª—å - –ø–æ–ª—É—á–∏—Ç—å 2048!",
            reply_markup=keyboard
        )

    async def handle_tetris(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tetris"""
        await self.safe_execute(update, context, "tetris", self._handle_tetris)

    async def _handle_tetris(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tetris"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = self.game_service.create_game_session('tetris', user.id, update.effective_chat.id)

        if not session or not session.game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã
        keyboard = self._create_tetris_keyboard(session.game_id)

        await self.send_response(
            update,
            "üß© –¢–µ—Ç—Ä–∏—Å!\n\n"
            "–£–ø—Ä–∞–≤–ª—è–π –ø–∞–¥–∞—é—â–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏!\n"
            "–ó–∞–ø–æ–ª–Ω—è–π –ª–∏–Ω–∏–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –∏—Å—á–µ–∑–ª–∏!",
            reply_markup=keyboard
        )

    async def handle_snake(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /snake"""
        await self.safe_execute(update, context, "snake", self._handle_snake)

    async def _handle_snake(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /snake"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = self.game_service.create_game_session('snake', user.id, update.effective_chat.id)

        if not session or not session.game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã
        keyboard = self._create_snake_keyboard(session.game_id)

        await self.send_response(
            update,
            "üêç –ó–º–µ–π–∫–∞!\n\n"
            "–£–ø—Ä–∞–≤–ª—è–π –∑–º–µ–π–∫–æ–π –∏ —Å–æ–±–∏—Ä–∞–π –µ–¥—É!\n"
            "–ù–µ –≤—Ä–µ–∑–∞–π—Å—è –≤ —Å—Ç–µ–Ω–∫–∏ –∏ —Å–µ–±—è!",
            reply_markup=keyboard
        )

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –•–û–î–û–í –î–õ–Ø –ù–û–í–´–• –ò–ì–† =====

    async def handle_battleship_shot(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –º–æ—Ä—Å–∫–æ–º –±–æ–µ"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        parts = query.data.split('_')
        logging.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è battleship: {query.data}, parts: {parts}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ start –∫–æ–º–∞–Ω–¥–æ–π
        if len(parts) == 3 and parts[2] == 'start':
            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ start –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è battleship, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: {query.data}")
            return

        if len(parts) < 6:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: battleship, len(parts) < 6, parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        try:
            row, col = int(parts[3]), int(parts[4])
            game_id = '_'.join(parts[5:]) if len(parts) > 5 else None
        except (ValueError, IndexError):
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –¥–ª—è battleship: parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ battleship: game_id={game_id}, row={row}, col={col}, parts={parts}")
        if not game_id:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: battleship, game_id –ø—É—Å—Ç–æ–π, parts: {parts}")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        await self.safe_execute(update, context, "battleship_shot", self._handle_battleship_shot, game_id, row, col)

    async def _handle_battleship_shot(self, update: Update, context: ContextTypes, game_id: str, row: int, col: int):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –º–æ—Ä—Å–∫–æ–º –±–æ–µ"""
        query = update.callback_query

        if not game_id:
            logging.error("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: battleship, game_id –ø—É—Å—Ç–æ–π")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        session = self.game_service.get_game_session(game_id)
        if not session or session.status != "active":
            await self.handle_game_menu(update, context)
            return

        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        result = self.game_service.make_battleship_shot(game_id, row, col)

        if result['status'] == 'win':
            keyboard = self._create_battleship_keyboard(game_id)
            await self.send_response(
                update,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n"
                f"–í—ã—Å—Ç—Ä–µ–ª–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {result['shots']}\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {result['points']}",
                reply_markup=keyboard
            )
            self.game_service.end_game_session(game_id)
        elif result['status'] == 'already_shot':
            # –£–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            await update.callback_query.answer("–í —ç—Ç—É –∫–ª–µ—Ç–∫—É —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏!")
        elif result['status'] == 'continue':
            keyboard = self._create_battleship_keyboard(game_id)
            hit_text = "üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!" if result['hit'] else "üíß –ü—Ä–æ–º–∞—Ö!"
            await self.send_response(
                update,
                f"{hit_text}\n–í—ã—Å—Ç—Ä–µ–ª–æ–≤: {result['shots']}\n–í–∞—à —Ö–æ–¥:",
                reply_markup=keyboard
            )

    async def handle_2048_move(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ 2048"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        parts = query.data.split('_')
        logging.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è 2048: {query.data}, parts: {parts}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ start –∫–æ–º–∞–Ω–¥–æ–π
        if len(parts) == 3 and parts[2] == 'start':
            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ start –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è 2048, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: {query.data}")
            return

        if len(parts) < 4:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: 2048, len(parts) < 4, parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        direction = parts[3]
        game_id = '_'.join(parts[4:]) if len(parts) > 4 else None

        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ 2048: game_id={game_id}, direction={direction}, parts={parts}")
        if not game_id:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: 2048, game_id –ø—É—Å—Ç–æ–π, parts: {parts}")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        await self.safe_execute(update, context, "2048_move", self._handle_2048_move, game_id, direction)

    async def _handle_2048_move(self, update: Update, context: ContextTypes, game_id: str, direction: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ 2048"""
        query = update.callback_query

        if not game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        session = self.game_service.get_game_session(game_id)
        if not session or session.status != "active":
            await self.handle_game_menu(update, context)
            return

        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        result = self.game_service.make_2048_move(game_id, direction)

        if result['status'] == 'win':
            keyboard = self._create_2048_keyboard(game_id)
            await self.send_response(
                update,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 2048!\n"
                f"–°—á–µ—Ç: {result['score']}\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {result['points']}",
                reply_markup=keyboard
            )
            self.game_service.end_game_session(game_id)
        elif result['status'] == 'lose':
            keyboard = self._create_2048_keyboard(game_id)
            await self.send_response(
                update,
                f"üòû –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                f"–°—á–µ—Ç: {result['score']}",
                reply_markup=keyboard
            )
            self.game_service.end_game_session(game_id)
        else:
            last_score = session.data.get('last_score', -1)
            if result['score'] != last_score:
                keyboard = self._create_2048_keyboard(game_id)
                moves_text = f"\n–•–æ–¥—ã: {result.get('moves', 'N/A')}" if 'moves' in result else ""
                await self.send_response(
                    update,
                    f"–°—á–µ—Ç: {result['score']}{moves_text}\n–í–∞—à —Ö–æ–¥:",
                    reply_markup=keyboard
                )
                session.data['last_score'] = result['score']
            else:
                await update.callback_query.answer("–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏!")

    async def handle_tetris_move(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ —Ç–µ—Ç—Ä–∏—Å–µ"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏–µ
        parts = query.data.split('_')
        logging.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è tetris: {query.data}, parts: {parts}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ start –∫–æ–º–∞–Ω–¥–æ–π
        if len(parts) == 3 and parts[2] == 'start':
            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ start –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è tetris, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: {query.data}")
            return

        if len(parts) < 4:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: tetris, len(parts) < 4, parts: {parts}")
            await self.send_response(update, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        action = parts[3]
        game_id = '_'.join(parts[4:]) if len(parts) > 4 else None

        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ tetris: game_id={game_id}, action={action}, parts={parts}")
        if not game_id:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: tetris, game_id –ø—É—Å—Ç–æ–π, parts: {parts}")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        await self.safe_execute(update, context, "tetris_move", self._handle_tetris_move, game_id, action)

    async def _handle_tetris_move(self, update: Update, context: ContextTypes, game_id: str, action: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ —Ç–µ—Ç—Ä–∏—Å–µ"""
        query = update.callback_query

        if not game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        session = self.game_service.get_game_session(game_id)
        if not session or session.status != "active":
            await self.handle_game_menu(update, context)
            return

        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        result = self.game_service.make_tetris_move(game_id, action)

        if result['status'] == 'game_over':
            keyboard = self._create_tetris_keyboard(game_id)
            await self.send_response(
                update,
                f"üòû –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                f"–°—á–µ—Ç: {result['score']}\n"
                f"–õ–∏–Ω–∏–π –æ—á–∏—â–µ–Ω–æ: {result['lines_cleared']}",
                reply_markup=keyboard
            )
            self.game_service.end_game_session(game_id)
        else:
            last_score = session.data.get('last_score', -1)
            if result['score'] != last_score:
                keyboard = self._create_tetris_keyboard(game_id)
                level_text = f"\n–£—Ä–æ–≤–µ–Ω—å: {result.get('level', 'N/A')}" if 'level' in result else ""
                await self.send_response(
                    update,
                    f"–°—á–µ—Ç: {result['score']}\n"
                    f"–õ–∏–Ω–∏–π: {result['lines_cleared']}{level_text}",
                    reply_markup=keyboard
                )
                session.data['last_score'] = result['score']
            else:
                await update.callback_query.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π!")

    async def handle_snake_move(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –∑–º–µ–π–∫–µ"""
        query = update.callback_query
        await query.answer()

        # –ü–∞—Ä—Å–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        parts = query.data.split('_')
        logging.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è snake: {query.data}, parts: {parts}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ start –∫–æ–º–∞–Ω–¥–æ–π
        if len(parts) == 3 and parts[2] == 'start':
            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ start –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è snake, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: {query.data}")
            return

        if len(parts) < 4:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: snake, len(parts) < 4, parts: {parts}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        direction = parts[3]
        game_id = '_'.join(parts[4:]) if len(parts) > 4 else None

        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ snake: game_id={game_id}, direction={direction}, parts={parts}")
        if not game_id:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: snake, game_id –ø—É—Å—Ç–æ–π, parts: {parts}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        await self.safe_execute(update, context, "snake_move", self._handle_snake_move, game_id, direction)

    async def _handle_snake_move(self, update: Update, context: ContextTypes, game_id: str, direction: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –∑–º–µ–π–∫–µ"""
        query = update.callback_query

        if not game_id:
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        session = self.game_service.get_game_session(game_id)
        if not session or session.status != "active":
            await self.handle_game_menu(update, context)
            return

        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        result = self.game_service.make_snake_move(game_id, direction)

        if result['status'] == 'game_over':
            keyboard = self._create_snake_keyboard(game_id)
            await self.send_response(
                update,
                f"üòû –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                f"–î–ª–∏–Ω–∞ –∑–º–µ–π–∫–∏: {result['length']}\n"
                f"–°—á–µ—Ç: {result['score']}",
                reply_markup=keyboard
            )
            self.game_service.end_game_session(game_id)
        else:
            last_score = session.data.get('last_score', -1)
            if result['score'] != last_score:
                keyboard = self._create_snake_keyboard(game_id)
                await self.send_response(
                    update,
                    f"–î–ª–∏–Ω–∞: {result['length']}\n"
                    f"–°—á–µ—Ç: {result['score']}\n"
                    f"–í–∞—à —Ö–æ–¥:",
                    reply_markup=keyboard
                )
                session.data['last_score'] = result['score']
            else:
                await update.callback_query.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π!")

    # ===== –°–û–ó–î–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–† –î–õ–Ø –ù–û–í–´–• –ò–ì–† =====

    def _create_battleship_keyboard(self, game_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ—Ä—Å–∫–æ–≥–æ –±–æ—è"""
        keyboard = []
        if not game_id:
            return InlineKeyboardMarkup([])

        letters = ['A', 'B', 'C', 'D', 'E']

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_row = [InlineKeyboardButton(" ", callback_data='header')]
        for j in range(5):
            header_row.append(InlineKeyboardButton(str(j), callback_data='header'))
        keyboard.append(header_row)

        # –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        session = self.game_service.get_game_session(game_id)
        if session:
            board = session.data['bot_board']
            for i in range(5):
                row = [InlineKeyboardButton(letters[i], callback_data='header')]
                for j in range(5):
                    cell = board[i][j]
                    if cell == '~':
                        text = 'üåä'
                        callback_data = f'game_battleship_shot_{i}_{j}_{game_id}'
                    elif cell == 'üí•':
                        text = 'üí•'
                        callback_data = f'game_battleship_shot_{i}_{j}_{game_id}'
                    elif cell == 'üíß':
                        text = 'üíß'
                        callback_data = f'game_battleship_shot_{i}_{j}_{game_id}'
                    else:
                        text = cell
                        callback_data = f'game_battleship_shot_{i}_{j}_{game_id}'

                    row.append(InlineKeyboardButton(text, callback_data=callback_data))
                keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_battleship_start'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')
        ])

        return InlineKeyboardMarkup(keyboard)

    def _create_2048_keyboard(self, game_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è 2048"""
        keyboard = []
        if not game_id:
            return InlineKeyboardMarkup([])

        session = self.game_service.get_game_session(game_id)
        if session:
            board = session.data['board']
            for i in range(4):
                row = []
                for j in range(4):
                    cell = board[i][j]
                    text = str(cell) if cell != 0 else ' '
                    row.append(InlineKeyboardButton(text, callback_data=f'game_2048_cell_{i}_{j}_{game_id}'))
                keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'game_2048_move_left_{game_id}'),
            InlineKeyboardButton("‚¨ÜÔ∏è", callback_data=f'game_2048_move_up_{game_id}'),
            InlineKeyboardButton("‚¨áÔ∏è", callback_data=f'game_2048_move_down_{game_id}'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f'game_2048_move_right_{game_id}')
        ])

        keyboard.append([
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_2048_start'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')
        ])

        return InlineKeyboardMarkup(keyboard)

    def _create_tetris_keyboard(self, game_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Ç—Ä–∏—Å–∞"""
        keyboard = []
        if not game_id:
            return InlineKeyboardMarkup([])

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'game_tetris_move_left_{game_id}'),
            InlineKeyboardButton("üîÑ", callback_data=f'game_tetris_move_rotate_{game_id}'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f'game_tetris_move_right_{game_id}')
        ])

        keyboard.append([
            InlineKeyboardButton("‚¨áÔ∏è", callback_data=f'game_tetris_move_down_{game_id}'),
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_tetris_start'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')
        ])

        return InlineKeyboardMarkup(keyboard)

    def _create_snake_keyboard(self, game_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–º–µ–π–∫–∏"""
        keyboard = []
        if not game_id:
            return InlineKeyboardMarkup([])

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'game_snake_move_left_{game_id}'),
            InlineKeyboardButton("‚¨ÜÔ∏è", callback_data=f'game_snake_move_up_{game_id}'),
            InlineKeyboardButton("‚¨áÔ∏è", callback_data=f'game_snake_move_down_{game_id}'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f'game_snake_move_right_{game_id}')
        ])

        keyboard.append([
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_snake_start'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='game_menu')
        ])

        return InlineKeyboardMarkup(keyboard)