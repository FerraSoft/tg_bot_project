import logging
import random
import requests
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, InlineQueryHandler, ChatMemberHandler
from database_sqlite import Database
from config_local import BOT_TOKEN, OPENWEATHER_API_KEY, NEWS_API_KEY
from messages import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ messages.py

class TelegramBot:
    def __init__(self):
        self.application = ApplicationBuilder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("rank", self.rank))
        self.application.add_handler(CommandHandler("ranks_info", self.ranks_info))
        self.application.add_handler(CommandHandler("leaderboard", self.leaderboard))
        self.application.add_handler(CommandHandler("info", self.user_info))
        self.application.add_handler(CommandHandler("weather", self.weather))
        self.application.add_handler(CommandHandler("news", self.news))
        self.application.add_handler(CommandHandler("translate", self.translate))
        self.application.add_handler(CommandHandler("play_game", self.play_game))
        self.application.add_handler(CommandHandler("ban", self.ban_user))
        self.application.add_handler(CommandHandler("mute", self.mute_user))
        self.application.add_handler(CommandHandler("warn", self.warn_user))
        self.application.add_handler(CommandHandler("kick", self.kick_user))
        self.application.add_handler(CommandHandler("unmute", self.unmute_user))
        self.application.add_handler(CommandHandler("unban", self.unban_user))
        self.application.add_handler(CommandHandler("promote", self.promote_user))
        self.application.add_handler(CommandHandler("demote", self.demote_user))
        self.application.add_handler(CommandHandler("import_csv", self.import_csv))
        self.application.add_handler(CommandHandler("schedule_post", self.schedule_post))
        self.application.add_handler(CommandHandler("list_posts", self.list_posts))
        self.application.add_handler(CommandHandler("delete_post", self.delete_post))
        self.application.add_handler(CommandHandler("publish_now", self.publish_now))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(ChatMemberHandler(self.handle_new_chat_members, ChatMemberHandler.CHAT_MEMBER))

        # –ò–Ω–ª–∞–π–Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.application.add_handler(InlineQueryHandler(self.handle_inline_query))

        # Callback queries –¥–ª—è –∏–≥—Ä
        from telegram.ext import CallbackQueryHandler
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        db.add_user(user.id, user.username, user.first_name, user.last_name)

        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='cmd_help')],
            [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã", callback_data='cmd_play_game')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = USER_MESSAGES['welcome'].format(name=user.first_name)

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(HELP_TEXT, parse_mode='HTML', reply_markup=reply_markup)

    async def rank(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        db.add_user(user.id, user.username, user.first_name, user.last_name)
        user_info = db.get_user_info(user.id)

        if user_info:
            rank_text = RANK_MESSAGES['rank_title'].format(
                score=user_info['–û—á–∫–∏'],
                warnings=user_info['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'],
                role=user_info['–†–æ–ª—å']
            )
        else:
            rank_text = RANK_MESSAGES['rank_not_found']

        await update.message.reply_text(rank_text, parse_mode='HTML')

    async def leaderboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        top_users = db.get_top_users(100)

        if top_users:
            leaderboard_text = RANK_MESSAGES['leaderboard_title']
            for i, (user_id, username, first_name, score) in enumerate(top_users, 1):
                name = username if username else first_name
                leaderboard_text += RANK_MESSAGES['leaderboard_entry'].format(
                    position=i, name=name, score=score
                )
        else:
            leaderboard_text = RANK_MESSAGES['leaderboard_empty']

        await update.message.reply_text(leaderboard_text, parse_mode='HTML')

    async def user_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = await self.is_admin(update.effective_chat, user.id)

        if len(context.args) > 0 and is_admin:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = context.args[0]
            try:
                target_user_id = int(target_user)
                user_info = db.get_user_info(target_user_id)
                if user_info:
                    info_text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

ID: {user_info['ID']}
–ò–º—è: {user_info['–ò–º—è']}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_info['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']}
–†–µ–ø—É—Ç–∞—Ü–∏—è: {user_info['–†–µ–ø—É—Ç–∞—Ü–∏—è']}
–†–∞–Ω–≥: {user_info['–†–∞–Ω–≥']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']}
–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏: {user_info['–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏']}
–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {user_info['–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è']}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_info['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'] or '–Ω–∏–∫–æ–≥–¥–∞'}
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_info['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è']}
–ü–æ–∫–∏–Ω—É–ª: {user_info['–ü–æ–∫–∏–Ω—É–ª'] or '–µ—â—ë –∑–¥–µ—Å—å'}
–Ø–∑—ã–∫: {user_info['–Ø–∑—ã–∫']}
–î–µ–π—Å—Ç–≤–∏—è: {user_info['–î–µ–π—Å—Ç–≤–∏—è']}
–û—á–∫–∏: {user_info['–û—á–∫–∏']}
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_info['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π']}
–†–æ–ª—å: {user_info['–†–æ–ª—å']}
                    """
                else:
                    info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            except ValueError:
                info_text = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user}"
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            db.add_user(user.id, user.username, user.first_name, user.last_name)
            user_info = db.get_user_info(user.id)

            if user_info:
                info_text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>

ID: {user_info['ID']}
–ò–º—è: {user_info['–ò–º—è']}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_info['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']}
–†–µ–ø—É—Ç–∞—Ü–∏—è: {user_info['–†–µ–ø—É—Ç–∞—Ü–∏—è']}
–†–∞–Ω–≥: {user_info['–†–∞–Ω–≥']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']}
–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏: {user_info['–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏']}
–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {user_info['–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è']}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_info['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'] or '–Ω–∏–∫–æ–≥–¥–∞'}
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_info['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è']}
–ü–æ–∫–∏–Ω—É–ª: {user_info['–ü–æ–∫–∏–Ω—É–ª'] or '–µ—â—ë –∑–¥–µ—Å—å'}
–Ø–∑—ã–∫: {user_info['–Ø–∑—ã–∫']}
–î–µ–π—Å—Ç–≤–∏—è: {user_info['–î–µ–π—Å—Ç–≤–∏—è']}
–û—á–∫–∏: {user_info['–û—á–∫–∏']}
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_info['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π']}
–†–æ–ª—å: {user_info['–†–æ–ª—å']}
                """
            else:
                info_text = USER_MESSAGES['info_not_found']

        await update.message.reply_text(info_text, parse_mode='HTML')

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É"""
        if not OPENWEATHER_API_KEY:
            await update.message.reply_text(WEATHER_MESSAGES['no_api_key'])
            return

        city = ' '.join(context.args) if context.args else 'Moscow'

        try:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data['cod'] == 200:
                weather_text = WEATHER_MESSAGES['weather_info'].format(
                    city=data['name'],
                    temp=data['main']['temp'],
                    feels_like=data['main']['feels_like'],
                    humidity=data['main']['humidity'],
                    description=data['weather'][0]['description']
                )
            else:
                weather_text = WEATHER_MESSAGES['city_not_found']

            await update.message.reply_text(weather_text, parse_mode='HTML')
        except Exception as e:
            await update.message.reply_text(WEATHER_MESSAGES['weather_error'].format(error=e))

    async def news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
        if not NEWS_API_KEY:
            await update.message.reply_text(NEWS_MESSAGES['no_api_key'])
            return

        try:
            url = f"https://newsapi.org/v2/top-headlines?country=ru&apiKey={NEWS_API_KEY}"
            response = requests.get(url)
            data = response.json()

            if data['status'] == 'ok' and data['articles']:
                news_text = NEWS_MESSAGES['news_title']
                for i, article in enumerate(data['articles'][:5], 1):
                    news_text += f"{i}. {article['title']}\n{article['url']}\n\n"
            else:
                news_text = NEWS_MESSAGES['news_not_found']

            await update.message.reply_text(news_text, parse_mode='HTML')
        except Exception as e:
            await update.message.reply_text(NEWS_MESSAGES['news_error'].format(error=e))

    async def translate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        if len(context.args) < 2:
            await update.message.reply_text(TRANSLATE_MESSAGES['usage'])
            return

        text = ' '.join(context.args[:-1])
        target_lang = context.args[-1]

        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é Google Translate API (–Ω—É–∂–µ–Ω API –∫–ª—é—á)
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Translate API –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å
            await update.message.reply_text(TRANSLATE_MESSAGES['result'].format(text=text, lang=target_lang))
        except Exception as e:
            await update.message.reply_text(TRANSLATE_MESSAGES['error'].format(error=e))

    async def play_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É"""
        keyboard = [
            [InlineKeyboardButton("–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps')],
            [InlineKeyboardButton("–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tic_tac_toe')],
            [InlineKeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='game_quiz')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='cmd_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        keyboard = [
            [InlineKeyboardButton("–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps')],
            [InlineKeyboardButton("–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tic_tac_toe')],
            [InlineKeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='game_quiz')],
            [InlineKeyboardButton("–ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='game_battleship')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='cmd_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(GAME_MESSAGES['select_game'], reply_markup=reply_markup)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == 'cmd_start' or query.data == 'cmd_restart':
            await self.show_start_menu(query)
        elif query.data == 'cmd_help':
            await self.show_help_menu(query)
        elif query.data == 'cmd_play_game':
            await self.show_games_menu(query)
        elif query.data == 'game_rps':
            await self.start_rps_game(query, context)
        elif query.data == 'game_tic_tac_toe':
            await self.start_tic_tac_toe_game(query, context)
        elif query.data == 'game_quiz':
            await self.start_quiz_game(query, context)
        elif query.data == 'game_battleship':
            await self.start_battleship_game(query, context)
        elif query.data.startswith('bs_'):
            await self.handle_battleship_shot(query, context)
        elif query.data.startswith('rps_'):
            await self.handle_rps(query, context)
        elif query.data.startswith('tictactoe_'):
            await self.handle_tic_tac_toe_move(query, context)
        elif query.data.startswith('quiz_'):
            await self.handle_quiz_answer(query, context)


    async def start_rps_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞'"""
        keyboard = [
            [InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å", callback_data='rps_rock')],
            [InlineKeyboardButton("üìÑ –ë—É–º–∞–≥–∞", callback_data='rps_paper')],
            [InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data='rps_scissors')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['rps_game'], reply_markup=reply_markup)

    async def start_tic_tac_toe_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'"""
        board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]
        context.user_data['tictactoe_board'] = board
        context.user_data['tictactoe_turn'] = 'user'

        keyboard = self.create_tic_tac_toe_keyboard(board)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_game'], reply_markup=reply_markup)

    async def handle_tic_tac_toe_move(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
        move_data = query.data.split('_')[1]
        if move_data == 'restart':
            await self.start_tic_tac_toe_game(query, context)
            return

        if len(move_data) != 2:
            await query.answer(GAME_MESSAGES['invalid_move'])
            return

        row, col = map(int, move_data)

        board = context.user_data.get('tictactoe_board')
        turn = context.user_data.get('tictactoe_turn')

        if not board or not (0 <= row < 3 and 0 <= col < 3) or board[row][col] != ' ' or turn != 'user':
            await query.answer(GAME_MESSAGES['invalid_move'])
            return

        # –•–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        board[row][col] = 'X'

        if self.check_winner(board, 'X'):
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_win'])
            db.update_score(query.from_user.id, SCORE_VALUES['tic_tac_toe_win'])
            db.update_reputation(query.from_user.id, SCORE_VALUES['reputation_per_message'])
            rank_update = db.update_rank(query.from_user.id, query.message.chat.id, query.from_user.first_name)
            if rank_update and rank_update.get("promoted"):
                await query.message.chat.send_message(
                    RANK_MESSAGES['promotion_message'].format(
                        name=rank_update['name'],
                        new_rank=rank_update['new_rank']
                    )
                )
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = self.create_tic_tac_toe_keyboard(board, game_over=True)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_win'], reply_markup=reply_markup)
            context.user_data.pop('tictactoe_board', None)
            context.user_data.pop('tictactoe_turn', None)
            return

        if self.is_board_full(board):
            keyboard = self.create_tic_tac_toe_keyboard(board, game_over=True)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_draw'], reply_markup=reply_markup)
            return

        # –•–æ–¥ –±–æ—Ç–∞
        bot_row, bot_col = self.get_bot_move(board)
        board[bot_row][bot_col] = 'O'

        if self.check_winner(board, 'O'):
            keyboard = self.create_tic_tac_toe_keyboard(board, game_over=True)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_lose'], reply_markup=reply_markup)
            return
            return

        if self.is_board_full(board):
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_draw'], reply_markup=reply_markup)
            return

        keyboard = self.create_tic_tac_toe_keyboard(board)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_game'], reply_markup=reply_markup)

    def create_tic_tac_toe_keyboard(self, board, game_over=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä—ã"""
        keyboard = []
        for i in range(3):
            row = []
            for j in range(3):
                symbol = board[i][j]
                if symbol == 'X':
                    text = '‚ùå'
                elif symbol == 'O':
                    text = '‚≠ï'
                else:
                    text = ' '
                if game_over:
                    # –ü—É—Å—Ç–∞—è callback_data –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
                    row.append(InlineKeyboardButton(text, callback_data='game_over'))
                else:
                    row.append(InlineKeyboardButton(text, callback_data=f'tictactoe_{i}{j}'))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='tictactoe_restart'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')
        ])
        return keyboard

    def check_winner(self, board, player):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        for row in board:
            if all(cell == player for cell in row):
                return True
        for col in range(3):
            if all(row[col] == player for row in board):
                return True
        if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
            return True
        return False

    def is_board_full(self, board):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –¥–æ—Å–∫–∞"""
        return all(cell != ' ' for row in board for cell in row)

    def get_bot_move(self, board):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–æ–¥–∞ –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    if self.check_winner(board, 'O'):
                        board[i][j] = ' '
                        return i, j
                    board[i][j] = ' '

        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    if self.check_winner(board, 'X'):
                        board[i][j] = ' '
                        return i, j
                    board[i][j] = ' '

        # –°–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
        import random
        while True:
            i, j = random.randint(0, 2), random.randint(0, 2)
            if board[i][j] == ' ':
                return i, j

    async def handle_rps(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ –ö–ù–ë"""
        user_choice = query.data.split('_')[1]
        bot_choice = random.choice(['rock', 'paper', 'scissors'])

        choices = {'rock': 'ü™® –ö–∞–º–µ–Ω—å', 'paper': 'üìÑ –ë—É–º–∞–≥–∞', 'scissors': '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã'}

        result = self.determine_rps_winner(user_choice, bot_choice)

        if result == 'win':
            message = GAME_MESSAGES['rps_win'].format(
                user_choice=choices[user_choice],
                bot_choice=choices[bot_choice]
            )
            db.update_score(query.from_user.id, SCORE_VALUES['game_win'])
            db.update_reputation(query.from_user.id, SCORE_VALUES['reputation_per_message'])
        elif result == 'lose':
            message = GAME_MESSAGES['rps_lose'].format(
                user_choice=choices[user_choice],
                bot_choice=choices[bot_choice]
            )
        else:
            message = GAME_MESSAGES['rps_draw'].format(
                user_choice=choices[user_choice],
                bot_choice=choices[bot_choice]
            )

        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_rps')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    def determine_rps_winner(self, user, bot):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –ö–ù–ë"""
        if user == bot:
            return 'draw'
        elif (user == 'rock' and bot == 'scissors') or \
             (user == 'paper' and bot == 'rock') or \
             (user == 'scissors' and bot == 'paper'):
            return 'win'
        else:
            return 'lose'

    async def start_quiz_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        questions = [
            {"question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "answers": ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω"], "correct": 0},
            {"question": "2 + 2 = ?", "answers": ["3", "4", "5"], "correct": 1},
            {"question": "–¶–≤–µ—Ç –Ω–µ–±–∞?", "answers": ["–ó–µ–ª–µ–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π"], "correct": 1},
            {"question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "answers": ["8", "9", "10"], "correct": 0},
            {"question": "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º?", "answers": ["JavaScript", "Python", "Java"], "correct": 1}
        ]

        question = random.choice(questions)
        context.user_data['quiz_correct'] = question['correct']
        context.user_data['quiz_question'] = question

        keyboard = []
        for i, answer in enumerate(question['answers']):
            keyboard.append([InlineKeyboardButton(answer, callback_data=f'quiz_{i}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(GAME_MESSAGES['quiz_game'].format(question=question['question']), reply_markup=reply_markup)

    async def handle_quiz_answer(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        answer_index = int(query.data.split('_')[1])
        correct_index = context.user_data.get('quiz_correct')

        if correct_index is None:
            await query.edit_message_text(GAME_MESSAGES['quiz_not_found'])
            return

        question = context.user_data.get('quiz_question', {})

        if answer_index == correct_index:
            keyboard = [
                [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['quiz_correct'].format(
                question=question.get('question', ''),
                answer=question.get('answers', [])[correct_index]
            ), reply_markup=reply_markup)
            db.update_score(query.from_user.id, SCORE_VALUES['game_win'])
        else:
            keyboard = [
                [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            correct_answer = question.get('answers', [])[correct_index] if correct_index < len(question.get('answers', [])) else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            await query.edit_message_text(GAME_MESSAGES['quiz_wrong'].format(
                question=question.get('question', ''),
                correct_answer=correct_answer
            ), reply_markup=reply_markup)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        context.user_data.pop('quiz_correct', None)
        context.user_data.pop('quiz_question', None)

    async def start_battleship_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ú–æ—Ä—Å–∫–æ–π –±–æ–π'"""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ 5x5 –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ 10x10)
        board = [['~' for _ in range(5)] for _ in range(5)]
        bot_ships = self.place_ships()  # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª–∏ –±–æ—Ç–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        context.user_data['battleship_board'] = board
        context.user_data['battleship_bot_ships'] = bot_ships
        context.user_data['battleship_shots'] = 0
        context.user_data['battleship_hits'] = 0

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã
        keyboard = self.create_battleship_keyboard(board)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['battleship_start'], reply_markup=reply_markup, parse_mode='HTML')

    def create_battleship_keyboard(self, board):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ú–æ—Ä—Å–∫–æ–≥–æ –±–æ—è"""
        keyboard = []

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (0-4)
        header_row = [InlineKeyboardButton(" ", callback_data='bs_header')]
        for j in range(5):
            header_row.append(InlineKeyboardButton(str(j), callback_data='bs_header'))
        keyboard.append(header_row)

        # –°—Ç—Ä–æ–∫–∏ —Å –±—É–∫–≤–∞–º–∏ –∏ –∫–ª–µ—Ç–∫–∞–º–∏
        letters = ['A', 'B', 'C', 'D', 'E']
        for i in range(5):
            row = [InlineKeyboardButton(letters[i], callback_data='bs_header')]
            for j in range(5):
                cell = board[i][j]
                callback_data = f'bs_{i}{j}'  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ row,col
                row.append(InlineKeyboardButton(cell, callback_data=callback_data))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')])

        return keyboard

    def place_ships(self):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - 3 –∫–æ—Ä–∞–±–ª—è)"""
        ships = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        import random

        # –†–∞–∑–º–µ—â–∞–µ–º 3 –∫–æ—Ä–∞–±–ª—è: 3-–∫–ª–µ—Ç–æ—á–Ω—ã–π, 2-–∫–ª–µ—Ç–æ—á–Ω—ã–π, 1-–∫–ª–µ—Ç–æ—á–Ω—ã–π
        ship_sizes = [3, 2, 1]

        for size in ship_sizes:
            placed = False
            while not placed:
                # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 0 - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, 1 - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                direction = random.randint(0, 1)
                if direction == 0:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
                    row = random.randint(0, 4)
                    col = random.randint(0, 4 - size)
                    ship_coords = [(row, col + i) for i in range(size)]
                else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                    row = random.randint(0, 4 - size)
                    col = random.randint(0, 4)
                    ship_coords = [(row + i, col) for i in range(size)]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∞–±–ª—å –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –¥—Ä—É–≥–∏–µ
                if not any(coord in [c for ship in ships for c in ship] for coord in ship_coords):
                    ships.append(ship_coords)
                    placed = True

        return ships

    async def handle_battleship_shot(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞ –≤ –ú–æ—Ä—Å–∫–æ–º –±–æ–µ"""
        if query.data == 'bs_header':
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º

        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coords = query.data[3:]  # bs_01 -> 01
        if len(coords) != 2:
            await query.answer(GAME_MESSAGES['battleship_invalid_coord'])
            return

        try:
            row, col = int(coords[0]), int(coords[1])
        except ValueError:
            await query.answer(GAME_MESSAGES['battleship_invalid_coord'])
            return

        board = context.user_data.get('battleship_board')
        bot_ships = context.user_data.get('battleship_bot_ships')

        if not board or not (0 <= row < 5 and 0 <= col < 5):
            await query.answer(GAME_MESSAGES['battleship_invalid_coord'])
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—Ä–µ–ª—è–ª–∏ –ª–∏ —É–∂–µ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É
        if board[row][col] != '~':
            await query.answer(GAME_MESSAGES['battleship_already_shot'])
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
        context.user_data['battleship_shots'] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        hit = False
        ship_hit = None
        for ship in bot_ships:
            if (row, col) in ship:
                hit = True
                ship_hit = ship
                break

        if hit:
            board[row][col] = 'üí•'  # –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            context.user_data['battleship_hits'] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ç–æ–ø–ª–µ–Ω –ª–∏ –∫–æ—Ä–∞–±–ª—å
            ship_sunk = all(board[r][c] == 'üí•' for r, c in ship_hit)
            if ship_sunk:
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
                for r, c in ship_hit:
                    board[r][c] = 'üî•'
                await query.answer(GAME_MESSAGES['battleship_sunk'])
            else:
                await query.answer(GAME_MESSAGES['battleship_hit'])
        else:
            board[row][col] = 'üíß'  # –ü—Ä–æ–º–∞—Ö
            await query.answer(GAME_MESSAGES['battleship_miss'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É (–≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã)
        total_ship_cells = sum(len(ship) for ship in bot_ships)
        if context.user_data['battleship_hits'] >= total_ship_cells:
            # –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞
            db.update_score(query.from_user.id, SCORE_VALUES['tic_tac_toe_win'])  # +15 –æ—á–∫–æ–≤
            db.update_reputation(query.from_user.id, SCORE_VALUES['reputation_per_message'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
            rank_update = db.update_rank(query.from_user.id, query.message.chat.id, query.from_user.first_name)
            if rank_update and rank_update.get("promoted"):
                await query.message.chat.send_message(
                    RANK_MESSAGES['promotion_message'].format(
                        name=rank_update['name'],
                        new_rank=rank_update['new_rank']
                    )
                )

            keyboard = self.create_battleship_keyboard(board)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['battleship_win'], reply_markup=reply_markup)
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
            context.user_data.pop('battleship_board', None)
            context.user_data.pop('battleship_bot_ships', None)
            context.user_data.pop('battleship_shots', None)
            context.user_data.pop('battleship_hits', None)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.create_battleship_keyboard(board)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['battleship_start'], reply_markup=reply_markup, parse_mode='HTML')

    async def ban_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['ban_usage'])
            return

        user_id = context.args[0]
        reason = ' '.join(context.args[1:])

        try:
            await update.effective_chat.ban_member(int(user_id))
            await update.message.reply_text(MODERATION_MESSAGES['user_banned'].format(user_id=user_id, reason=reason))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['ban_error'].format(error=e))

    async def unban_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['unban_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.unban_member(int(user_id))
            await update.message.reply_text(MODERATION_MESSAGES['user_unbanned'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['unban_error'].format(error=e))

    async def mute_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['mute_usage'])
            return

        user_id = context.args[0]
        try:
            mute_time = int(context.args[1])
        except ValueError:
            await update.message.reply_text(MODERATION_MESSAGES['mute_invalid_time'])
            return

        from datetime import datetime, timedelta
        until_date = datetime.now() + timedelta(seconds=mute_time)

        try:
            await update.effective_chat.restrict_member(
                int(user_id),
                until_date=until_date,
                can_send_messages=False
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_muted'].format(user_id=user_id, time=mute_time))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['mute_error'].format(error=e))

    async def unmute_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–Ω—è—Ç—å –∑–∞–≥–ª—É—à–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['unmute_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.restrict_member(
                int(user_id),
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_unmuted'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['unmute_error'].format(error=e))

    async def kick_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['kick_usage'])
            return

        user_id = context.args[0]
        reason = ' '.join(context.args[1:])

        try:
            await update.effective_chat.ban_member(int(user_id))
            await update.effective_chat.unban_member(int(user_id))  # –†–∞–∑–±–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –±–∞–Ω–∞ = –∫–∏–∫
            await update.message.reply_text(MODERATION_MESSAGES['user_kicked'].format(user_id=user_id, reason=reason))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['kick_error'].format(error=e))

    async def promote_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['promote_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.promote_member(
                int(user_id),
                can_delete_messages=True,
                can_restrict_members=True,
                can_invite_users=True
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_promoted'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['promote_error'].format(error=e))

    async def demote_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–Ω–∏–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['demote_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.promote_member(
                int(user_id),
                can_delete_messages=False,
                can_restrict_members=False,
                can_invite_users=False,
                can_pin_messages=False
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_demoted'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['demote_error'].format(error=e))

    async def warn_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['warn_usage'])
            return

        user_id = context.args[0]
        reason = ' '.join(context.args[1:])

        db.add_warning(user_id, reason, update.effective_user.id)
        await update.message.reply_text(MODERATION_MESSAGES['warning_issued'].format(user_id=user_id, reason=reason))

    async def ranks_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–Ω–≥–æ–≤"""
        await update.message.reply_text(RANK_MESSAGES['rank_info'], parse_mode='HTML')

    async def import_csv(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(IMPORT_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(IMPORT_MESSAGES['usage'])
            return

        csv_file = context.args[0] if context.args else 'chat_-1001519866478_users_full_20251014.csv'

        # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ telegram_bot
        if not os.path.isabs(csv_file):
            csv_file = os.path.join('telegram_bot', csv_file)

        await update.message.reply_text(IMPORT_MESSAGES['start_import'].format(file=csv_file))

        try:
            success = db.import_users_from_csv(csv_file)

            if success:
                await update.message.reply_text(IMPORT_MESSAGES['success'])
            else:
                await update.message.reply_text(IMPORT_MESSAGES['error'])

        except Exception as e:
            await update.message.reply_text(IMPORT_MESSAGES['file_error'].format(error=str(e)))

    async def schedule_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(SCHEDULER_MESSAGES['usage_schedule'])
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞
        time_str = context.args[0]
        text = ' '.join(context.args[1:])

        try:
            schedule_time = self.parse_schedule_time(time_str)
        except ValueError as e:
            await update.message.reply_text(SCHEDULER_MESSAGES['invalid_format'].format(error=str(e)))
            return

        if schedule_time <= datetime.now():
            await update.message.reply_text(SCHEDULER_MESSAGES['time_in_past'])
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        post_id = db.add_scheduled_post(
            chat_id=update.effective_chat.id,
            text=text,
            schedule_time=schedule_time.strftime('%Y-%m-%d %H:%M:%S'),
            created_by=user.id
        )

        if post_id:
            await update.message.reply_text(
                SCHEDULER_MESSAGES['post_scheduled'].format(
                    time=schedule_time.strftime('%Y-%m-%d %H:%M:%S'),
                    text=text[:50] + ('...' if len(text) > 50 else ''),
                    post_id=post_id
                )
            )
        else:
            await update.message.reply_text(SCHEDULER_MESSAGES['save_error'])

    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission_view'])
            return

        posts = db.get_scheduled_posts(chat_id=update.effective_chat.id)

        if not posts:
            await update.message.reply_text(SCHEDULER_MESSAGES['no_posts'])
            return

        response = "üìã <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
        for post in posts:
            post_id, chat_id, text, image_path, schedule_time, created_by, status, published_at, created_at, creator_name = post

            response += f"üÜî <b>{post_id}</b>\n"
            response += f"üìÖ {schedule_time}\n"
            response += f"üë§ –°–æ–∑–¥–∞–ª: {creator_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            response += f"üìù {text[:100]}{'...' if len(text) > 100 else ''}\n"
            if image_path:
                response += f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}\n"
            response += "\n" + "‚îÄ" * 30 + "\n"

        await update.message.reply_text(response, parse_mode='HTML')

    async def delete_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission_delete'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(SCHEDULER_MESSAGES['usage_delete'])
            return

        try:
            post_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text(SCHEDULER_MESSAGES['invalid_id'])
            return

        success = db.delete_scheduled_post(post_id, user.id)

        if success:
            await update.message.reply_text(SCHEDULER_MESSAGES['post_deleted'].format(post_id=post_id))
        else:
            await update.message.reply_text(SCHEDULER_MESSAGES['post_not_found'].format(post_id=post_id))

    async def publish_now(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission_publish'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(SCHEDULER_MESSAGES['usage_publish'])
            return

        try:
            post_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text(SCHEDULER_MESSAGES['invalid_id'])
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        posts = db.get_scheduled_posts()
        post = None
        for p in posts:
            if p[0] == post_id:  # p[0] is post_id
                post = p
                break

        if not post:
            await update.message.reply_text(SCHEDULER_MESSAGES['post_not_found'].format(post_id=post_id))
            return

        post_id, chat_id, text, image_path, schedule_time, created_by, status, published_at, created_at, creator_name = post

        try:
            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await update.effective_chat.send_photo(photo, caption=text)
            else:
                await update.effective_chat.send_message(text)

            # –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
            db.mark_post_published(post_id)

            await update.message.reply_text(SCHEDULER_MESSAGES['post_published'].format(post_id=post_id))

        except Exception as e:
            await update.message.reply_text(SCHEDULER_MESSAGES['publish_error'].format(error=str(e)))

    def parse_schedule_time(self, time_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        from datetime import datetime, timedelta
        import re

        current_time = datetime.now()

        # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è: 2024-01-15 14:30:00 –∏–ª–∏ 2024-01-15 14:30
        absolute_pattern = r'^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2})(?::(\d{2}))?$'
        match = re.match(absolute_pattern, time_str)

        if match:
            year, month, day, hour, minute = map(int, match.groups()[:5])
            second = int(match.group(6)) if match.group(6) else 0
            return datetime(year, month, day, hour, minute, second)

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: +30m, +2h, +1d
        relative_pattern = r'^(\+|\-)(\d+)([mhd])$'
        match = re.match(relative_pattern, time_str)

        if match:
            sign, amount, unit = match.groups()
            amount = int(amount)

            if unit == 'm':  # –º–∏–Ω—É—Ç—ã
                delta = timedelta(minutes=amount)
            elif unit == 'h':  # —á–∞—Å—ã
                delta = timedelta(hours=amount)
            elif unit == 'd':  # –¥–Ω–∏
                delta = timedelta(days=amount)

            if sign == '-':
                delta = -delta

            return current_time + delta

        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è (2024-01-15 14:30) –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ (+30m, +2h, +1d)")

    async def is_admin(self, chat, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            member = await chat.get_member(user_id)
            return member.status in ['administrator', 'creator']
        except:
            return False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text.lower()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user.id, user.username, user.first_name, user.last_name)

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        db.update_score(user.id)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        db.update_reputation(user.id, 1)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
        rank_update = db.update_rank(user.id, update.effective_chat.id, user.first_name)
        if rank_update and rank_update.get("promoted"):
            await update.effective_chat.send_message(
                RANK_MESSAGES['promotion_message'].format(
                    name=rank_update['name'],
                    new_rank=rank_update['new_rank']
                )
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞ "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
        if "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã" in message_text or "—Ä–µ–∫–≤–∏–∑–∏—Ç" in message_text:
            await update.message.reply_text(BANK_DETAILS_TEXT, reply_to_message_id=update.message.message_id)
            return

        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        response_found = False
        for key, response in PREDEFINED_RESPONSES.items():
            if key in message_text:
                await update.message.reply_text(response)
                response_found = True
                break

        if not response_found:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ help
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='cmd_help')],
                [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã", callback_data='cmd_play_game')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                USER_MESSAGES['unknown_message'],
                reply_markup=reply_markup
            )
            return

        # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –æ—Ç 1 –¥–æ 5 –≤–º–µ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
            bonus_points = random.randint(SCORE_VALUES['bonus_min'], SCORE_VALUES['bonus_max'])
            db.update_score(user.id, bonus_points)
            await update.message.reply_text(USER_MESSAGES['bonus_points'].format(points=bonus_points))

    async def handle_new_chat_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        for member in update.chat_member.new_chat_members:
            db.add_user(member.id, member.username, member.first_name, member.last_name)

            welcome_text = USER_MESSAGES['welcome_new_user'].format(name=member.first_name)

            await update.effective_chat.send_message(welcome_text)

    async def handle_inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.inline_query.query

        results = []

        try:
            if query.startswith('weather'):
                city = query.split(' ', 1)[1] if len(query.split(' ', 1)) > 1 else 'Moscow'

                if OPENWEATHER_API_KEY:
                    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
                    response = requests.get(url)
                    data = response.json()

                    if data['cod'] == 200:
                        weather_text = f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {data['name']}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['weather'][0]['description']}"
                        results.append(InlineQueryResultArticle(
                            id='1',
                            title=f"–ü–æ–≥–æ–¥–∞ –≤ {city}",
                            input_message_content=InputTextMessageContent(weather_text)
                        ))
                    else:
                        results.append(InlineQueryResultArticle(
                            id='1',
                            title="–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                            input_message_content=InputTextMessageContent("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        ))

            elif query.startswith('translate'):
                # –ë–∞–∑–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                text_parts = query.split(' ', 2)
                if len(text_parts) >= 3:
                    text = text_parts[1]
                    lang = text_parts[2]
                    result_text = f"–ü–µ—Ä–µ–≤–æ–¥ '{text}' –Ω–∞ {lang}: [–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥]"
                    results.append(InlineQueryResultArticle(
                        id='1',
                        title=f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {lang}",
                        input_message_content=InputTextMessageContent(result_text)
                    ))

            await update.inline_query.answer(results)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–ª–∞–π–Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    async def show_start_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='cmd_help')],
            [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã", callback_data='cmd_play_game')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}! üëã

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —á–∞—Ç–µ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –í–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–≥–æ–¥—É –∏ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ò–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """

        await query.edit_message_text(welcome_text, reply_markup=reply_markup)

    async def show_help_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(messages.HELP_TEXT, parse_mode='HTML', reply_markup=reply_markup)

    async def show_games_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä"""
        keyboard = [
            [InlineKeyboardButton("–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps')],
            [InlineKeyboardButton("–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tic_tac_toe')],
            [InlineKeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='game_quiz')],
            [InlineKeyboardButton("–ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='game_battleship')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='cmd_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['select_game'], reply_markup=reply_markup)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("Bot started!")
        self.application.run_polling()

if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()