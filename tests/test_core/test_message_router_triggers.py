"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MessageTypeRouter —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏.
"""

import pytest
from unittest.mock import Mock, AsyncMock, patch
from telegram import Update, Message, User, CallbackQuery

from core.message_router import MessageTypeRouter, create_message_router
from services.trigger_service import TriggerService


class TestMessageRouterTriggers:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏"""

    @pytest.fixture
    def mock_trigger_service(self):
        """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        service = Mock(spec=TriggerService)
        service.check_triggers = AsyncMock(return_value=[])
        service.execute_trigger_actions = AsyncMock(return_value=[])
        return service

    @pytest.fixture
    def message_router_with_triggers(self, mock_trigger_service):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        return create_message_router(mock_trigger_service)

    @pytest.fixture
    def mock_update_group_text(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
        update = Mock(spec=Update)
        message = Mock(spec=Message)
        user = Mock(spec=User)
        chat = Mock()

        user.id = 123456
        message.text = "hello world"
        message.voice = None
        message.photo = None
        message.message_id = 789
        message.chat_id = 987654
        chat.type = "group"

        update.message = message
        update.effective_user = user
        update.effective_chat = chat

        return update

    @pytest.fixture
    def mock_update_private_text(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–µ"""
        update = Mock(spec=Update)
        message = Mock(spec=Message)
        user = Mock(spec=User)
        chat = Mock()

        user.id = 123456
        message.text = "private message"
        message.voice = None
        message.photo = None
        chat.type = "private"

        update.message = message
        update.effective_user = user
        update.effective_chat = chat

        return update

    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context = Mock()
        context.bot = Mock()
        context.bot.send_message = AsyncMock()
        context.bot.send_sticker = AsyncMock()
        context.bot.send_animation = AsyncMock()
        context.bot.set_message_reaction = AsyncMock()
        return context

    @pytest.mark.asyncio
    async def test_route_text_message_no_triggers_group(self, message_router_with_triggers,
                                                       mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        result = await message_router_with_triggers.route_text_message(
            mock_update_group_text, mock_context
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
        message_router_with_triggers.trigger_service.check_triggers.assert_called_once_with(
            "hello world", "group"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        message_router_with_triggers.trigger_service.execute_trigger_actions.assert_not_called()

        assert result == False  # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏

    @pytest.mark.asyncio
    async def test_route_text_message_no_triggers_private(self, message_router_with_triggers,
                                                         mock_update_private_text, mock_context):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–∏–≤–∞—Ç–µ –±–µ–∑ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        result = await message_router_with_triggers.route_text_message(
            mock_update_private_text, mock_context
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ù–ï –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        message_router_with_triggers.trigger_service.check_triggers.assert_not_called()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        message_router_with_triggers.trigger_service.execute_trigger_actions.assert_not_called()

        assert result == False

    @pytest.mark.asyncio
    async def test_route_text_message_with_trigger_match_group(self, message_router_with_triggers,
                                                              mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ —Å —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        matched_triggers = [
            {
                'id': 1,
                'name': 'hello_trigger',
                'response_text': 'Hi there!',
                'trigger_count': 5
            }
        ]

        message_router_with_triggers.trigger_service.check_triggers.return_value = matched_triggers
        message_router_with_triggers.trigger_service.execute_trigger_actions.return_value = [
            {
                'type': 'text',
                'content': 'Hi there!',
                'trigger_id': 1,
                'trigger_name': 'hello_trigger'
            }
        ]

        result = await message_router_with_triggers.route_text_message(
            mock_update_group_text, mock_context
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        message_router_with_triggers.trigger_service.check_triggers.assert_called_once_with(
            "hello world", "group"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        message_router_with_triggers.trigger_service.execute_trigger_actions.assert_called_once_with(
            matched_triggers, 987654, "hello world", 789
        )

        assert result == False  # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_text(self, message_router_with_triggers,
                                                 mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∏–≥–≥–µ—Ä–∞ - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        actions = [
            {
                'type': 'text',
                'content': 'Hello from trigger!',
                'trigger_id': 1,
                'trigger_name': 'test_trigger'
            }
        ]

        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_context.bot.send_message.assert_called_once_with(
            chat_id=987654,
            text='Hello from trigger!',
            reply_to_message_id=789
        )

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_sticker(self, message_router_with_triggers,
                                                    mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∏–≥–≥–µ—Ä–∞ - —Å—Ç–∏–∫–µ—Ä"""
        actions = [
            {
                'type': 'sticker',
                'content': 'sticker_file_id',
                'trigger_id': 1,
                'trigger_name': 'sticker_trigger'
            }
        ]

        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–∫–µ—Ä –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_context.bot.send_sticker.assert_called_once_with(
            chat_id=987654,
            sticker='sticker_file_id',
            reply_to_message_id=789
        )

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_gif(self, message_router_with_triggers,
                                                mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∏–≥–≥–µ—Ä–∞ - GIF"""
        actions = [
            {
                'type': 'gif',
                'content': 'gif_file_id',
                'trigger_id': 1,
                'trigger_name': 'gif_trigger'
            }
        ]

        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GIF –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_context.bot.send_animation.assert_called_once_with(
            chat_id=987654,
            animation='gif_file_id',
            reply_to_message_id=789
        )

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_reaction(self, message_router_with_triggers,
                                                     mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∏–≥–≥–µ—Ä–∞ - —Ä–µ–∞–∫—Ü–∏—è"""
        actions = [
            {
                'type': 'reaction',
                'reaction_type': 'emoji',
                'content': 'üëç',
                'message_id': 789,
                'trigger_id': 1,
                'trigger_name': 'reaction_trigger'
            }
        ]

        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        mock_context.bot.set_message_reaction.assert_called_once_with(
            chat_id=987654,
            message_id=789,
            reaction='üëç'
        )

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_multiple_actions(self, message_router_with_triggers,
                                                            mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        actions = [
            {
                'type': 'text',
                'content': 'Hello!',
                'trigger_id': 1,
                'trigger_name': 'multi_trigger'
            },
            {
                'type': 'sticker',
                'content': 'sticker123',
                'trigger_id': 1,
                'trigger_name': 'multi_trigger'
            },
            {
                'type': 'reaction',
                'reaction_type': 'emoji',
                'content': '‚ù§Ô∏è',
                'message_id': 789,
                'trigger_id': 1,
                'trigger_name': 'multi_trigger'
            }
        ]

        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        assert mock_context.bot.send_message.call_count == 1
        assert mock_context.bot.send_sticker.call_count == 1
        assert mock_context.bot.set_message_reaction.call_count == 1

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_reaction_priority(self, message_router_with_triggers,
                                                              mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"""
        actions = [
            {
                'type': 'reaction',
                'reaction_type': 'emoji',
                'content': 'üëç',
                'message_id': 789,
                'trigger_id': 1,
                'trigger_name': 'first_reaction'
            },
            {
                'type': 'reaction',
                'reaction_type': 'emoji',
                'content': '‚ù§Ô∏è',
                'message_id': 789,
                'trigger_id': 2,
                'trigger_name': 'second_reaction'
            },
            {
                'type': 'text',
                'content': 'Text response',
                'trigger_id': 1,
                'trigger_name': 'text_trigger'
            }
        ]

        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        mock_context.bot.set_message_reaction.assert_called_once_with(
            chat_id=987654,
            message_id=789,
            reaction='üëç'
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_context.bot.send_message.assert_called_once_with(
            chat_id=987654,
            text='Text response',
            reply_to_message_id=789
        )

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_empty_actions(self, message_router_with_triggers,
                                                          mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        actions = []

        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_context.bot.send_message.assert_not_called()
        mock_context.bot.send_sticker.assert_not_called()
        mock_context.bot.send_animation.assert_not_called()
        mock_context.bot.set_message_reaction.assert_not_called()

    @pytest.mark.asyncio
    async def test_trigger_actions_execution_unknown_action_type(self, message_router_with_triggers,
                                                                mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–æ–º"""
        actions = [
            {
                'type': 'unknown',
                'content': 'some_content',
                'trigger_id': 1,
                'trigger_name': 'unknown_trigger'
            }
        ]

        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_context.bot.send_message.assert_not_called()
        mock_context.bot.send_sticker.assert_not_called()
        mock_context.bot.send_animation.assert_not_called()
        mock_context.bot.set_message_reaction.assert_not_called()

    @pytest.mark.asyncio
    async def test_route_text_message_trigger_service_error(self, message_router_with_triggers,
                                                           mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        message_router_with_triggers.trigger_service.check_triggers.side_effect = Exception("Test error")

        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        result = await message_router_with_triggers.route_text_message(
            mock_update_group_text, mock_context
        )

        assert result == False

    @pytest.mark.asyncio
    async def test_execute_trigger_actions_error_handling(self, message_router_with_triggers,
                                                         mock_update_group_text, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        actions = [
            {
                'type': 'text',
                'content': 'Hello!',
                'trigger_id': 1,
                'trigger_name': 'error_trigger'
            }
        ]

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_context.bot.send_message.side_effect = Exception("Send error")

        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Ä—É–∂—É
        await message_router_with_triggers._execute_trigger_actions(actions, mock_update_group_text, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã–ª–∞
        mock_context.bot.send_message.assert_called_once()

    def test_set_trigger_service(self, message_router_with_triggers, mock_trigger_service):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        new_trigger_service = Mock(spec=TriggerService)
        message_router_with_triggers.set_trigger_service(new_trigger_service)

        assert message_router_with_triggers.trigger_service == new_trigger_service

    def test_create_message_router_with_trigger_service(self, mock_trigger_service):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        router = create_message_router(mock_trigger_service)

        assert isinstance(router, MessageTypeRouter)
        assert router.trigger_service == mock_trigger_service

    def test_create_message_router_without_trigger_service(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        router = create_message_router()

        assert isinstance(router, MessageTypeRouter)
        assert router.trigger_service is None