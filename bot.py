import logging
import random
import requests
import os
import asyncio
import tempfile
import subprocess
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, InlineQueryHandler, ChatMemberHandler
from database_sqlite import Database
from config_local import BOT_TOKEN, OPENWEATHER_API_KEY, NEWS_API_KEY, ADMIN_IDS, DEVELOPER_CHAT_ID, ENABLE_DEVELOPER_NOTIFICATIONS, OPENAI_API_KEY, ENABLE_AI_ERROR_PROCESSING, AI_MODEL
from messages import *

try:
    import speech_recognition as sr
    SPEECH_RECOGNITION_AVAILABLE = True
    print("[+] Speech recognition library loaded successfully")
except ImportError:
    SPEECH_RECOGNITION_AVAILABLE = False
    print("[-] Speech recognition library not available")
    print("  To install: pip install SpeechRecognition")
    print("  Alternative: pip install speech_recognition")

try:
    from pydub import AudioSegment
    PYDUB_AVAILABLE = True
    print("[+] Pydub library loaded successfully")
except ImportError:
    PYDUB_AVAILABLE = False
    print("[-] Pydub library not available")
    print("  To install: pip install pydub")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ messages.py

class TelegramBot:
    def __init__(self):
        # –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.welcome_messages = {}  # {chat_id: {'message_id': int, 'timestamp': datetime}}
        self.cleanup_task = None

        self.application = ApplicationBuilder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("rank", self.rank))
        self.application.add_handler(CommandHandler("ranks_info", self.ranks_info))
        self.application.add_handler(CommandHandler("leaderboard", self.leaderboard))
        self.application.add_handler(CommandHandler("info", self.user_info))
        self.application.add_handler(CommandHandler("weather", self.weather))
        self.application.add_handler(CommandHandler("news", self.news))
        self.application.add_handler(CommandHandler("translate", self.translate))
        self.application.add_handler(CommandHandler("play_game", self.play_game))
        self.application.add_handler(CommandHandler("donate", self.donate))
        self.application.add_handler(CommandHandler("ban", self.ban_user))
        self.application.add_handler(CommandHandler("mute", self.mute_user))
        self.application.add_handler(CommandHandler("warn", self.warn_user))
        self.application.add_handler(CommandHandler("kick", self.kick_user))
        self.application.add_handler(CommandHandler("unmute", self.unmute_user))
        self.application.add_handler(CommandHandler("unban", self.unban_user))
        self.application.add_handler(CommandHandler("promote", self.promote_user))
        self.application.add_handler(CommandHandler("demote", self.demote_user))
        self.application.add_handler(CommandHandler("import_csv", self.import_csv))
        self.application.add_handler(CommandHandler("schedule_post", self.schedule_post))
        self.application.add_handler(CommandHandler("list_posts", self.list_posts))
        self.application.add_handler(CommandHandler("delete_post", self.delete_post))
        self.application.add_handler(CommandHandler("publish_now", self.publish_now))
        self.application.add_handler(CommandHandler("report_error", self.report_error))
        self.application.add_handler(CommandHandler("admin_errors", self.admin_errors))
        self.application.add_handler(CommandHandler("analyze_error_ai", self.analyze_error_with_ai))
        self.application.add_handler(CommandHandler("process_all_errors_ai", self.process_all_new_errors_ai))
        self.application.add_handler(CommandHandler("add_error_to_todo", self.add_error_to_todo))
        self.application.add_handler(CommandHandler("add_all_analyzed_to_todo", self.add_all_analyzed_errors_to_todo))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        self.application.add_handler(MessageHandler(filters.AUDIO, self.handle_audio_message))
        self.application.add_handler(MessageHandler(filters.VIDEO, self.handle_video_message))
        self.application.add_handler(ChatMemberHandler(self.handle_new_chat_members, ChatMemberHandler.CHAT_MEMBER))

        # –ò–Ω–ª–∞–π–Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.application.add_handler(InlineQueryHandler(self.handle_inline_query))

        # Callback queries –¥–ª—è –∏–≥—Ä
        from telegram.ext import CallbackQueryHandler
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))

    def start_cleanup_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.cleanup_task is None or self.cleanup_task.done():
            self.cleanup_task = asyncio.create_task(self.cleanup_welcome_messages())

    async def cleanup_welcome_messages(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                await self.delete_expired_welcome_messages()
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def delete_expired_welcome_messages(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        current_time = datetime.now()
        expired_chats = []

        for chat_id, message_info in self.welcome_messages.items():
            message_time = message_info['timestamp']
            if current_time - message_time > timedelta(minutes=2):
                try:
                    await self.application.bot.delete_message(chat_id, message_info['message_id'])
                    expired_chats.append(chat_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                    expired_chats.append(chat_id)

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        for chat_id in expired_chats:
            self.welcome_messages.pop(chat_id, None)

    async def delete_welcome_message(self, chat_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        if chat_id in self.welcome_messages:
            try:
                message_info = self.welcome_messages[chat_id]
                await self.application.bot.delete_message(chat_id, message_info['message_id'])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            finally:
                self.welcome_messages.pop(chat_id, None)

    async def set_welcome_message(self, chat_id, message_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        self.welcome_messages[chat_id] = {
            'message_id': message_id,
            'timestamp': datetime.now()
        }

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        if self.cleanup_task is None or self.cleanup_task.done():
            self.start_cleanup_task()

        user = update.effective_user
        db.add_user(user.id, user.username, user.first_name, user.last_name)

        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='cmd_help')],
            [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã", callback_data='cmd_play_game')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = USER_MESSAGES['welcome'].format(name=user.first_name)

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(HELP_TEXT, parse_mode='HTML', reply_markup=reply_markup)

    async def rank(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        db.add_user(user.id, user.username, user.first_name, user.last_name)
        user_info = db.get_user_info(user.id)

        if user_info:
            rank_text = RANK_MESSAGES['rank_title'].format(
                score=user_info['–û—á–∫–∏'],
                warnings=user_info['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'],
                role=user_info['–†–æ–ª—å']
            )
        else:
            rank_text = RANK_MESSAGES['rank_not_found']

        await update.message.reply_text(rank_text, parse_mode='HTML')

    async def leaderboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        top_users = db.get_top_users(100)

        if top_users:
            leaderboard_text = RANK_MESSAGES['leaderboard_title']
            for i, (user_id, username, first_name, score) in enumerate(top_users, 1):
                name = username if username else first_name
                leaderboard_text += RANK_MESSAGES['leaderboard_entry'].format(
                    position=i, name=name, score=score
                )
        else:
            leaderboard_text = RANK_MESSAGES['leaderboard_empty']

        await update.message.reply_text(leaderboard_text, parse_mode='HTML')

    async def user_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = await self.is_admin(update.effective_chat, user.id)

        if len(context.args) > 0 and is_admin:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = context.args[0]
            try:
                target_user_id = int(target_user)
                user_info = db.get_user_info(target_user_id)
                achievements = db.get_user_achievements(target_user_id)
                total_donations = db.get_total_donations(target_user_id)
                if user_info:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–Ω–∞—á–∫–æ–≤
                    badge_str = ""
                    for achievement_type, _ in achievements:
                        if achievement_type in ACHIEVEMENT_BADGES:
                            badge_str += ACHIEVEMENT_BADGES[achievement_type] + " "

                    info_text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

ID: {user_info['ID']}
–ò–º—è: {user_info['–ò–º—è']}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_info['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']}
–†–µ–ø—É—Ç–∞—Ü–∏—è: {user_info['–†–µ–ø—É—Ç–∞—Ü–∏—è']}
–†–∞–Ω–≥: {user_info['–†–∞–Ω–≥']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']}
–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏: {user_info['–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏']}
–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {user_info['–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è']}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_info['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'] or '–Ω–∏–∫–æ–≥–¥–∞'}
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_info['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è']}
–ü–æ–∫–∏–Ω—É–ª: {user_info['–ü–æ–∫–∏–Ω—É–ª'] or '–µ—â—ë –∑–¥–µ—Å—å'}
–Ø–∑—ã–∫: {user_info['–Ø–∑—ã–∫']}
–î–µ–π—Å—Ç–≤–∏—è: {user_info['–î–µ–π—Å—Ç–≤–∏—è']}
–û—á–∫–∏: {user_info['–û—á–∫–∏']}
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_info['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π']}
–†–æ–ª—å: {user_info['–†–æ–ª—å']}
{f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {badge_str.strip()}" if badge_str else ""}
{f"üí∞ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: {total_donations} RUB" if total_donations > 0 else ""}
                    """
                else:
                    info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            except ValueError:
                info_text = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user}"
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            db.add_user(user.id, user.username, user.first_name, user.last_name)
            user_info = db.get_user_info(user.id)
            achievements = db.get_user_achievements(user.id)
            total_donations = db.get_total_donations(user.id)

            if user_info:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–Ω–∞—á–∫–æ–≤
                badge_str = ""
                achievement_list = []
                for achievement_type, unlocked_at in achievements:
                    if achievement_type in ACHIEVEMENT_BADGES:
                        badge_str += ACHIEVEMENT_BADGES[achievement_type] + " "
                        achievement_list.append(f"{ACHIEVEMENT_BADGES[achievement_type]} {achievement_type.replace('_', ' ').title()}")

                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ
                achievements_text = ""
                if achievement_list:
                    achievements_text = f"\nüìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n" + '\n'.join(achievement_list)

                info_text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>

ID: {user_info['ID']}
–ò–º—è: {user_info['–ò–º—è']}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_info['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']}
–†–µ–ø—É—Ç–∞—Ü–∏—è: {user_info['–†–µ–ø—É—Ç–∞—Ü–∏—è']}
–†–∞–Ω–≥: {user_info['–†–∞–Ω–≥']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']}
–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏: {user_info['–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏']}
–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {user_info['–î–Ω–µ–π —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è']}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_info['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'] or '–Ω–∏–∫–æ–≥–¥–∞'}
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_info['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è']}
–ü–æ–∫–∏–Ω—É–ª: {user_info['–ü–æ–∫–∏–Ω—É–ª'] or '–µ—â—ë –∑–¥–µ—Å—å'}
–Ø–∑—ã–∫: {user_info['–Ø–∑—ã–∫']}
–î–µ–π—Å—Ç–≤–∏—è: {user_info['–î–µ–π—Å—Ç–≤–∏—è']}
–û—á–∫–∏: {user_info['–û—á–∫–∏']}
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_info['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π']}
–†–æ–ª—å: {user_info['–†–æ–ª—å']}
{f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {badge_str.strip()}" if badge_str else ""}
{f"üí∞ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: {total_donations} RUB" if total_donations > 0 else ""}
{achievements_text}
                """
            else:
                info_text = USER_MESSAGES['info_not_found']

        await update.message.reply_text(info_text, parse_mode='HTML')

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É"""
        if not OPENWEATHER_API_KEY:
            await update.message.reply_text(WEATHER_MESSAGES['no_api_key'])
            return

        city = ' '.join(context.args) if context.args else 'Moscow'

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
        if not city or len(city.strip()) < 2:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if len(city) > 50:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            import requests
            response = requests.get(url, timeout=10)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            if response.status_code == 401:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –ø–æ–≥–æ–¥—ã")
                return
            elif response.status_code == 429:
                await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code >= 500:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code != 200:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")
                return

            data = response.json()

            if data.get('cod') == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                if 'name' not in data or 'main' not in data or 'weather' not in data:
                    await update.message.reply_text("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    return

                weather_text = WEATHER_MESSAGES['weather_info'].format(
                    city=data['name'],
                    temp=data['main']['temp'],
                    feels_like=data['main']['feels_like'],
                    humidity=data['main']['humidity'],
                    description=data['weather'][0]['description']
                )
                await update.message.reply_text(weather_text, parse_mode='HTML')
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ –æ—Ç API
                if data.get('cod') == '404':
                    await update.message.reply_text(f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                elif data.get('cod') == '401':
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API –ø–æ–≥–æ–¥—ã")
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        except requests.exceptions.Timeout:
            await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except requests.exceptions.ConnectionError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        except requests.exceptions.RequestException as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)[:100]}")
        except (KeyError, ValueError, TypeError) as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {str(e)[:100]}")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ weather: {e}")
            await update.message.reply_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
        if not NEWS_API_KEY:
            await update.message.reply_text(NEWS_MESSAGES['no_api_key'])
            return

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            url = f"https://newsapi.org/v2/top-headlines?country=ru&apiKey={NEWS_API_KEY}"

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = requests.get(url, timeout=10)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            if response.status_code == 401:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –Ω–æ–≤–æ—Å—Ç–µ–π")
                return
            elif response.status_code == 429:
                await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code >= 500:
                await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            elif response.status_code != 200:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
                return

            data = response.json()

            if data.get('status') == 'ok' and data.get('articles'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—å–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                articles = data['articles'][:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                valid_articles = []

                for article in articles:
                    if article.get('title') and article.get('url'):
                        valid_articles.append(article)

                if not valid_articles:
                    await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    return

                news_text = NEWS_MESSAGES['news_title']
                for i, article in enumerate(valid_articles, 1):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    title = article['title'][:200] if len(article['title']) > 200 else article['title']
                    url = article['url'][:500] if len(article['url']) > 500 else article['url']  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º URL
                    news_text += f"{i}. {title}\n{url}\n\n"

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(news_text) > 4000:
                    news_text = news_text[:3997] + "..."

                await update.message.reply_text(news_text, parse_mode='HTML')
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ç API
                if data.get('status') == 'error':
                    error_code = data.get('code', 'unknown')
                    error_message = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

                    if error_code == 'apiKeyInvalid':
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –Ω–æ–≤–æ—Å—Ç–µ–π")
                    elif error_code == 'rateLimited':
                        await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –Ω–æ–≤–æ—Å—Ç–µ–π")
                    elif error_code == 'sourcesUnavailable':
                        await update.message.reply_text("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    else:
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π: {error_message}")
                else:
                    await update.message.reply_text(NEWS_MESSAGES['news_not_found'])

        except requests.exceptions.Timeout:
            await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except requests.exceptions.ConnectionError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–æ–≤–æ—Å—Ç–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        except requests.exceptions.RequestException as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)[:100]}")
        except (KeyError, ValueError, TypeError) as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)[:100]}")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ news: {e}")
            await update.message.reply_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def translate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        if len(context.args) < 2:
            await update.message.reply_text(TRANSLATE_MESSAGES['usage'])
            return

        text = ' '.join(context.args[:-1])
        target_lang = context.args[-1]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not text or not text.strip():
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        if not target_lang or len(target_lang) != 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: en, ru, de)")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if len(text) > 1000:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é Google Translate API (–Ω—É–∂–µ–Ω API –∫–ª—é—á)
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Translate API –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
            await update.message.reply_text(
                f"üîÑ –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: '{text[:50]}{'...' if len(text) > 50 else ''}' –Ω–∞ {target_lang}\n\n"
                f"üí° –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ Google Translate API –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ translate: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def play_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É"""
        keyboard = [
            [InlineKeyboardButton("–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps')],
            [InlineKeyboardButton("–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tic_tac_toe')],
            [InlineKeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='game_quiz')],
            [InlineKeyboardButton("–ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='game_battleship')],
            [InlineKeyboardButton("2048", callback_data='game_2048')],
            [InlineKeyboardButton("–¢–µ—Ç—Ä–∏—Å", callback_data='game_tetris')],
            [InlineKeyboardButton("–ó–º–µ–π–∫–∞", callback_data='game_snake')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='cmd_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(GAME_MESSAGES['select_game'], reply_markup=reply_markup)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == 'cmd_start' or query.data == 'cmd_restart':
            await self.show_start_menu(query)
        elif query.data == 'cmd_help':
            await self.show_help_menu(query)
        elif query.data == 'cmd_play_game':
            await self.show_games_menu(query)
        elif query.data == 'game_rps':
            await self.start_rps_game(query, context)
        elif query.data == 'game_tic_tac_toe':
            await self.start_tic_tac_toe_game(query, context)
        elif query.data == 'game_quiz':
            await self.start_quiz_game(query, context)
        elif query.data == 'game_battleship':
            await self.start_battleship_game(query, context)
        elif query.data == 'game_2048':
            await self.start_2048_game(query, context)
        elif query.data == 'game_tetris':
            await self.start_tetris_game(query, context)
        elif query.data == 'game_snake':
            await self.start_snake_game(query, context)
        elif query.data.startswith('bs_'):
            await self.handle_battleship_shot(query, context)
        elif query.data.startswith('2048_'):
            await self.handle_2048_move(query, context)
        elif query.data.startswith('tetris_'):
            await self.handle_tetris_move(query, context)
        elif query.data.startswith('snake_'):
            await self.handle_snake_move(query, context)
        elif query.data.startswith('rps_'):
            await self.handle_rps(query, context)
        elif query.data.startswith('tictactoe_'):
            await self.handle_tic_tac_toe_move(query, context)
        elif query.data.startswith('quiz_'):
            await self.handle_quiz_answer(query, context)
        elif query.data.startswith('confirm_schedule_'):
            await self.confirm_schedule_post(query, context)
        elif query.data == 'edit_text':
            await self.edit_schedule_text(query, context)
        elif query.data == 'add_image':
            await self.add_schedule_image(query, context)
        elif query.data == 'cancel_schedule':
            await self.cancel_schedule_post(query, context)
        elif query.data.startswith('donate_'):
            await self.handle_donation_callback(query, context)
        elif query.data.startswith('moderate_'):
            await self.handle_moderation_callback(query, context)


    async def start_rps_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞'"""
        keyboard = [
            [InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å", callback_data='rps_rock')],
            [InlineKeyboardButton("üìÑ –ë—É–º–∞–≥–∞", callback_data='rps_paper')],
            [InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data='rps_scissors')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['rps_game'], reply_markup=reply_markup)

    async def start_tic_tac_toe_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'"""
        board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]
        context.user_data['tictactoe_board'] = board
        context.user_data['tictactoe_turn'] = 'user'

        keyboard = self.create_tic_tac_toe_keyboard(board)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_game'], reply_markup=reply_markup)

    async def handle_tic_tac_toe_move(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
        move_data = query.data.split('_')[1]
        if move_data == 'restart':
            await self.start_tic_tac_toe_game(query, context)
            return

        if len(move_data) != 2:
            await query.answer(GAME_MESSAGES['invalid_move'])
            return

        row, col = map(int, move_data)

        board = context.user_data.get('tictactoe_board')
        turn = context.user_data.get('tictactoe_turn')

        if not board or not (0 <= row < 3 and 0 <= col < 3) or board[row][col] != ' ' or turn != 'user':
            await query.answer(GAME_MESSAGES['invalid_move'])
            return

        # –•–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        board[row][col] = 'X'

        if self.check_winner(board, 'X'):
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_win'])
            db.update_score(query.from_user.id, SCORE_VALUES['tic_tac_toe_win'])
            db.update_reputation(query.from_user.id, SCORE_VALUES['reputation_per_message'])
            rank_update = db.update_rank(query.from_user.id, query.message.chat.id, query.from_user.first_name)
            if rank_update and rank_update.get("promoted"):
                await query.message.chat.send_message(
                    RANK_MESSAGES['promotion_message'].format(
                        name=rank_update['name'],
                        new_rank=rank_update['new_rank']
                    )
                )
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = self.create_tic_tac_toe_keyboard(board, game_over=True)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_win'], reply_markup=reply_markup)
            context.user_data.pop('tictactoe_board', None)
            context.user_data.pop('tictactoe_turn', None)
            return

        if self.is_board_full(board):
            keyboard = self.create_tic_tac_toe_keyboard(board, game_over=True)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_draw'], reply_markup=reply_markup)
            return

        # –•–æ–¥ –±–æ—Ç–∞
        bot_row, bot_col = self.get_bot_move(board)
        board[bot_row][bot_col] = 'O'

        if self.check_winner(board, 'O'):
            keyboard = self.create_tic_tac_toe_keyboard(board, game_over=True)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_lose'], reply_markup=reply_markup)
            return
            return

        if self.is_board_full(board):
            await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_draw'], reply_markup=reply_markup)
            return

        keyboard = self.create_tic_tac_toe_keyboard(board)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(GAME_MESSAGES['tic_tac_toe_game'], reply_markup=reply_markup)

    def create_tic_tac_toe_keyboard(self, board, game_over=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä—ã"""
        keyboard = []
        for i in range(3):
            row = []
            for j in range(3):
                symbol = board[i][j]
                if symbol == 'X':
                    text = '‚ùå'
                elif symbol == 'O':
                    text = '‚≠ï'
                else:
                    text = ' '
                if game_over:
                    # –ü—É—Å—Ç–∞—è callback_data –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
                    row.append(InlineKeyboardButton(text, callback_data='game_over'))
                else:
                    row.append(InlineKeyboardButton(text, callback_data=f'tictactoe_{i}{j}'))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='tictactoe_restart'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')
        ])
        return keyboard

    def check_winner(self, board, player):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        for row in board:
            if all(cell == player for cell in row):
                return True
        for col in range(3):
            if all(row[col] == player for row in board):
                return True
        if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
            return True
        return False

    def is_board_full(self, board):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –¥–æ—Å–∫–∞"""
        return all(cell != ' ' for row in board for cell in row)

    def get_bot_move(self, board):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–æ–¥–∞ –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    if self.check_winner(board, 'O'):
                        board[i][j] = ' '
                        return i, j
                    board[i][j] = ' '

        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    if self.check_winner(board, 'X'):
                        board[i][j] = ' '
                        return i, j
                    board[i][j] = ' '

        # –°–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
        import random
        while True:
            i, j = random.randint(0, 2), random.randint(0, 2)
            if board[i][j] == ' ':
                return i, j

    async def handle_rps(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ –ö–ù–ë"""
        user_choice = query.data.split('_')[1]
        bot_choice = random.choice(['rock', 'paper', 'scissors'])

        choices = {'rock': 'ü™® –ö–∞–º–µ–Ω—å', 'paper': 'üìÑ –ë—É–º–∞–≥–∞', 'scissors': '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã'}

        result = self.determine_rps_winner(user_choice, bot_choice)

        if result == 'win':
            message = GAME_MESSAGES['rps_win'].format(
                user_choice=choices[user_choice],
                bot_choice=choices[bot_choice]
            )
            db.update_score(query.from_user.id, SCORE_VALUES['game_win'])
            db.update_reputation(query.from_user.id, SCORE_VALUES['reputation_per_message'])
        elif result == 'lose':
            message = GAME_MESSAGES['rps_lose'].format(
                user_choice=choices[user_choice],
                bot_choice=choices[bot_choice]
            )
        else:
            message = GAME_MESSAGES['rps_draw'].format(
                user_choice=choices[user_choice],
                bot_choice=choices[bot_choice]
            )

        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_rps')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    def determine_rps_winner(self, user, bot):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –ö–ù–ë"""
        if user == bot:
            return 'draw'
        elif (user == 'rock' and bot == 'scissors') or \
             (user == 'paper' and bot == 'rock') or \
             (user == 'scissors' and bot == 'paper'):
            return 'win'
        else:
            return 'lose'

    async def start_quiz_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        questions = [
            {"question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "answers": ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω"], "correct": 0},
            {"question": "2 + 2 = ?", "answers": ["3", "4", "5"], "correct": 1},
            {"question": "–¶–≤–µ—Ç –Ω–µ–±–∞?", "answers": ["–ó–µ–ª–µ–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π"], "correct": 1},
            {"question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "answers": ["8", "9", "10"], "correct": 0},
            {"question": "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º?", "answers": ["JavaScript", "Python", "Java"], "correct": 1}
        ]

        question = random.choice(questions)
        context.user_data['quiz_correct'] = question['correct']
        context.user_data['quiz_question'] = question

        keyboard = []
        for i, answer in enumerate(question['answers']):
            keyboard.append([InlineKeyboardButton(answer, callback_data=f'quiz_{i}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(GAME_MESSAGES['quiz_game'].format(question=question['question']), reply_markup=reply_markup)

    async def handle_quiz_answer(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        answer_index = int(query.data.split('_')[1])
        correct_index = context.user_data.get('quiz_correct')

        if correct_index is None:
            await query.edit_message_text(GAME_MESSAGES['quiz_not_found'])
            return

        question = context.user_data.get('quiz_question', {})

        if answer_index == correct_index:
            keyboard = [
                [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['quiz_correct'].format(
                question=question.get('question', ''),
                answer=question.get('answers', [])[correct_index]
            ), reply_markup=reply_markup)
            db.update_score(query.from_user.id, SCORE_VALUES['game_win'])
        else:
            keyboard = [
                [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            correct_answer = question.get('answers', [])[correct_index] if correct_index < len(question.get('answers', [])) else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            await query.edit_message_text(GAME_MESSAGES['quiz_wrong'].format(
                question=question.get('question', ''),
                correct_answer=correct_answer
            ), reply_markup=reply_markup)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        context.user_data.pop('quiz_correct', None)
        context.user_data.pop('quiz_question', None)

    async def start_battleship_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ú–æ—Ä—Å–∫–æ–π –±–æ–π'"""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ 5x5 –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ 10x10)
        board = [['~' for _ in range(5)] for _ in range(5)]
        bot_ships = self.place_ships()  # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª–∏ –±–æ—Ç–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        context.user_data['battleship_board'] = board
        context.user_data['battleship_bot_ships'] = bot_ships
        context.user_data['battleship_shots'] = 0
        context.user_data['battleship_hits'] = 0

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã
        keyboard = self.create_battleship_keyboard(board)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['battleship_start'], reply_markup=reply_markup, parse_mode='HTML')

    def create_battleship_keyboard(self, board):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ú–æ—Ä—Å–∫–æ–≥–æ –±–æ—è"""
        keyboard = []

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (0-4)
        header_row = [InlineKeyboardButton(" ", callback_data='bs_header')]
        for j in range(5):
            header_row.append(InlineKeyboardButton(str(j), callback_data='bs_header'))
        keyboard.append(header_row)

        # –°—Ç—Ä–æ–∫–∏ —Å –±—É–∫–≤–∞–º–∏ –∏ –∫–ª–µ—Ç–∫–∞–º–∏
        letters = ['A', 'B', 'C', 'D', 'E']
        for i in range(5):
            row = [InlineKeyboardButton(letters[i], callback_data='bs_header')]
            for j in range(5):
                cell = board[i][j]
                callback_data = f'bs_{i}{j}'  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ row,col
                row.append(InlineKeyboardButton(cell, callback_data=callback_data))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')])

        return keyboard

    def place_ships(self):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - 3 –∫–æ—Ä–∞–±–ª—è)"""
        ships = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        import random

        # –†–∞–∑–º–µ—â–∞–µ–º 3 –∫–æ—Ä–∞–±–ª—è: 3-–∫–ª–µ—Ç–æ—á–Ω—ã–π, 2-–∫–ª–µ—Ç–æ—á–Ω—ã–π, 1-–∫–ª–µ—Ç–æ—á–Ω—ã–π
        ship_sizes = [3, 2, 1]

        for size in ship_sizes:
            placed = False
            while not placed:
                # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 0 - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, 1 - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                direction = random.randint(0, 1)
                if direction == 0:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
                    row = random.randint(0, 4)
                    col = random.randint(0, 4 - size)
                    ship_coords = [(row, col + i) for i in range(size)]
                else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                    row = random.randint(0, 4 - size)
                    col = random.randint(0, 4)
                    ship_coords = [(row + i, col) for i in range(size)]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∞–±–ª—å –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –¥—Ä—É–≥–∏–µ
                if not any(coord in [c for ship in ships for c in ship] for coord in ship_coords):
                    ships.append(ship_coords)
                    placed = True

        return ships

    async def handle_battleship_shot(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞ –≤ –ú–æ—Ä—Å–∫–æ–º –±–æ–µ"""
        if query.data == 'bs_header':
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º

        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coords = query.data[3:]  # bs_01 -> 01
        if len(coords) != 2:
            await query.answer(GAME_MESSAGES['battleship_invalid_coord'])
            return

        try:
            row, col = int(coords[0]), int(coords[1])
        except ValueError:
            await query.answer(GAME_MESSAGES['battleship_invalid_coord'])
            return

        board = context.user_data.get('battleship_board')
        bot_ships = context.user_data.get('battleship_bot_ships')

        if not board or not (0 <= row < 5 and 0 <= col < 5):
            await query.answer(GAME_MESSAGES['battleship_invalid_coord'])
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—Ä–µ–ª—è–ª–∏ –ª–∏ —É–∂–µ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É
        if board[row][col] != '~':
            await query.answer(GAME_MESSAGES['battleship_already_shot'])
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
        context.user_data['battleship_shots'] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        hit = False
        ship_hit = None
        for ship in bot_ships:
            if (row, col) in ship:
                hit = True
                ship_hit = ship
                break

        if hit:
            board[row][col] = 'üí•'  # –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            context.user_data['battleship_hits'] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ç–æ–ø–ª–µ–Ω –ª–∏ –∫–æ—Ä–∞–±–ª—å
            ship_sunk = all(board[r][c] == 'üí•' for r, c in ship_hit)
            if ship_sunk:
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
                for r, c in ship_hit:
                    board[r][c] = 'üî•'
                await query.answer(GAME_MESSAGES['battleship_sunk'])
            else:
                await query.answer(GAME_MESSAGES['battleship_hit'])
        else:
            board[row][col] = 'üíß'  # –ü—Ä–æ–º–∞—Ö
            await query.answer(GAME_MESSAGES['battleship_miss'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É (–≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã)
        total_ship_cells = sum(len(ship) for ship in bot_ships)
        if context.user_data['battleship_hits'] >= total_ship_cells:
            # –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞
            db.update_score(query.from_user.id, SCORE_VALUES['tic_tac_toe_win'])  # +15 –æ—á–∫–æ–≤
            db.update_reputation(query.from_user.id, SCORE_VALUES['reputation_per_message'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
            rank_update = db.update_rank(query.from_user.id, query.message.chat.id, query.from_user.first_name)
            if rank_update and rank_update.get("promoted"):
                await query.message.chat.send_message(
                    RANK_MESSAGES['promotion_message'].format(
                        name=rank_update['name'],
                        new_rank=rank_update['new_rank']
                    )
                )

            keyboard = self.create_battleship_keyboard(board)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['battleship_win'], reply_markup=reply_markup)
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
            context.user_data.pop('battleship_board', None)
            context.user_data.pop('battleship_bot_ships', None)
            context.user_data.pop('battleship_shots', None)
            context.user_data.pop('battleship_hits', None)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.create_battleship_keyboard(board)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['battleship_start'], reply_markup=reply_markup, parse_mode='HTML')

    async def ban_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['ban_usage'])
            return

        user_id_str = context.args[0]
        reason = ' '.join(context.args[1:])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_id = int(user_id_str)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã
        if not reason or not reason.strip():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞")
            return

        if len(reason) > 500:
            await update.message.reply_text("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è
        if user_id == update.effective_user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞
        if user_id == context.bot.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞")
            return

        try:
            await update.effective_chat.ban_member(user_id)
            await update.message.reply_text(MODERATION_MESSAGES['user_banned'].format(user_id=user_id, reason=reason))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)[:100]}")

    async def unban_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['unban_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.unban_member(int(user_id))
            await update.message.reply_text(MODERATION_MESSAGES['user_unbanned'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['unban_error'].format(error=e))

    async def mute_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['mute_usage'])
            return

        user_id_str = context.args[0]
        time_str = context.args[1]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_id = int(user_id_str)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        try:
            mute_time = int(time_str)
        except ValueError:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
        if mute_time < 1:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        if mute_time > 365 * 24 * 3600:  # –ú–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1 –≥–æ–¥ (31536000 —Å–µ–∫—É–Ω–¥).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∏—Ç—å —Å–µ–±—è
        if user_id == update.effective_user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥–ª—É—à–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∏—Ç—å –±–æ—Ç–∞
        if user_id == context.bot.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥–ª—É—à–∏—Ç—å –±–æ—Ç–∞")
            return

        from datetime import datetime, timedelta
        until_date = datetime.now() + timedelta(seconds=mute_time)

        try:
            await update.effective_chat.restrict_member(
                user_id,
                until_date=until_date,
                can_send_messages=False
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_muted'].format(user_id=user_id, time=mute_time))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥–ª—É—à–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)[:100]}")

    async def unmute_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–Ω—è—Ç—å –∑–∞–≥–ª—É—à–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['unmute_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.restrict_member(
                int(user_id),
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_unmuted'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['unmute_error'].format(error=e))

    async def kick_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['kick_usage'])
            return

        user_id_str = context.args[0]
        reason = ' '.join(context.args[1:])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_id = int(user_id_str)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã
        if not reason or not reason.strip():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∫–∏–∫–∞")
            return

        if len(reason) > 500:
            await update.message.reply_text("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∫–∏–∫–Ω—É—Ç—å —Å–µ–±—è
        if user_id == update.effective_user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∫–∏–∫–Ω—É—Ç—å –±–æ—Ç–∞
        if user_id == context.bot.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –±–æ—Ç–∞")
            return

        try:
            await update.effective_chat.ban_member(user_id)
            await update.effective_chat.unban_member(user_id)  # –†–∞–∑–±–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –±–∞–Ω–∞ = –∫–∏–∫
            await update.message.reply_text(MODERATION_MESSAGES['user_kicked'].format(user_id=user_id, reason=reason))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)[:100]}")

    async def promote_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['promote_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.promote_member(
                int(user_id),
                can_delete_messages=True,
                can_restrict_members=True,
                can_invite_users=True
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_promoted'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['promote_error'].format(error=e))

    async def demote_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–Ω–∏–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(MODERATION_MESSAGES['demote_usage'])
            return

        user_id = context.args[0]

        try:
            await update.effective_chat.promote_member(
                int(user_id),
                can_delete_messages=False,
                can_restrict_members=False,
                can_invite_users=False,
                can_pin_messages=False
            )
            await update.message.reply_text(MODERATION_MESSAGES['user_demoted'].format(user_id=user_id))
        except Exception as e:
            await update.message.reply_text(MODERATION_MESSAGES['demote_error'].format(error=e))

    async def warn_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(MODERATION_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(MODERATION_MESSAGES['warn_usage'])
            return

        user_id_str = context.args[0]
        reason = ' '.join(context.args[1:])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_id = int(user_id_str)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã
        if not reason or not reason.strip():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            return

        if len(reason) > 500:
            await update.message.reply_text("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–µ–±–µ
        if user_id == update.effective_user.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–æ—Ç—É
        if user_id == context.bot.id:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–æ—Ç—É")
            return

        try:
            db.add_warning(user_id, reason, update.effective_user.id)
            await update.message.reply_text(MODERATION_MESSAGES['warning_issued'].format(user_id=user_id, reason=reason))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {str(e)[:100]}")

    async def ranks_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–Ω–≥–æ–≤"""
        await update.message.reply_text(RANK_MESSAGES['rank_info'], parse_mode='HTML')

    async def import_csv(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        if not await self.is_admin(update.effective_chat, update.effective_user.id):
            await update.message.reply_text(IMPORT_MESSAGES['no_permission'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(IMPORT_MESSAGES['usage'])
            return

        csv_file = context.args[0] if context.args else 'chat_-1001519866478_users_full_20251014.csv'

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if not csv_file or not csv_file.strip():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è CSV —Ñ–∞–π–ª–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        import re
        if not re.match(r'^[a-zA-Z0-9._\-/\s]+$', csv_file):
            await update.message.reply_text("‚ùå –ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            return

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if len(csv_file) > 255:
            await update.message.reply_text("‚ùå –ò–º—è —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ telegram_bot
        if not os.path.isabs(csv_file):
            csv_file = os.path.join('telegram_bot', csv_file)

        await update.message.reply_text(IMPORT_MESSAGES['start_import'].format(file=csv_file))

        try:
            success = db.import_users_from_csv(csv_file)

            if success:
                await update.message.reply_text(IMPORT_MESSAGES['success'])
            else:
                await update.message.reply_text(IMPORT_MESSAGES['error'])

        except Exception as e:
            await update.message.reply_text(IMPORT_MESSAGES['file_error'].format(error=str(e)))

    async def schedule_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission'])
            return

        if len(context.args) < 2:
            await update.message.reply_text(SCHEDULER_MESSAGES['usage_schedule'])
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args = context.args if hasattr(context, 'args') else []
        if not args:
            await update.message.reply_text(SCHEDULER_MESSAGES['usage_schedule'])
            return

        time_str = args[0]
        text = ' '.join(args[1:])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
        if not text or not text.strip():
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        if len(text) > 4000:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if not time_str or not time_str.strip():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return

        if len(time_str) > 100:
            await update.message.reply_text("‚ùå –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è")
            return

        try:
            schedule_time = self.parse_schedule_time(time_str)
        except ValueError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)[:100]}")
            return

        if schedule_time <= datetime.now():
            await update.message.reply_text(SCHEDULER_MESSAGES['time_in_past'])
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥)
        max_future_time = datetime.now() + timedelta(days=365)
        if schedule_time > max_future_time:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 1 –≥–æ–¥")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
        preview_text = f"""
üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>

üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {schedule_time.strftime('%Y-%m-%d %H:%M:%S')}

üìã <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>
{text}

‚ùì –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
        """

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'confirm_schedule_{schedule_time.strftime("%Y%m%d_%H%M%S")}_{len(text)}')],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data='edit_text')],
            [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data='add_image')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_schedule')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ user_data
        context.user_data['schedule_draft'] = {
            'time_str': time_str,
            'text': text,
            'schedule_time': schedule_time,
            'chat_id': update.effective_chat.id,
            'created_by': user.id
        }

        await update.message.reply_text(preview_text, parse_mode='HTML', reply_markup=reply_markup)

    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission_view'])
            return

        posts = db.get_scheduled_posts(chat_id=update.effective_chat.id)
        print(f"DEBUG: Found {len(posts)} posts for chat {update.effective_chat.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        if not posts:
            await update.message.reply_text(SCHEDULER_MESSAGES['no_posts'])
            return

        response = "üìã <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
        for post in posts:
            post_id, chat_id, text, image_path, schedule_time, created_by, status, published_at, created_at, creator_name = post

            response += f"üÜî <b>{post_id}</b>\n"
            response += f"üìÖ {schedule_time}\n"
            response += f"üë§ –°–æ–∑–¥–∞–ª: {creator_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            response += f"üìù {text[:100]}{'...' if len(text) > 100 else ''}\n"
            if image_path:
                response += f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}\n"
            response += "\n" + "‚îÄ" * 30 + "\n"

        await update.message.reply_text(response, parse_mode='HTML')

    async def delete_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission_delete'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(SCHEDULER_MESSAGES['usage_delete'])
            return

        post_id_str = context.args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ—Å—Ç–∞
        try:
            post_id = int(post_id_str)
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ID
        if post_id < 1:
            await update.message.reply_text("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return

        if post_id > 999999999:  # –†–∞–∑—É–º–Ω—ã–π –º–∞–∫—Å–∏–º—É–º –¥–ª—è SQLite
            await update.message.reply_text("‚ùå ID –ø–æ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            return

        success = db.delete_scheduled_post(post_id, user.id)

        if success:
            await update.message.reply_text(SCHEDULER_MESSAGES['post_deleted'].format(post_id=post_id))
        else:
            await update.message.reply_text(SCHEDULER_MESSAGES['post_not_found'].format(post_id=post_id))

    async def publish_now(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text(SCHEDULER_MESSAGES['no_permission_publish'])
            return

        if len(context.args) < 1:
            await update.message.reply_text(SCHEDULER_MESSAGES['usage_publish'])
            return

        post_id_str = context.args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ—Å—Ç–∞
        try:
            post_id = int(post_id_str)
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ID
        if post_id < 1:
            await update.message.reply_text("‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return

        if post_id > 999999999:  # –†–∞–∑—É–º–Ω—ã–π –º–∞–∫—Å–∏–º—É–º –¥–ª—è SQLite
            await update.message.reply_text("‚ùå ID –ø–æ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        posts = db.get_scheduled_posts()
        post = None
        for p in posts:
            if p[0] == post_id:  # p[0] is post_id
                post = p
                break

        if not post:
            await update.message.reply_text(SCHEDULER_MESSAGES['post_not_found'].format(post_id=post_id))
            return

        post_id, chat_id, text, image_path, schedule_time, created_by, status, published_at, created_at, creator_name = post

        try:
            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await update.effective_chat.send_photo(photo, caption=text)
            else:
                await update.effective_chat.send_message(text)

            # –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
            db.mark_post_published(post_id)

            await update.message.reply_text(SCHEDULER_MESSAGES['post_published'].format(post_id=post_id))

        except Exception as e:
            await update.message.reply_text(SCHEDULER_MESSAGES['publish_error'].format(error=str(e)))

    def parse_schedule_time(self, time_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        from datetime import datetime, timedelta
        import re

        current_time = datetime.now()

        # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è: 2024-01-15 14:30:00 –∏–ª–∏ 2024-01-15 14:30
        absolute_pattern = r'^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2})(?::(\d{2}))?$'
        match = re.match(absolute_pattern, time_str)

        if match:
            year, month, day, hour, minute = map(int, match.groups()[:5])
            second = int(match.group(6)) if match.group(6) else 0
            return datetime(year, month, day, hour, minute, second)

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: +30m, +2h, +1d
        relative_pattern = r'^(\+|\-)(\d+)([mhd])$'
        match = re.match(relative_pattern, time_str)

        if match:
            sign, amount, unit = match.groups()
            amount = int(amount)

            if unit == 'm':  # –º–∏–Ω—É—Ç—ã
                delta = timedelta(minutes=amount)
            elif unit == 'h':  # —á–∞—Å—ã
                delta = timedelta(hours=amount)
            elif unit == 'd':  # –¥–Ω–∏
                delta = timedelta(days=amount)

            if sign == '-':
                delta = -delta

            return current_time + delta

        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è (2024-01-15 14:30) –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ (+30m, +2h, +1d)")

    async def is_admin(self, chat, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–∏—Å–∫—É ADMIN_IDS
        if user_id in ADMIN_IDS:
            return True

        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ
        try:
            member = await chat.get_member(user_id)
            return member.status in ['administrator', 'creator']
        except:
            return False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
        if context.user_data.get('waiting_for_text_edit'):
            await self.handle_text_edit(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞
        if context.user_data.get('waiting_for_donation_amount'):
            await self.handle_donation_amount_input(update, context)
            return

        message_text = update.message.text.lower()

        # –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
        if self.check_profanity(message_text):
            await self.handle_profanity_violation(update, user)
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user.id, user.username, user.first_name, user.last_name)

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        db.update_score(user.id)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        db.update_reputation(user.id, 1)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
        rank_update = db.update_rank(user.id, update.effective_chat.id, user.first_name)
        if rank_update and rank_update.get("promoted"):
            await update.effective_chat.send_message(
                RANK_MESSAGES['promotion_message'].format(
                    name=rank_update['name'],
                    new_rank=rank_update['new_rank']
                )
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞ "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
        if "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã" in message_text or "—Ä–µ–∫–≤–∏–∑–∏—Ç" in message_text:
            await update.message.reply_text(BANK_DETAILS_TEXT, reply_to_message_id=update.message.message_id)
            return

        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        response_found = False
        for key, response in PREDEFINED_RESPONSES.items():
            if key in message_text:
                await update.message.reply_text(response)
                response_found = True
                break

        if not response_found:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ help
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='cmd_help')],
                [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã", callback_data='cmd_play_game')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                USER_MESSAGES['unknown_message'],
                reply_markup=reply_markup
            )
            return

        # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –æ—Ç 1 –¥–æ 5 –≤–º–µ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
            bonus_points = random.randint(SCORE_VALUES['bonus_min'], SCORE_VALUES['bonus_max'])
            db.update_score(user.id, bonus_points)
            await update.message.reply_text(USER_MESSAGES['bonus_points'].format(points=bonus_points))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "+" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ–º
        await self.handle_plus_reaction(update.message)

    async def handle_text_edit(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        new_text = update.message.text

        draft = context.user_data.get('schedule_draft')
        if draft:
            draft['text'] = new_text
            context.user_data['schedule_draft'] = draft

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            preview_text = f"""
üìù <b>–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>

üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {draft['schedule_time'].strftime('%Y-%m-%d %H:%M:%S')}

üìã <b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>
{new_text}

‚ùì –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
            """

            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'confirm_schedule_{draft["schedule_time"].strftime("%Y%m%d_%H%M%S")}_{len(new_text)}')],
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –µ—â–µ —Ä–∞–∑", callback_data='edit_text')],
                [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data='add_image')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_schedule')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(preview_text, parse_mode='HTML', reply_markup=reply_markup)

        context.user_data.pop('waiting_for_text_edit', None)

    async def handle_donation_amount_input(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞"""
        try:
            amount = float(update.message.text.strip())
            if amount <= 0:
                raise ValueError()

            user = update.effective_user

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if db.add_donation(user.id, amount):
                points = int(amount // 100)
                await update.message.reply_text(
                    DONATION_MESSAGES['donate_success'].format(
                        amount=amount,
                        currency='RUB',
                        points=points
                    ),
                    parse_mode='HTML'
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                current_year = datetime.now().year
                total_yearly = db.get_total_donations(user.id, current_year)
                achievements = db.check_and_unlock_achievements(user.id, donations=total_yearly)

                # –°–æ–æ–±—â–∞–µ–º –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
                for achievement in achievements:
                    if achievement in ACHIEVEMENT_MESSAGES:
                        await update.effective_chat.send_message(
                            ACHIEVEMENT_MESSAGES[achievement].format(name=user.first_name),
                            parse_mode='HTML'
                        )
            else:
                await update.message.reply_text(DONATION_MESSAGES['donate_error'])

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

        context.user_data.pop('waiting_for_donation_amount', None)

    async def handle_new_chat_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        chat_id = update.effective_chat.id

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        await self.delete_welcome_message(chat_id)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–Ω–∞—Ç–æ–≤
        welcome_text = self.get_welcome_message_with_rules()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–Ω–∞—Ç–æ–≤
        donation_keyboard = [
            [InlineKeyboardButton("üí∞ 100 ‚ÇΩ", callback_data='donate_100')],
            [InlineKeyboardButton("üí∞ 500 ‚ÇΩ", callback_data='donate_500')],
            [InlineKeyboardButton("üí∞ 1000 ‚ÇΩ", callback_data='donate_1000')],
            [InlineKeyboardButton("üéØ –ü–æ–º–æ—â—å", callback_data='cmd_help')]
        ]
        reply_markup = InlineKeyboardMarkup(donation_keyboard)

        try:
            message = await update.effective_chat.send_message(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –∞–≤—Ç–æ–¥–∞–ª–µ–Ω–∏—è
            await self.set_welcome_message(chat_id, message.message_id)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            for member in update.chat_member.new_chat_members:
                db.add_user(member.id, member.username, member.first_name, member.last_name)

                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
                db.update_score(member.id, SCORE_VALUES['join_chat'])

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
                db.update_reputation(member.id, SCORE_VALUES['reputation_per_message'])

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def get_welcome_message_with_rules(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã"""
        welcome_text = """üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É!</b>

üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!

üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã:</b>
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
‚Ä¢ –°–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã
‚Ä¢ –£–≤–∞–∂–∞–π—Ç–µ –º–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞

üéÆ –í –≥—Ä—É–ø–ø–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –∏–≥—Ä!
üèÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rank –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞

üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:</b>
–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ!"""
        return welcome_text

    async def handle_inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.inline_query.query

        results = []

        try:
            if query.startswith('weather'):
                city = query.split(' ', 1)[1] if len(query.split(' ', 1)) > 1 else 'Moscow'

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
                if not city or len(city.strip()) < 2:
                    results.append(InlineQueryResultArticle(
                        id='1',
                        title="–û—à–∏–±–∫–∞",
                        input_message_content=InputTextMessageContent("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
                    ))
                elif len(city) > 50:
                    results.append(InlineQueryResultArticle(
                        id='1',
                        title="–û—à–∏–±–∫–∞",
                        input_message_content=InputTextMessageContent("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
                    ))
                elif OPENWEATHER_API_KEY:
                    try:
                        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
                        response = requests.get(url, timeout=5)

                        if response.status_code == 200:
                            data = response.json()
                            if data.get('cod') == 200:
                                weather_text = f"–ü–æ–≥–æ–¥–∞ –≤ {data['name']}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['weather'][0]['description']}"
                                results.append(InlineQueryResultArticle(
                                    id='1',
                                    title=f"–ü–æ–≥–æ–¥–∞ –≤ {city}",
                                    input_message_content=InputTextMessageContent(weather_text)
                                ))
                            else:
                                results.append(InlineQueryResultArticle(
                                    id='1',
                                    title="–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                    input_message_content=InputTextMessageContent(f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                ))
                        else:
                            results.append(InlineQueryResultArticle(
                                id='1',
                                title="–û—à–∏–±–∫–∞ API",
                                input_message_content=InputTextMessageContent("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã")
                            ))
                    except Exception:
                        results.append(InlineQueryResultArticle(
                            id='1',
                            title="–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
                            input_message_content=InputTextMessageContent("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã")
                        ))
                else:
                    results.append(InlineQueryResultArticle(
                        id='1',
                        title="API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                        input_message_content=InputTextMessageContent("API –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    ))

            elif query.startswith('translate'):
                # –ë–∞–∑–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                text_parts = query.split(' ', 2)
                if len(text_parts) >= 3:
                    text = text_parts[1]
                    lang = text_parts[2]

                    if text and lang and len(text) <= 500 and len(lang) == 2:
                        result_text = f"–ü–µ—Ä–µ–≤–æ–¥ '{text[:50]}{'...' if len(text) > 50 else ''}' –Ω–∞ {lang}\n[–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏]"
                        results.append(InlineQueryResultArticle(
                            id='1',
                            title=f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {lang}",
                            input_message_content=InputTextMessageContent(result_text)
                        ))
                    else:
                        results.append(InlineQueryResultArticle(
                            id='1',
                            title="–û—à–∏–±–∫–∞",
                            input_message_content=InputTextMessageContent("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
                        ))
                else:
                    results.append(InlineQueryResultArticle(
                        id='1',
                        title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
                        input_message_content=InputTextMessageContent("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: weather [–≥–æ—Ä–æ–¥] –∏–ª–∏ translate [—Ç–µ–∫—Å—Ç] [—è–∑—ã–∫]")
                    ))

            await update.inline_query.answer(results)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–ª–∞–π–Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await update.inline_query.answer([])

    async def show_start_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='cmd_help')],
            [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã", callback_data='cmd_play_game')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}! üëã

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —á–∞—Ç–µ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –í–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–≥–æ–¥—É –∏ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ò–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """

        await query.edit_message_text(welcome_text, reply_markup=reply_markup)

    async def show_help_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='cmd_start')],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='cmd_restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(HELP_TEXT, parse_mode='HTML', reply_markup=reply_markup)

    async def show_games_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä"""
        keyboard = [
            [InlineKeyboardButton("–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps')],
            [InlineKeyboardButton("–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tic_tac_toe')],
            [InlineKeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='game_quiz')],
            [InlineKeyboardButton("–ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='game_battleship')],
            [InlineKeyboardButton("2048", callback_data='game_2048')],
            [InlineKeyboardButton("–¢–µ—Ç—Ä–∏—Å", callback_data='game_tetris')],
            [InlineKeyboardButton("–ó–º–µ–π–∫–∞", callback_data='game_snake')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='cmd_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['select_game'], reply_markup=reply_markup)

    async def confirm_schedule_post(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        try:
            draft = context.user_data.get('schedule_draft')
            if not draft:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
                return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            post_id = db.add_scheduled_post(
                chat_id=draft['chat_id'],
                text=draft['text'],
                schedule_time=draft['schedule_time'].strftime('%Y-%m-%d %H:%M:%S'),
                created_by=draft['created_by']
            )

            if post_id:
                await query.edit_message_text(
                    f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\nüìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {draft['schedule_time'].strftime('%Y-%m-%d %H:%M:%S')}\nüìù –¢–µ–∫—Å—Ç: {draft['text'][:50]}{'...' if len(draft['text']) > 50 else ''}\nüÜî ID –ø–æ—Å—Ç–∞: {post_id}"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

            # –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
            context.user_data.pop('schedule_draft', None)

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}")

    async def edit_schedule_text(self, query, context):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        draft = context.user_data.get('schedule_draft')
        if not draft:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        await query.edit_message_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n" + draft['text'],
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_schedule')]])
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        context.user_data['waiting_for_text_edit'] = True

    async def add_schedule_image(self, query, context):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ –ø–æ—Å—Ç—É"""
        draft = context.user_data.get('schedule_draft')
        if not draft:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        await query.edit_message_text(
            "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n" + draft['text'],
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_schedule')]])
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        context.user_data['waiting_for_image'] = True

    async def cancel_schedule_post(self, query, context):
        """–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        context.user_data.pop('schedule_draft', None)
        context.user_data.pop('waiting_for_text_edit', None)
        context.user_data.pop('waiting_for_image', None)

        await query.edit_message_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # ===== –ù–û–í–´–ï –ò–ì–†–´ =====

    async def start_2048_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã 2048"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è 4x4
        board = [[0 for _ in range(4)] for _ in range(4)]

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞
        self.add_random_tile(board)
        self.add_random_tile(board)

        context.user_data['2048_board'] = board
        context.user_data['2048_score'] = 0

        keyboard = self.create_2048_keyboard(board, 0)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['2048_start'], reply_markup=reply_markup, parse_mode='HTML')

    async def start_tetris_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –¢–µ—Ç—Ä–∏—Å"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è 10x20 (—à–∏—Ä–∏–Ω–∞ x –≤—ã—Å–æ—Ç–∞)
        board = [[0 for _ in range(10)] for _ in range(20)]
        current_piece = self.get_random_tetris_piece()
        context.user_data['tetris_board'] = board
        context.user_data['tetris_current_piece'] = current_piece
        context.user_data['tetris_score'] = 0
        context.user_data['tetris_lines'] = 0

        keyboard = self.create_tetris_keyboard(board, current_piece, 0, 0)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['tetris_start'], reply_markup=reply_markup, parse_mode='HTML')

    async def start_snake_game(self, query, context):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ó–º–µ–π–∫–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è 10x10
        board = [[0 for _ in range(10)] for _ in range(10)]
        snake = [(5, 5)]  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–º–µ–π–∫–∏
        food = self.place_food(board, snake)
        direction = 'right'

        context.user_data['snake_board'] = board
        context.user_data['snake_body'] = snake
        context.user_data['snake_food'] = food
        context.user_data['snake_direction'] = direction
        context.user_data['snake_score'] = 0

        keyboard = self.create_snake_keyboard(board, snake, food, 0)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(GAME_MESSAGES['snake_start'], reply_markup=reply_markup, parse_mode='HTML')

    async def handle_2048_move(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ 2048"""
        move = query.data.split('_')[1]

        board = context.user_data.get('2048_board')
        score = context.user_data.get('2048_score', 0)

        if not board:
            await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        moved, new_score = self.move_2048(board, move)
        score += new_score

        if moved:
            self.add_random_tile(board)
            context.user_data['2048_score'] = score

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
            if self.check_2048_win(board):
                db.update_score(query.from_user.id, 20)
                keyboard = self.create_2048_keyboard(board, score, game_over=True)
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(GAME_MESSAGES['2048_win'], reply_markup=reply_markup)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
            if not self.can_move_2048(board):
                keyboard = self.create_2048_keyboard(board, score, game_over=True)
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(GAME_MESSAGES['2048_game_over'], reply_markup=reply_markup)
                return

            keyboard = self.create_2048_keyboard(board, score)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['2048_start'], reply_markup=reply_markup, parse_mode='HTML')
        else:
            await query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥!")

    async def handle_tetris_move(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ –¢–µ—Ç—Ä–∏—Å"""
        move = query.data.split('_')[1]

        board = context.user_data.get('tetris_board')
        piece = context.user_data.get('tetris_current_piece')
        score = context.user_data.get('tetris_score', 0)
        lines = context.user_data.get('tetris_lines', 0)

        if not board or not piece:
            await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π
        if move == 'left':
            piece['x'] -= 1
            if not self.is_valid_position(board, piece):
                piece['x'] += 1
        elif move == 'right':
            piece['x'] += 1
            if not self.is_valid_position(board, piece):
                piece['x'] -= 1
        elif move == 'down':
            piece['y'] += 1
            if not self.is_valid_position(board, piece):
                piece['y'] -= 1
                # –§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∏–≥—É—Ä—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                self.place_piece(board, piece)
                lines_cleared = self.clear_lines(board)
                score += lines_cleared * 10
                lines += lines_cleared

                new_piece = self.get_random_tetris_piece()
                if not self.is_valid_position(board, new_piece):
                    # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                    keyboard = self.create_tetris_keyboard(board, piece, score, lines, game_over=True)
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(GAME_MESSAGES['tetris_game_over'].format(score=score), reply_markup=reply_markup)
                    return
                piece = new_piece
        elif move == 'rotate':
            old_shape = piece['shape'][:]
            piece['shape'] = list(zip(*piece['shape'][::-1]))
            if not self.is_valid_position(board, piece):
                piece['shape'] = old_shape

        context.user_data['tetris_current_piece'] = piece
        context.user_data['tetris_score'] = score
        context.user_data['tetris_lines'] = lines

        keyboard = self.create_tetris_keyboard(board, piece, score, lines)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(GAME_MESSAGES['tetris_start'], reply_markup=reply_markup, parse_mode='HTML')

    async def handle_snake_move(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π –≤ –∏–≥—Ä–µ –ó–º–µ–π–∫–∞"""
        new_direction = query.data.split('_')[1]

        board = context.user_data.get('snake_board')
        snake = context.user_data.get('snake_body')
        food = context.user_data.get('snake_food')
        direction = context.user_data.get('snake_direction', 'right')
        score = context.user_data.get('snake_score', 0)

        if not board or not snake:
            await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        opposites = {'up': 'down', 'down': 'up', 'left': 'right', 'right': 'left'}
        if new_direction == opposites.get(direction):
            await query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
            return

        # –î–≤–∏–≥–∞–µ–º –∑–º–µ–π–∫—É
        head = snake[0]
        if new_direction == 'up':
            new_head = (head[0] - 1, head[1])
        elif new_direction == 'down':
            new_head = (head[0] + 1, head[1])
        elif new_direction == 'left':
            new_head = (head[0], head[1] - 1)
        elif new_direction == 'right':
            new_head = (head[0], head[1] + 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
        if (new_head[0] < 0 or new_head[0] >= 10 or
            new_head[1] < 0 or new_head[1] >= 10 or
            new_head in snake):
            # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            db.update_score(query.from_user.id, score)
            keyboard = self.create_snake_keyboard(board, snake, food, score, game_over=True)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(GAME_MESSAGES['snake_game_over'].format(length=len(snake), score=score), reply_markup=reply_markup)
            return

        snake.insert(0, new_head)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥—É
        if new_head == food:
            score += 10
            food = self.place_food(board, snake)
        else:
            snake.pop()  # –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç

        context.user_data['snake_body'] = snake
        context.user_data['snake_food'] = food
        context.user_data['snake_direction'] = new_direction
        context.user_data['snake_score'] = score

        keyboard = self.create_snake_keyboard(board, snake, food, score)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(GAME_MESSAGES['snake_start'], reply_markup=reply_markup, parse_mode='HTML')

    # ===== –î–û–ù–ê–¢–´ –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø =====

    async def donate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–Ω–∞—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("100 ‚ÇΩ", callback_data='donate_100')],
            [InlineKeyboardButton("500 ‚ÇΩ", callback_data='donate_500')],
            [InlineKeyboardButton("1000 ‚ÇΩ", callback_data='donate_1000')],
            [InlineKeyboardButton("2500 ‚ÇΩ", callback_data='donate_2500')],
            [InlineKeyboardButton("5000 ‚ÇΩ", callback_data='donate_5000')],
            [InlineKeyboardButton("–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='donate_custom')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            DONATION_MESSAGES['donate_welcome'],
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        voice = update.message.voice

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user.id, user.username, user.first_name, user.last_name)

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.update_score(user.id, SCORE_VALUES['message'])

        duration = voice.duration

        # –ü–æ–ø—ã—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        transcription = await self.transcribe_voice_message(voice, update)

        await update.message.reply_text(
            f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({duration} —Å–µ–∫)\n\n"
            f"üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: {transcription}\n\n"
            f"üí° +1 –æ—á–∫–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
            reply_to_message_id=update.message.message_id
        )

    async def transcribe_voice_message(self, voice, update):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º speech recognition"""
        if not SPEECH_RECOGNITION_AVAILABLE:
            return "[Speech Recognition –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install SpeechRecognition]"

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                temp_ogg_path = temp_ogg.name

            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_file = await voice.get_file()
            await voice_file.download_to_drive(temp_ogg_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV –¥–ª—è speech_recognition
            temp_wav_path = temp_ogg_path.replace('.ogg', '.wav')

            if PYDUB_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                audio = AudioSegment.from_ogg(temp_ogg_path)
                audio.export(temp_wav_path, format='wav')
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                try:
                    subprocess.run([
                        'ffmpeg', '-i', temp_ogg_path, '-acodec', 'pcm_s16le',
                        '-ar', '16000', '-ac', '1', temp_wav_path
                    ], check=True, capture_output=True)
                except (subprocess.CalledProcessError, FileNotFoundError):
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    os.unlink(temp_ogg_path)
                    return "[–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –∏–ª–∏ pydub]\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã: pip install SpeechRecognition pydub ffmpeg-python"

            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            recognizer = sr.Recognizer()

            with sr.AudioFile(temp_wav_path) as source:
                audio_data = recognizer.record(source)

                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Google Speech Recognition (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                    text = recognizer.recognize_google(audio_data, language='ru-RU')
                    return text
                except sr.UnknownValueError:
                    return "[–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å]"
                except sr.RequestError:
                    # –ï—Å–ª–∏ Google API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Sphinx (–ª–æ–∫–∞–ª—å–Ω—ã–π, –Ω–æ –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π)
                    try:
                        text = recognizer.recognize_sphinx(audio_data, language='ru-RU')
                        return text
                    except sr.UnknownValueError:
                        return "[–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å (–ª–æ–∫–∞–ª—å–Ω–æ)]"
                    except sr.RequestError:
                        return "[—Å–µ—Ä–≤–∏—Å—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            return "[–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è]"

        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if 'temp_ogg_path' in locals():
                    os.unlink(temp_ogg_path)
                if 'temp_wav_path' in locals():
                    os.unlink(temp_wav_path)
            except:
                pass

    async def handle_audio_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        await self.handle_media_for_moderation(update, context, "audio")

    async def handle_video_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        await self.handle_media_for_moderation(update, context, "video")

    async def handle_media_for_moderation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, media_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        message = update.message

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user.id, user.username, user.first_name, user.last_name)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        if media_type == "audio":
            media = message.audio
            duration = getattr(media, 'duration', 0)
            file_size = getattr(media, 'file_size', 0)
            title = getattr(media, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            performer = getattr(media, 'performer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
        elif media_type == "video":
            media = message.video
            duration = getattr(media, 'duration', 0)
            file_size = getattr(media, 'file_size', 0)
            width = getattr(media, 'width', 0)
            height = getattr(media, 'height', 0)
        else:
            return

        # –ü–æ–ø—ã—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
        transcription = ""
        if media_type == "audio":
            transcription = await self.transcribe_audio_for_moderation(media, update)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        context.user_data['media_for_moderation'] = {
            'message_id': message.message_id,
            'chat_id': message.chat.id,
            'user_id': user.id,
            'media_type': media_type,
            'file_id': media.file_id,
            'duration': duration,
            'file_size': file_size,
            'transcription': transcription,
            'caption': message.caption or "",
            'timestamp': datetime.now()
        }

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞: {e}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –æ—Ç—Å—Ä–æ—á–∫–æ–π 8 —á–∞—Å–æ–≤
        scheduled_time = datetime.now() + timedelta(hours=8)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await self.notify_admins_for_moderation(context, user, media_type, transcription, message.caption or "")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'moderate_approve_now_{user.id}')],
            [InlineKeyboardButton("‚è∞ –û–¥–æ–±—Ä–∏—Ç—å —Å –æ—Ç—Å—Ä–æ—á–∫–æ–π (8 —á–∞—Å–æ–≤)", callback_data=f'moderate_approve_delay_{user.id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'moderate_reject_{user.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        await self.send_to_moderator_group(context, user, media_type, transcription, message.caption or "", reply_markup)

    async def transcribe_audio_for_moderation(self, audio, update):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        if not SPEECH_RECOGNITION_AVAILABLE:
            return "[–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞]"

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                temp_ogg_path = temp_ogg.name

            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            audio_file = await audio.get_file()
            await audio_file.download_to_drive(temp_ogg_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV –¥–ª—è speech_recognition
            temp_wav_path = temp_ogg_path.replace('.ogg', '.wav')

            if PYDUB_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                audio_seg = AudioSegment.from_ogg(temp_ogg_path)
                audio_seg.export(temp_wav_path, format='wav')
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                try:
                    subprocess.run([
                        'ffmpeg', '-i', temp_ogg_path, '-acodec', 'pcm_s16le',
                        '-ar', '16000', '-ac', '1', temp_wav_path
                    ], check=True, capture_output=True)
                except (subprocess.CalledProcessError, FileNotFoundError):
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    os.unlink(temp_ogg_path)
                    return "[–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏]"

            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            recognizer = sr.Recognizer()

            with sr.AudioFile(temp_wav_path) as source:
                audio_data = recognizer.record(source)

                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Google Speech Recognition (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                    text = recognizer.recognize_google(audio_data, language='ru-RU')
                    return text
                except sr.UnknownValueError:
                    return "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å]"
                except sr.RequestError:
                    # –ï—Å–ª–∏ Google API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Sphinx (–ª–æ–∫–∞–ª—å–Ω—ã–π, –Ω–æ –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π)
                    try:
                        text = recognizer.recognize_sphinx(audio_data, language='ru-RU')
                        return text
                    except sr.UnknownValueError:
                        return "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å (–ª–æ–∫–∞–ª—å–Ω–æ)]"
                    except sr.RequestError:
                        return "[–°–µ—Ä–≤–∏—Å—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return "[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ]"

        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if 'temp_ogg_path' in locals():
                    os.unlink(temp_ogg_path)
                if 'temp_wav_path' in locals():
                    os.unlink(temp_wav_path)
            except:
                pass

    async def notify_admins_for_moderation(self, context, user, media_type, transcription, caption):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        admin_ids = ADMIN_IDS.copy()

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —á–∞—Ç–∞
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —á–∞—Ç–∞

        for admin_id in admin_ids:
            try:
                notification_text = (
                    "üîî <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username if user.username else '–Ω–µ—Ç'})\n"
                    f"üÜî ID: {user.id}\n"
                    f"üìÅ –¢–∏–ø —Ñ–∞–π–ª–∞: {media_type}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {caption[:100]}{'...' if len(caption) > 100 else ''}\n"
                    f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription[:200]}{'...' if len(transcription) > 200 else ''}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."
                )

                await context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    async def send_to_moderator_group(self, context, user, media_type, transcription, caption, reply_markup):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —á–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        moderator_group_id = context.user_data['media_for_moderation']['chat_id']

        try:
            info_text = (
                "üîç <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (@{user.username if user.username else '–Ω–µ—Ç'})\n"
                f"üÜî ID: {user.id}\n"
                f"üìÅ –¢–∏–ø: {media_type.upper()}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {caption or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription or '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            await context.bot.send_message(
                chat_id=moderator_group_id,
                text=info_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ì–† =====

    def add_random_tile(self, board):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–ª–∏—Ç–∫—É (2 –∏–ª–∏ 4) –≤ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É"""
        empty_cells = [(i, j) for i in range(4) for j in range(4) if board[i][j] == 0]
        if empty_cells:
            i, j = random.choice(empty_cells)
            board[i][j] = 2 if random.random() < 0.9 else 4

    def move_2048(self, board, direction):
        """–î–≤–∏–≥–∞–µ—Ç –ø–ª–∏—Ç–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        def move_row_left(row):
            """–î–≤–∏–≥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–ª–µ–≤–æ"""
            new_row = [i for i in row if i != 0]
            for i in range(len(new_row) - 1):
                if new_row[i] == new_row[i + 1]:
                    new_row[i] *= 2
                    new_row[i + 1] = 0
            new_row = [i for i in new_row if i != 0]
            return new_row + [0] * (4 - len(new_row))

        moved = False
        score = 0

        if direction == 'left':
            for i in range(4):
                old_row = board[i][:]
                board[i] = move_row_left(board[i])
                if board[i] != old_row:
                    moved = True
        elif direction == 'right':
            for i in range(4):
                old_row = board[i][:]
                board[i] = move_row_left(board[i][::-1])[::-1]
                if board[i] != old_row:
                    moved = True
        elif direction == 'up':
            for j in range(4):
                col = [board[i][j] for i in range(4)]
                old_col = col[:]
                new_col = move_row_left(col)
                for i in range(4):
                    board[i][j] = new_col[i]
                if new_col != old_col:
                    moved = True
        elif direction == 'down':
            for j in range(4):
                col = [board[i][j] for i in range(4)]
                old_col = col[:]
                new_col = move_row_left(col[::-1])[::-1]
                for i in range(4):
                    board[i][j] = new_col[i]
                if new_col != old_col:
                    moved = True

        return moved, score

    def can_move_2048(self, board):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–∑–º–æ–∂–Ω—ã –ª–∏ —Ö–æ–¥—ã"""
        for i in range(4):
            for j in range(4):
                if board[i][j] == 0:
                    return True
                if i > 0 and board[i][j] == board[i-1][j]:
                    return True
                if j > 0 and board[i][j] == board[i][j-1]:
                    return True
        return False

    def check_2048_win(self, board):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–±–µ–¥—É (–Ω–∞–ª–∏—á–∏–µ 2048)"""
        return any(2048 in row for row in board)

    def create_2048_keyboard(self, board, score, game_over=False):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã 2048"""
        keyboard = []
        for i in range(4):
            row = []
            for j in range(4):
                cell = board[i][j]
                text = str(cell) if cell != 0 else ' '
                row.append(InlineKeyboardButton(text, callback_data=f'2048_cell_{i}_{j}'))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='2048_left'),
            InlineKeyboardButton("‚¨ÜÔ∏è", callback_data='2048_up'),
            InlineKeyboardButton("‚¨áÔ∏è", callback_data='2048_down'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data='2048_right')
        ])

        keyboard.append([
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_2048'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')
        ])

        return keyboard

    def get_random_tetris_piece(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ—Ç—Ä–∏—Å-—Ñ–∏–≥—É—Ä—É"""
        pieces = [
            {'shape': [[1, 1, 1, 1]], 'x': 3, 'y': 0},  # I
            {'shape': [[1, 1], [1, 1]], 'x': 4, 'y': 0},  # O
            {'shape': [[1, 0, 0], [1, 1, 1]], 'x': 3, 'y': 0},  # J
            {'shape': [[0, 0, 1], [1, 1, 1]], 'x': 3, 'y': 0},  # L
            {'shape': [[0, 1, 1], [1, 1, 0]], 'x': 3, 'y': 0},  # S
            {'shape': [[1, 1, 0], [0, 1, 1]], 'x': 3, 'y': 0},  # Z
            {'shape': [[0, 1, 0], [1, 1, 1]], 'x': 3, 'y': 0},  # T
        ]
        return random.choice(pieces)

    def is_valid_position(self, board, piece):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ñ–∏–≥—É—Ä—É –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        for i, row in enumerate(piece['shape']):
            for j, cell in enumerate(row):
                if cell:
                    x, y = piece['x'] + j, piece['y'] + i
                    if (x < 0 or x >= 10 or y >= 20 or
                        (y >= 0 and board[y][x] != 0)):
                        return False
        return True

    def place_piece(self, board, piece):
        """–†–∞–∑–º–µ—â–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –Ω–∞ –ø–æ–ª–µ"""
        for i, row in enumerate(piece['shape']):
            for j, cell in enumerate(row):
                if cell:
                    x, y = piece['x'] + j, piece['y'] + i
                    if 0 <= y < 20 and 0 <= x < 10:
                        board[y][x] = 1

    def clear_lines(self, board):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏"""
        lines_cleared = 0
        y = 19
        while y >= 0:
            if all(board[y]):
                del board[y]
                board.insert(0, [0] * 10)
                lines_cleared += 1
            else:
                y -= 1
        return lines_cleared

    def create_tetris_keyboard(self, board, piece, score, lines, game_over=False):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –¢–µ—Ç—Ä–∏—Å"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –ø–æ–ª—è
        display_board = board[-10:] if len(board) > 10 else board

        keyboard = []
        for row in display_board:
            display_row = []
            for cell in row:
                text = '‚¨õ' if cell else '‚¨ú'
                display_row.append(InlineKeyboardButton(text, callback_data='tetris_display'))
            keyboard.append(display_row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='tetris_left'),
            InlineKeyboardButton("üîÑ", callback_data='tetris_rotate'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data='tetris_right')
        ])
        keyboard.append([
            InlineKeyboardButton("‚¨áÔ∏è", callback_data='tetris_down'),
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_tetris'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')
        ])

        return keyboard

    def place_food(self, board, snake):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –µ–¥—É –≤ —Å–ª—É—á–∞–π–Ω–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ"""
        empty_cells = [(i, j) for i in range(10) for j in range(10) if (i, j) not in snake]
        if empty_cells:
            return random.choice(empty_cells)
        return None

    def create_snake_keyboard(self, board, snake, food, score, game_over=False):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –ó–º–µ–π–∫–∞"""
        keyboard = []
        for i in range(10):
            row = []
            for j in range(10):
                if (i, j) == food:
                    text = 'üçé'
                elif (i, j) in snake:
                    text = 'üü¢' if (i, j) == snake[0] else 'üü©'
                else:
                    text = '‚¨ú'
                row.append(InlineKeyboardButton(text, callback_data=f'snake_cell_{i}_{j}'))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='snake_left'),
            InlineKeyboardButton("‚¨ÜÔ∏è", callback_data='snake_up'),
            InlineKeyboardButton("‚¨áÔ∏è", callback_data='snake_down'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data='snake_right')
        ])

        keyboard.append([
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='game_snake'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data='cmd_play_game')
        ])

        return keyboard

    def check_profanity(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏"""
        text_lower = text.lower()
        for word in PROFANITY_WORDS:
            if word in text_lower:
                return True
        return False

    async def handle_profanity_violation(self, update, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π"""
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞—Ç–æ–º
        try:
            await update.message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç
        username = user.username if user.username else user.first_name
        await update.effective_chat.send_message(
            MODERATION_MESSAGES['profanity_detected'].format(username=username),
            parse_mode='HTML'
        )

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        db.add_warning(user.id, "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞", 0)  # 0 - —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

    async def handle_donation_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–æ–Ω–∞—Ç–æ–≤"""
        await query.answer()

        amount_str = query.data.split('_')[1]
        if amount_str == 'custom':
            # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            await query.edit_message_text(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='donate_cancel')]])
            )
            context.user_data['waiting_for_donation_amount'] = True
            return

        try:
            amount = float(amount_str)
            user = query.from_user

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if db.add_donation(user.id, amount):
                points = int(amount // 100)
                await query.edit_message_text(
                    DONATION_MESSAGES['donate_success'].format(
                        amount=amount,
                        currency='RUB',
                        points=points
                    ),
                    parse_mode='HTML'
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                current_year = datetime.now().year
                total_yearly = db.get_total_donations(user.id, current_year)
                achievements = db.check_and_unlock_achievements(user.id, donations=total_yearly)

                # –°–æ–æ–±—â–∞–µ–º –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
                for achievement in achievements:
                    if achievement in ACHIEVEMENT_MESSAGES:
                        await query.message.chat.send_message(
                            ACHIEVEMENT_MESSAGES[achievement].format(name=user.first_name),
                            parse_mode='HTML'
                        )
            else:
                await query.edit_message_text(DONATION_MESSAGES['donate_error'])

        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")

    async def handle_moderation_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞"""
        await query.answer()

        try:
            action, decision, user_id_str = query.data.split('_')
            user_id = int(user_id_str)
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        media_data = context.user_data.get('media_for_moderation')

        if not media_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        if media_data['user_id'] != user_id:
            await query.edit_message_text("‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if decision == "approve" and action == "moderate":
            # –û–¥–æ–±—Ä–µ–Ω–æ - –ø—É–±–ª–∏–∫—É–µ–º —Å–µ–π—á–∞—Å
            await self.publish_media_now(query, context, media_data)
        elif decision == "delay" and action == "moderate":
            # –û–¥–æ–±—Ä–µ–Ω–æ —Å –æ—Ç—Å—Ä–æ—á–∫–æ–π - –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ 8 —á–∞—Å–æ–≤
            await self.schedule_media_for_later(query, context, media_data)
        elif decision == "reject" and action == "moderate":
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
            await self.reject_media(query, context, media_data)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

    async def publish_media_now(self, query, context, media_data):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        try:
            chat_id = media_data['chat_id']

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = db.get_user_info(media_data['user_id'])
            user_name = user_info['–ò–º—è'] if user_info else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {media_data['user_id']}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if media_data['media_type'] == 'audio':
                text = f"üéµ –ê—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n\n{media_data['caption'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
                if media_data['transcription']:
                    text += f"\n\nüéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {media_data['transcription']}"
            else:  # video
                text = f"üé• –í–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n\n{media_data['caption'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"

            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
            # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='HTML'
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await query.edit_message_text(
                f"‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                f"üìÅ –¢–∏–ø: {media_data['media_type'].upper()}\n"
                f"üìù –¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}"
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
            context.user_data.pop('media_for_moderation', None)

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–¥–∏–∞: {str(e)[:100]}")

    async def schedule_media_for_later(self, query, context, media_data):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤"""
        try:
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤
            schedule_time = datetime.now() + timedelta(hours=8)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = db.get_user_info(media_data['user_id'])
            user_name = user_info['–ò–º—è'] if user_info else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {media_data['user_id']}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            if media_data['media_type'] == 'audio':
                text = f"üéµ –ê—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n\n{media_data['caption'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
                if media_data['transcription']:
                    text += f"\n\nüéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {media_data['transcription']}"
            else:  # video
                text = f"üé• –í–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n\n{media_data['caption'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤
            post_id = db.add_scheduled_post(
                chat_id=media_data['chat_id'],
                text=text,
                schedule_time=schedule_time.strftime('%Y-%m-%d %H:%M:%S'),
                created_by=0  # –°–∏—Å—Ç–µ–º–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            )

            if post_id:
                await query.edit_message_text(
                    f"‚è∞ –ú–µ–¥–∏–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
                    f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {schedule_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                    f"üìÅ –¢–∏–ø: {media_data['media_type'].upper()}\n"
                    f"üÜî –ü–æ—Å—Ç–∞: {post_id}"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞")

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
            context.user_data.pop('media_for_moderation', None)

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞: {str(e)[:100]}")

    async def reject_media(self, query, context, media_data):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = db.get_user_info(media_data['user_id'])
            user_name = user_info['–ò–º—è'] if user_info else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {media_data['user_id']}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                await context.bot.send_message(
                    chat_id=media_data['user_id'],
                    text="‚ùå –í–∞—à –º–µ–¥–∏–∞—Ñ–∞–π–ª –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –Ω–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {media_data['user_id']}: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await query.edit_message_text(
                f"‚ùå –ú–µ–¥–∏–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                f"üìÅ –¢–∏–ø: {media_data['media_type'].upper()}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
            context.user_data.pop('media_for_moderation', None)

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {str(e)[:100]}")

    async def report_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report_error <—Ç–∏–ø> <–∑–∞–≥–æ–ª–æ–≤–æ–∫> [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
                "–¢–∏–ø—ã –æ—à–∏–±–æ–∫:\n"
                "‚Ä¢ bug - –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
                "‚Ä¢ feature - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\n"
                "‚Ä¢ crash - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞/–ø–∞–¥–µ–Ω–∏–µ\n"
                "‚Ä¢ ui - –ø—Ä–æ–±–ª–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                "‚Ä¢ security - –ø—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
                "–ü—Ä–∏–º–µ—Ä: /report_error bug –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ /weather –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã..."
            )
            return

        error_type = context.args[0].lower()
        title = context.args[1]
        description = ' '.join(context.args[2:]) if len(context.args) > 2 else ""

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        valid_types = ['bug', 'feature', 'crash', 'ui', 'security', 'improvement', 'other']
        if error_type not in valid_types:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏: {error_type}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(valid_types)}"
            )
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(title.strip()) == 0:
            await update.message.reply_text("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        if len(title) > 200:
            await update.message.reply_text("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 2000:
            await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        priority_map = {
            'crash': 'critical',
            'security': 'high',
            'bug': 'medium',
            'ui': 'medium',
            'feature': 'low',
            'improvement': 'low',
            'other': 'medium'
        }
        priority = priority_map.get(error_type, 'medium')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        error_id = db.add_error(
            admin_id=user.id,
            error_type=error_type,
            title=title,
            description=description if description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
            priority=priority
        )

        if error_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await update.message.reply_text(
                "‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                f"üÜî ID –æ—à–∏–±–∫–∏: {error_id}\n"
                f"üìã –¢–∏–ø: {error_type}\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤ —É–ª—É—á—à–µ–Ω–∏–µ –±–æ—Ç–∞!"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            await self.send_developer_notification(
                context,
                f"üö® <b>–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ!</b>\n\n"
                f"üë§ –û—Ç: {admin_name}\n"
                f"üÜî ID –æ—à–∏–±–∫–∏: {error_id}\n"
                f"üìã –¢–∏–ø: {error_type}\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'}"
            )

        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def admin_errors(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ —Å—Ç–∞—Ç—É—Å—É)
        status_filter = None
        if context.args and len(context.args) > 0:
            status_filter = context.args[0].lower()
            valid_statuses = ['new', 'in_progress', 'resolved', 'rejected']
            if status_filter not in valid_statuses:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_filter}\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {', '.join(valid_statuses)}"
                )
                return

        # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        errors = db.get_errors(status=status_filter, limit=20)

        if not errors:
            status_text = f" —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status_filter}'" if status_filter else ""
            await update.message.reply_text(f"üì≠ –ù–µ—Ç –æ—à–∏–±–æ–∫{status_text}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö
        response = "üìã <b>–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏ –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"

        for error in errors:
            error_id, admin_id, error_type, title, description, status, priority, created_at, updated_at, ai_analysis, todo_added, resolved_at, admin_name, admin_username = error

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            type_emojis = {
                'bug': 'üêõ',
                'feature': '‚ú®',
                'crash': 'üí•',
                'ui': 'üé®',
                'security': 'üîí',
                'improvement': 'üìà',
                'other': 'üìù'
            }
            type_emoji = type_emojis.get(error_type, 'üìù')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_emojis = {
                'critical': 'üî¥',
                'high': 'üü†',
                'medium': 'üü°',
                'low': 'üîµ'
            }
            priority_emoji = priority_emojis.get(priority, 'üü°')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emojis = {
                'new': 'üÜï',
                'in_progress': 'üîÑ',
                'resolved': '‚úÖ',
                'rejected': '‚ùå'
            }
            status_emoji = status_emojis.get(status, '‚ùì')

            admin_display = admin_username if admin_username else admin_name if admin_name else f"ID:{admin_id}"

            response += (
                f"{type_emoji} <b>#{error_id}</b> {priority_emoji} {status_emoji}\n"
                f"üìù <b>{title}</b>\n"
                f"üë§ {admin_display} | üìÖ {created_at[:10]}\n"
                f"üìã –¢–∏–ø: {error_type} | –°—Ç–∞—Ç—É—Å: {status}\n"
            )

            if description and len(description) > 100:
                response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...\n"
            elif description:
                response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"

            response += "\n" + "‚îÄ" * 40 + "\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–ª–∏–Ω–∞ –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(response) > 4000:
            response = response[:3997] + "..."

        await update.message.reply_text(response, parse_mode='HTML')

    async def handle_plus_reaction(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å '+'"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª '+'
            if message.text and '+' in message.text:
                # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è
                await message.set_reaction("ü§ù")
                print(f"Reaction set for message from {message.from_user.first_name}")
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ Telegram)
            print(f"Could not set reaction: {e}")

    async def send_developer_notification(self, context, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–µ"""
        if not ENABLE_DEVELOPER_NOTIFICATIONS or not DEVELOPER_CHAT_ID:
            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω DEVELOPER_CHAT_ID")
            return False

        try:
            await context.bot.send_message(
                chat_id=DEVELOPER_CHAT_ID,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {e}")
            return False

    async def notify_error_status_change(self, context, error_id, old_status, new_status, admin_name, error_title):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏"""
        if not ENABLE_DEVELOPER_NOTIFICATIONS or not DEVELOPER_CHAT_ID:
            return False

        status_emojis = {
            'new': 'üÜï',
            'in_progress': 'üîÑ',
            'resolved': '‚úÖ',
            'rejected': '‚ùå'
        }

        old_emoji = status_emojis.get(old_status, '‚ùì')
        new_emoji = status_emojis.get(new_status, '‚ùì')

        notification_text = (
            "üîÑ <b>–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"üÜî ID –æ—à–∏–±–∫–∏: {error_id}\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {error_title}\n"
            f"üë§ –ò–∑–º–µ–Ω–∏–ª: {admin_name}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {old_emoji} {old_status} ‚Üí {new_emoji} {new_status}\n"
            f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        return await self.send_developer_notification(context, notification_text)

    async def process_error_with_ai(self, error_id, error_type, title, description):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        if not ENABLE_AI_ERROR_PROCESSING or not OPENAI_API_KEY:
            print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OPENAI_API_KEY")
            return None

        try:
            import openai

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞
            client = openai.OpenAI(api_key=OPENAI_API_KEY)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ—à–∏–±–∫—É –±–æ—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:

            –¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}
            –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
            –û–ø–∏—Å–∞–Ω–∏–µ: {description}

            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
            1. –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, –≤—ã—Å–æ–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, –Ω–∏–∑–∫–∞—è)
            2. –ü–†–ò–ß–ò–ù–ê: –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            3. –†–ï–®–ï–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ —à–∞–≥–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            4. –ü–†–û–§–ò–õ–ê–ö–¢–ò–ö–ê: –ö–∞–∫ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –±—É–¥—É—â–µ–º
            5. –¢–≠–ì–ò: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)

            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
            """

            # –í—ã–∑–æ–≤ OpenAI API
            response = client.chat.completions.create(
                model=AI_MODEL,
                messages=[
                    {"role": "system", "content": "–í—ã - –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –æ—à–∏–±–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —á–µ—Ç–∫–∏–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7
            )

            ai_analysis = response.choices[0].message.content.strip()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if db.update_error_ai_analysis(error_id, ai_analysis):
                print(f"–ê–Ω–∞–ª–∏–∑ –ò–ò –¥–ª—è –æ—à–∏–±–∫–∏ #{error_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return ai_analysis
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò –¥–ª—è –æ—à–∏–±–∫–∏ #{error_id}")
                return None

        except ImportError:
            print("OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –ò–ò: {e}")
            return None

    async def analyze_error_with_ai(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        if len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze_error_ai <ID_–æ—à–∏–±–∫–∏>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /analyze_error_ai 1"
            )
            return

        try:
            error_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        error_data = db.get_error_by_id(error_id)
        if not error_data:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å ID {error_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        error_id, admin_id, error_type, title, description, status, priority, created_at, updated_at, ai_analysis, todo_added, resolved_at, admin_name, admin_username = error_data

        if ai_analysis:
            await update.message.reply_text(
                f"ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ #{error_id} (–ò–ò)</b>\n\n"
                f"üìã –¢–∏–ø: {error_type}\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"üìÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑:\n{ai_analysis}",
                parse_mode='HTML'
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text(
            f"ü§ñ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ #{error_id} —Å –ø–æ–º–æ—â—å—é –ò–ò...\n"
            f"üìã –¢–∏–ø: {error_type}\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
        ai_analysis = await self.process_error_with_ai(error_id, error_type, title, description)

        if ai_analysis:
            await update.message.reply_text(
                f"‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ #{error_id} (–ò–ò):</b>\n\n"
                f"üìã –¢–∏–ø: {error_type}\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"üìÑ –ê–Ω–∞–ª–∏–∑:\n{ai_analysis}",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
            )

    async def process_all_new_errors_ai(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏
        new_errors = db.get_errors(status='new', limit=10)

        if not new_errors:
            await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò")
            return

        await update.message.reply_text(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(new_errors)} –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò...")

        processed_count = 0
        failed_count = 0

        for error in new_errors:
            error_id, admin_id, error_type, title, description, status, priority, created_at, updated_at, ai_analysis, todo_added, resolved_at, admin_name, admin_username = error

            if not ai_analysis:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
                ai_analysis = await self.process_error_with_ai(error_id, error_type, title, description)
                if ai_analysis:
                    processed_count += 1
                else:
                    failed_count += 1

        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_text = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}\n‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}"
        await update.message.reply_text(result_text)

    async def add_error_to_todo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ TODO —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        if len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_error_to_todo <ID_–æ—à–∏–±–∫–∏> [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç]\n\n"
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): high, medium, low\n"
                "–ü—Ä–∏–º–µ—Ä: /add_error_to_todo 1 high"
            )
            return

        try:
            error_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        priority = context.args[1].lower() if len(context.args) > 1 else 'medium'
        valid_priorities = ['high', 'medium', 'low']
        if priority not in valid_priorities:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_priorities)}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        error_data = db.get_error_by_id(error_id)
        if not error_data:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å ID {error_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        error_id, admin_id, error_type, title, description, status, priority, created_at, updated_at, ai_analysis, todo_added, resolved_at, admin_name, admin_username = error_data

        if todo_added:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ #{error_id} —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ TODO —Å–ø–∏—Å–æ–∫")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ TODO —Å–ø–∏—Å–æ–∫
        success = self.add_error_to_todo_file(error_id, title, error_type, priority, ai_analysis)

        if success:
            # –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –≤ TODO
            db.mark_error_todo_added(error_id)

            await update.message.reply_text(
                f"‚úÖ –û—à–∏–±–∫–∞ #{error_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ TODO —Å–ø–∏—Å–æ–∫!\n\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"üìã –¢–∏–ø: {error_type}\n"
                f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ TODO —Å–ø–∏—Å–æ–∫")

    def add_error_to_todo_file(self, error_id, title, error_type, priority, ai_analysis=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ TODO —Ñ–∞–π–ª"""
        try:
            todo_file_path = 'TODO.md'

            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª TODO
            with open(todo_file_path, 'r', encoding='utf-8') as file:
                content = file.read()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            priority_sections = {
                'high': '## üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ (High Priority)',
                'medium': '## üéØ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (Medium Priority)',
                'low': '## üîÆ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (Low Priority)'
            }

            section_title = priority_sections.get(priority, priority_sections['medium'])
            task_text = f"- [ ] #{error_id} {title} (–¢–∏–ø: {error_type})"

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ò–ò, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if ai_analysis:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
                lines = ai_analysis.split('\n')
                for line in lines[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
                    if line.strip() and not line.startswith(('1.', '2.', '3.', '4.', '5.')):
                        task_text += f" - {line.strip()}"

            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            lines = content.split('\n')
            insert_index = -1

            for i, line in enumerate(lines):
                if line.startswith(section_title):
                    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏–ª–∏ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ
                    for j in range(i + 1, len(lines)):
                        next_line = lines[j]
                        if next_line.startswith('### ') and '–°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫' in next_line:
                            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–º "–°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫"
                            insert_index = j
                            break
                        elif next_line.startswith('## ') and next_line != lines[i]:
                            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–æ–º
                            insert_index = j
                            break
                    if insert_index == -1:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Å—Ç–æ, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞
                        insert_index = len(lines)
                    break

            if insert_index == -1:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                insert_index = len(lines)

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            lines.insert(insert_index, task_text)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(todo_file_path, 'w', encoding='utf-8') as file:
                file.write('\n'.join(lines))

            print(f"–û—à–∏–±–∫–∞ #{error_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ TODO —Å–ø–∏—Å–æ–∫")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≤ TODO —Ñ–∞–π–ª: {e}")
            return False

    async def add_all_analyzed_errors_to_todo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ TODO —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(update.effective_chat, user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ò–ò, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ TODO
        all_errors = db.get_errors(limit=50)

        errors_to_add = []
        for error in all_errors:
            error_id, admin_id, error_type, title, description, status, priority, created_at, updated_at, ai_analysis, todo_added, resolved_at, admin_name, admin_username = error

            if ai_analysis and not todo_added:
                errors_to_add.append((error_id, title, error_type, priority, ai_analysis))

        if not errors_to_add:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ TODO —Å–ø–∏—Å–æ–∫")
            return

        await update.message.reply_text(f"üìù –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(errors_to_add)} –æ—à–∏–±–æ–∫ –≤ TODO —Å–ø–∏—Å–æ–∫...")

        added_count = 0
        failed_count = 0

        for error_id, title, error_type, priority, ai_analysis in errors_to_add:
            success = self.add_error_to_todo_file(error_id, title, error_type, priority, ai_analysis)
            if success:
                db.mark_error_todo_added(error_id)
                added_count += 1
            else:
                failed_count += 1

        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_text = (
            f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ TODO: {added_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}"
        )
        await update.message.reply_text(result_text)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("Bot started!")
        self.application.run_polling()

if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()