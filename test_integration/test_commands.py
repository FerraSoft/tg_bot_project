"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ /start, /help, /info –≤ –ø–æ–ª–Ω–æ–π —Å—Ä–µ–¥–µ.
"""

import pytest
import tempfile
import os
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.application import Application
from core.config import Config


class TestCommandsIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

    @pytest.fixture
    def temp_config(self):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
            f.write("""
BOT_TOKEN = "123456789:integration_test_token"
ADMIN_IDS = [123456789, 987654321]
OPENWEATHER_API_KEY = "test_key"
NEWS_API_KEY = "test_key"
OPENAI_API_KEY = "test_key"
""")
            config_path = f.name

        yield config_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(config_path):
            os.unlink(config_path)

    @pytest.fixture
    def temp_db(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–∞–±–ª–∏—Ü"""
        from database.models import DatabaseSchema
        from database.repository import UserRepository, ScoreRepository

        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        repo = UserRepository(db_path)
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            for table_sql in DatabaseSchema.get_create_tables_sql():
                repo._execute_query(table_sql)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            repo.initialize_achievements()

        finally:
            repo.close()

        yield db_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(db_path):
            os.unlink(db_path)


    @pytest.fixture
    def mock_update(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        update = Mock()

        # –ú–æ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Mock()
        user.id = 123456789
        user.username = "test_user"
        user.first_name = "Test"
        user.last_name = "User"
        update.effective_user = user

        # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Mock()
        message.message_id = 1
        message.reply_text = AsyncMock()
        update.message = message

        # –ú–æ–∫–∞–µ–º —á–∞—Ç
        chat = Mock()
        chat.id = -1001234567890
        update.effective_chat = chat

        return update

    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.args = []

        # –ú–æ–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Mock()
        app._date_time = datetime.now()
        context._application = app

        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞
        bot = AsyncMock()
        context.bot = bot

        context.user_data = {}

        return context

    @pytest.mark.asyncio
    async def test_start_command_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        from handlers.user_handlers import UserHandlers
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
            await user_handlers.handle_start(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫)
            assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" not in response_text  # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∏
            assert isinstance(response_text, str)
            assert len(response_text) > 0
            # –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_start_command_keyboard_creation(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start"""
        from handlers.user_handlers import UserHandlers
        from services.user_service import UserService
        from database.repository import UserRepository, ScoreRepository
        from core.config import Config

        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, config, user_service)

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ KeyboardFormatter
            from utils.formatters import KeyboardFormatter
            keyboard = KeyboardFormatter.create_main_menu()
            assert keyboard is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_start_command_without_user_service(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –≤—ã–∑–æ–≤–∞ user_service (–≥–∏–ø–æ—Ç–µ–∑–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ)"""
        from handlers.user_handlers import UserHandlers
        from services.user_service import UserService
        from database.repository import UserRepository, ScoreRepository
        from core.config import Config

        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, config, user_service)

        try:
            # –í—ã–∑—ã–≤–∞–µ–º _handle_start –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ safe_execute
            await user_handlers._handle_start(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
            assert isinstance(response_text, str)
            assert len(response_text) > 0
            assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in response_text

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_help_command_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º metrics –æ–±—ä–µ–∫—Ç–æ–º
        from handlers.user_handlers import UserHandlers
        from core.monitoring import MetricsCollector
        metrics = MetricsCollector(config)
        user_handlers = UserHandlers(config, metrics, user_service)

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /help
            await user_handlers.handle_help(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º)
            assert "üìã" in response_text
            assert "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞" in response_text
            assert "/start" in response_text
            assert "/help" in response_text
            assert "/rank" in response_text
            assert "/leaderboard" in response_text
            assert "/info" in response_text
            assert "/weather" in response_text
            assert "/news" in response_text

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_info_command_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /info"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º metrics –æ–±—ä–µ–∫—Ç–æ–º
        from handlers.user_handlers import UserHandlers
        from core.monitoring import MetricsCollector
        metrics = MetricsCollector(config)
        user_handlers = UserHandlers(config, metrics, user_service)

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /info
            await user_handlers.handle_info(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            assert isinstance(response_text, str)
            assert len(response_text) > 0
            # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É, –Ω–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_info_command_admin_view(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /info —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º metrics –æ–±—ä–µ–∫—Ç–æ–º
        from handlers.user_handlers import UserHandlers
        from core.monitoring import MetricsCollector
        metrics = MetricsCollector(config)
        user_handlers = UserHandlers(config, metrics, user_service)

        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            mock_context.args = ['987654321']  # ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /info —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
            await user_handlers.handle_info(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            # (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º)
            assert isinstance(response_text, str)

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_commands_with_error_handling(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º metrics –æ–±—ä–µ–∫—Ç–æ–º
        from handlers.user_handlers import UserHandlers
        from core.monitoring import MetricsCollector
        metrics = MetricsCollector(config)
        user_handlers = UserHandlers(config, metrics, user_service)

        try:
            # –ú–æ–∫–∞–µ–º —Å–±–æ–π –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_service.get_or_create_user = AsyncMock(side_effect=Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞"))

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /start, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
            await user_handlers.handle_start(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in response_text
            assert "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ" in response_text

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_command_response_format(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º metrics –æ–±—ä–µ–∫—Ç–æ–º
        from handlers.user_handlers import UserHandlers
        from core.monitoring import MetricsCollector
        metrics = MetricsCollector(config)
        user_handlers = UserHandlers(config, metrics, user_service)

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            commands_to_test = [
                (user_handlers.handle_start, "start"),
                (user_handlers.handle_help, "help"),
                (user_handlers.handle_info, "info")
            ]

            for handle_command, command_name in commands_to_test:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
                mock_update.message.reply_text.reset_mock()

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                await handle_command(mock_update, mock_context)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                mock_update.message.reply_text.assert_called_once()

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                call_args = mock_update.message.reply_text.call_args
                response_text = call_args[0][0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                assert isinstance(response_text, str)
                assert len(response_text) > 0
                assert not response_text.isspace()

                # –î–ª—è –∫–æ–º–∞–Ω–¥ help –∏ info –ø—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É (—É–±—Ä–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML)
                # if command_name in ['help', 'info']:
                #     assert '<b>' in response_text or '</b>' in response_text

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_user_creation_on_commands(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        from handlers.user_handlers import UserHandlers
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
            await user_handlers.handle_start(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            assert profile.user_id == 123456789
            assert profile.username == "test_user"
            assert profile.first_name == "Test"
            assert profile.last_name == "User"
            assert profile.rank == "–ù–æ–≤–∏—á–æ–∫"
            assert profile.reputation == 0

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_database_schema_integrity(self, temp_config, temp_db):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å–æ–≥–ª–∞—Å–Ω–æ DatabaseSchema"""
        from database.models import DatabaseSchema
        from database.repository import BaseRepository

        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Ö–µ–º—ã
        expected_tables = DatabaseSchema.get_table_names()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        repo = BaseRepository(temp_db)
        try:
            existing_tables = []
            for table_name in expected_tables:
                try:
                    # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ
                    result = repo._fetch_one(f"SELECT COUNT(*) as count FROM {table_name}", ())
                    existing_tables.append(table_name)
                except Exception:
                    # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞
                    pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            missing_tables = [t for t in expected_tables if t not in existing_tables]
            assert len(missing_tables) == 0, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            user_columns = repo._fetch_all("PRAGMA table_info(users)", ())
            user_column_names = [col['name'] for col in user_columns]
            required_user_columns = ['id', 'telegram_id', 'username', 'first_name', 'reputation', 'rank']
            for col in required_user_columns:
                assert col in user_column_names, f"–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫—É {col}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É scores
            score_columns = repo._fetch_all("PRAGMA table_info(scores)", ())
            score_column_names = [col['name'] for col in score_columns]
            required_score_columns = ['id', 'user_id', 'total_score', 'message_count']
            for col in required_score_columns:
                assert col in score_column_names, f"–¢–∞–±–ª–∏—Ü–∞ scores –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫—É {col}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã scores
            foreign_keys = repo._fetch_all("PRAGMA foreign_key_list(scores)", ())
            assert len(foreign_keys) > 0, "–¢–∞–±–ª–∏—Ü–∞ scores –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏"
            assert any(fk['table'] == 'users' for fk in foreign_keys), "–¢–∞–±–ª–∏—Ü–∞ scores –¥–æ–ª–∂–Ω–∞ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ users"

        finally:
            repo.close()

    @pytest.mark.asyncio
    async def test_database_table_constraints(self, temp_config, temp_db):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        from database.repository import UserRepository, ScoreRepository

        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ telegram_id –≤ users
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user1_data = {
                'telegram_id': 111111111,
                'username': 'user1',
                'first_name': 'User',
                'last_name': 'One',
                'joined_date': datetime.now(),
                'last_activity': datetime.now()
            }
            user_repo.create_user(user1_data)

            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–º –∂–µ telegram_id (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
            user2_data = {
                'telegram_id': 111111111,  # –¢–æ—Ç –∂–µ ID
                'username': 'user2',
                'first_name': 'User',
                'last_name': 'Two',
                'joined_date': datetime.now(),
                'last_activity': datetime.now()
            }

            with pytest.raises(Exception):  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞—Ä—É—à–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                user_repo.create_user(user2_data)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –≤ scores
            # –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user = user_repo.get_by_id(111111111)
            assert existing_user is not None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ scores —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            score_data = score_repo.get_total_score(111111111)
            assert score_data >= 0  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º NOT NULL –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å NULL –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
            # –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ telegram_id
                user_repo._execute_query(
                    "INSERT INTO users (username, first_name) VALUES (?, ?)",
                    ('test', 'Test')
                )
                assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ NOT NULL –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
            except Exception:
                pass  # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç PRIMARY KEY
            tables_to_check = ['users', 'scores', 'errors', 'scheduled_posts', 'achievements', 'warnings', 'donations']
            for table in tables_to_check:
                pk_info = user_repo._fetch_all(f"PRAGMA table_info({table})", ())
                has_primary_key = any(col['pk'] == 1 for col in pk_info)
                assert has_primary_key, f"–¢–∞–±–ª–∏—Ü–∞ {table} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å PRIMARY KEY"

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_database_relationships_integrity(self, temp_config, temp_db):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
        from database.repository import UserRepository, ScoreRepository
        from services.user_service import UserService

        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            test_user_id = 999999999

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            user_profile = await user_service.get_or_create_user(
                test_user_id, 'testuser', 'Test', 'User'
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
            # user_profile.user_id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            assert user_profile.user_id is not None  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            assert user_profile.username == 'testuser'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ scores
            user_data = user_repo.get_by_id(test_user_id)
            assert user_data is not None
            assert 'total_score' in user_data
            assert 'message_count' in user_data

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ JOIN –∑–∞–ø—Ä–æ—Å
            join_query = """
                SELECT u.telegram_id, s.total_score, s.message_count
                FROM users u
                LEFT JOIN scores s ON u.id = s.user_id
                WHERE u.telegram_id = ?
            """
            join_result = user_repo._fetch_one(join_query, (test_user_id,))
            assert join_result is not None
            assert join_result['telegram_id'] == test_user_id
            assert join_result['total_score'] == 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            assert join_result['message_count'] == 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = score_repo.update_score(test_user_id, 10)
            assert success

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å
            updated_score = score_repo.get_total_score(test_user_id)
            assert updated_score == 10

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ JOIN
            updated_join = user_repo._fetch_one(join_query, (test_user_id,))
            assert updated_join['total_score'] == 10

        finally:
            user_repo.close()
            score_repo.close()
            score_repo.close()