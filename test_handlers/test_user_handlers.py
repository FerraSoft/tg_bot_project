"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import pytest
from datetime import datetime
from unittest.mock import Mock, AsyncMock, patch
from telegram import Update, User, Message, Chat
from telegram.ext import ContextTypes
from handlers.user_handlers import UserHandlers
from services.user_service import UserService, UserProfile
from core.exceptions import ValidationError, PermissionError


class TestUserHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""

    @pytest.fixture
    def mock_user_service(self):
        """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        service = Mock(spec=UserService)
        service.get_or_create_user = AsyncMock()
        service.update_user_activity = AsyncMock()
        service.get_top_users = AsyncMock()
        service.get_rank_progress = Mock()
        from core.permissions import UserRole
        service.get_user_role_enum = Mock()
        service.get_user_role_enum.return_value = UserRole.USER

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        service.get_top_users.return_value = []
        service.get_rank_progress.return_value = {
            'current_rank': '–£—á–µ–Ω–∏–∫',
            'next_rank': '–ê–∫—Ç–∏–≤–∏—Å—Ç',
            'percentage': 75.0,
            'progress': 75,
            'needed': 100
        }

        return service

    @pytest.fixture
    def user_handlers(self, test_config, mock_user_service):
        """–≠–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        from unittest.mock import Mock
        mock_metrics = Mock()
        return UserHandlers(test_config, mock_metrics, mock_user_service)

    @pytest.fixture
    def mock_update(self, mock_user, mock_chat, mock_message):
        """–ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        update = Mock(spec=Update)
        update.effective_user = mock_user
        update.effective_chat = mock_chat
        update.message = mock_message
        return update

    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        context.args = []
        context.user_data = {}
        return context

    @pytest.mark.asyncio
    async def test_handle_start_success(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = UserProfile(
            user_id=123456789,
            username="test_user",
            first_name="Test",
            last_name="User",
            reputation=100,
            rank="–ê–∫—Ç–∏–≤–∏—Å—Ç"
        )
        mock_user_service.get_or_create_user.return_value = profile

        # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        mock_update.message.reply_text = AsyncMock()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
        await user_handlers.handle_start(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω
        mock_user_service.get_or_create_user.assert_called_once_with(
            123456789, "test_user", "Test", "User"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_update.message.reply_text.assert_called_once()
        reply_text = mock_update.message.reply_text.call_args[0][0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        assert "–ü—Ä–∏–≤–µ—Ç, Test!" in reply_text
        assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!" in reply_text

    @pytest.mark.asyncio
    async def test_handle_rank_success(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /rank"""
        # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = UserProfile(
            user_id=123456789,
            username="test_user",
            first_name="Test",
            last_name="User",
            reputation=150,
            rank="–ê–∫—Ç–∏–≤–∏—Å—Ç",
            message_count=45,
            warnings=2
        )
        mock_user_service.get_or_create_user.return_value = profile

        # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–Ω–≥–∞
        rank_progress = {
            'current_rank': '–ê–∫—Ç–∏–≤–∏—Å—Ç',
            'next_rank': '–ó–Ω–∞—Ç–æ–∫',
            'percentage': 75.0
        }
        mock_user_service.get_rank_progress.return_value = rank_progress

        # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        mock_update.message.reply_text = AsyncMock()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
        await user_handlers.handle_rank(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Å–µ—Ä–≤–∏—Å–∞
        mock_user_service.get_or_create_user.assert_called_once_with(
            123456789, "test_user", "Test", "User"
        )
        mock_user_service.get_rank_progress.assert_called_once_with(150)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        mock_update.message.reply_text.assert_called_once()
        reply_text = mock_update.message.reply_text.call_args[0][0]

        assert "–í–∞—à —Ä–∞–Ω–≥:" in reply_text
        assert "–û—á–∫–∏: 150" in reply_text
        assert "–†–∞–Ω–≥: –ê–∫—Ç–∏–≤–∏—Å—Ç" in reply_text
        assert "–°–æ–æ–±—â–µ–Ω–∏–π: 45" in reply_text

    @pytest.mark.asyncio
    async def test_handle_leaderboard_success(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = [
            (111, "user1", "User One", 100),
            (222, "user2", "User Two", 90),
            (333, None, "User Three", 80)
        ]
        mock_user_service.get_top_users.return_value = top_users

        # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        mock_update.message.reply_text = AsyncMock()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
        await user_handlers.handle_leaderboard(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
        mock_user_service.get_top_users.assert_called_once_with(10)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        mock_update.message.reply_text.assert_called_once()
        reply_text = mock_update.message.reply_text.call_args[0][0]

        assert "üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>" in reply_text
        assert "ü•á <b>user1</b> - 100 –æ—á–∫–æ–≤" in reply_text
        assert "ü•à <b>user2</b> - 90 –æ—á–∫–æ–≤" in reply_text
        assert "ü•â <b>User Three</b> - 80 –æ—á–∫–æ–≤" in reply_text

    @pytest.mark.asyncio
    async def test_handle_leaderboard_empty(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /leaderboard —Å –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
        mock_user_service.get_top_users.return_value = []
        mock_update.message.reply_text = AsyncMock()

        await user_handlers.handle_leaderboard(mock_update, mock_context)

        reply_text = mock_update.message.reply_text.call_args[0][0]
        assert "üì≠ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞" in reply_text

    @pytest.mark.asyncio
    async def test_handle_info_own_profile(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /info –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = UserProfile(
            user_id=123456789,
            username="test_user",
            first_name="Test",
            last_name="User",
            reputation=150,
            rank="–ê–∫—Ç–∏–≤–∏—Å—Ç",
            message_count=45,
            warnings=1,
            joined_date=datetime.now()
        )
        mock_user_service.get_or_create_user.return_value = profile

        # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        mock_update.message.reply_text = AsyncMock()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
        await user_handlers.handle_info(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
        mock_user_service.get_or_create_user.assert_called_once_with(
            123456789, "test_user", "Test", "User"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        reply_text = mock_update.message.reply_text.call_args[0][0]
        assert "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>" in reply_text
        assert "üÜî ID: 123456789" in reply_text
        assert "üë§ –ò–º—è: Test" in reply_text
        assert "üì± Username: @test_user" in reply_text

    @pytest.mark.asyncio
    async def test_handle_info_other_user_admin(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /info –¥–ª—è —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_context.args = ["987654321"]

        # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_profile = UserProfile(
            user_id=987654321,
            username="other_user",
            first_name="Other",
            last_name="User",
            reputation=200,
            rank="–≠–∫—Å–ø–µ—Ä—Ç"
        )
        mock_user_service.get_or_create_user.return_value = other_profile

        # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        mock_update.message.reply_text = AsyncMock()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
        await user_handlers.handle_info(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        mock_user_service.get_or_create_user.assert_called_once_with(
            987654321, None, None, None  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω —Å ID –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ None
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        reply_text = mock_update.message.reply_text.call_args[0][0]
        assert "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>" in reply_text
        assert "üÜî ID: 987654321" in reply_text
        assert "üë§ –ò–º—è: Other" in reply_text
        assert "üì± Username: @other_user" in reply_text

    @pytest.mark.asyncio
    async def test_handle_text_message_with_plus(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª—é—Å–æ–º"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª—é—Å–æ–º
        mock_update.message.text = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! +"

        # –ú–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        mock_user_service.update_user_activity.return_value = {'activity_updated': True}

        # –ú–æ–∫–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é
        mock_update.message.set_reaction = AsyncMock()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await user_handlers.handle_text_message(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        mock_update.message.set_reaction.assert_called_once_with("ü§ù")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        mock_user_service.update_user_activity.assert_called_once_with(
            123456789, -1001234567890
        )

    @pytest.mark.asyncio
    async def test_handle_text_message_without_plus(self, user_handlers, mock_update, mock_context, mock_user_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø–ª—é—Å–∞"""
        mock_update.message.text = "–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–ª—é—Å–∞"
        mock_user_service.update_user_activity.return_value = {'activity_updated': True}
        mock_update.message.set_reaction = AsyncMock()

        await user_handlers.handle_text_message(mock_update, mock_context)

        # –†–µ–∞–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        mock_update.message.set_reaction.assert_not_called()

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        mock_user_service.update_user_activity.assert_called_once()

    @pytest.mark.asyncio
    async def test_safe_execute_with_exception(self, user_handlers, mock_update, mock_context):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º"""
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        async def failing_function(update, context):
            raise ValidationError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await user_handlers.safe_execute(
            mock_update, mock_context, "test_action", failing_function
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_update.message.reply_text.assert_called_once()
        error_text = mock_update.message.reply_text.call_args[0][0]
        assert "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏" in error_text

    @pytest.mark.asyncio
    async def test_is_admin_true(self, user_handlers, mock_update, test_config):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        test_config.bot_config.admin_ids = [123456789]

        # –ú–æ–∫–∏—Ä—É–µ–º permission_manager –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ADMIN —Ä–æ–ª–∏
        from unittest.mock import patch
        from core.permissions import UserRole
        with patch('core.permissions.permission_manager.get_effective_role', return_value=UserRole.ADMIN):
            is_admin = await user_handlers.is_admin(mock_update, 123456789)
            assert is_admin is True

    @pytest.mark.asyncio
    async def test_is_admin_false(self, user_handlers, mock_update, test_config):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"""
        test_config.bot_config.admin_ids = [999999999]  # –î—Ä—É–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

        # –ú–æ–∫–∏—Ä—É–µ–º permission_manager –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ USER —Ä–æ–ª–∏
        from unittest.mock import patch
        from core.permissions import UserRole
        with patch('core.permissions.permission_manager.get_effective_role', return_value=UserRole.USER):
            is_admin = await user_handlers.is_admin(mock_update, 123456789)
            assert is_admin is False

    def test_extract_user_id_from_args_valid(self, user_handlers):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        user_id = user_handlers.extract_user_id_from_args(["123456789"])
        assert user_id == 123456789

    def test_extract_user_id_from_args_invalid(self, user_handlers):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        user_id = user_handlers.extract_user_id_from_args(["not_a_number"])
        assert user_id is None

        user_id = user_handlers.extract_user_id_from_args([])
        assert user_id is None

    def test_extract_amount_from_args(self, user_handlers):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        amount = user_handlers.extract_amount_from_args(["100.5"])
        assert amount == 100.5

        amount = user_handlers.extract_amount_from_args(["0"])
        assert amount is None  # –ù—É–ª–µ–≤–∞—è —Å—É–º–º–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞

        amount = user_handlers.extract_amount_from_args([])
        assert amount is None

    def test_validate_user_id(self, user_handlers):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
        assert user_handlers.validate_user_id("123456789") == 123456789

        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
        with pytest.raises(ValidationError):
            user_handlers.validate_user_id("not_a_number")

        with pytest.raises(ValidationError):
            user_handlers.validate_user_id("0")

    def test_format_user_mention(self, user_handlers):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mention = user_handlers.format_user_mention(123456789, "Test User")
        assert mention == "[Test User](tg://user?id=123456789)"