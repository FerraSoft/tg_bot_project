"""
–¢–µ—Å—Ç—ã –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.
"""

import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch, Mock

from handlers.ai_handlers import AIHandlers
from services.ai_service import ai_integration


class TestAIHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    @pytest.fixture
    def mock_bot(self):
        """–ú–æ–∫–∞–µ–º –±–æ—Ç–∞"""
        bot = AsyncMock()
        return bot

    @pytest.fixture
    def mock_user_service(self):
        """–ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        service = AsyncMock()
        service.get_user_role_enum_async.return_value = MagicMock()  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å USER
        return service

    @pytest.fixture
    def ai_handlers(self, mock_bot, mock_user_service):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        return AIHandlers(mock_bot, mock_user_service)

    @pytest.mark.asyncio
    async def test_handle_gigachat_command_no_args(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /gigachat –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        message = Mock()
        message.get_args.return_value = ""
        message.reply = AsyncMock()

        await ai_handlers.handle_gigachat_command(message)

        message.reply.assert_called_once()
        call_args = message.reply.call_args[0][0]
        assert "GigaChat" in call_args
        assert "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:" in call_args

    @pytest.mark.asyncio
    async def test_handle_gigachat_command_with_args(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /gigachat —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.get_args.return_value = "test query"
        message.chat = Mock()
        message.chat.id = 456
        message.reply = AsyncMock()

        with patch.object(ai_integration, 'generate_response', return_value="Test response") as mock_generate:
            await ai_handlers.handle_gigachat_command(message)

            mock_generate.assert_called_once_with('gigachat', 'test query', 123)
            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]
            assert "GigaChat:" in call_args
            assert "Test response" in call_args

    @pytest.mark.asyncio
    async def test_handle_yandexgpt_command_no_args(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /yandexgpt –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        message = Mock()
        message.get_args.return_value = ""
        message.reply = AsyncMock()

        await ai_handlers.handle_yandexgpt_command(message)

        message.reply.assert_called_once()
        call_args = message.reply.call_args[0][0]
        assert "YandexGPT" in call_args
        assert "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" in call_args

    @pytest.mark.asyncio
    async def test_handle_yandexgpt_command_with_args(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /yandexgpt —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.get_args.return_value = "test query"
        message.chat = Mock()
        message.chat.id = 456
        message.reply = AsyncMock()

        with patch.object(ai_integration, 'generate_response', return_value="Personalized response") as mock_generate:
            await ai_handlers.handle_yandexgpt_command(message)

            mock_generate.assert_called_once_with('yandexgpt', 'test query', 123)
            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]
            assert "YandexGPT:" in call_args

    @pytest.mark.asyncio
    async def test_handle_ai_help_command(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /ai_help"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.reply = AsyncMock()

        with patch.object(ai_integration, 'get_available_services', return_value=['gigachat', 'yandexgpt']) as mock_available:
            await ai_handlers.handle_ai_help_command(message)

            mock_available.assert_called_once()
            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]
            assert "AI –ü–æ–º–æ—â–Ω–∏–∫–∏" in call_args
            assert "/gigachat" in call_args
            assert "/yandexgpt" in call_args

    @pytest.mark.asyncio
    async def test_handle_switch_ai_command_no_args(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /switch_ai –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        message = Mock()
        message.get_args.return_value = ""
        message.reply = AsyncMock()

        with patch.object(ai_integration, 'get_available_services', return_value=['gigachat', 'yandexgpt']) as mock_available:
            await ai_handlers.handle_switch_ai_command(message)

            mock_available.assert_called_once()
            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]
            assert "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞" in call_args

    @pytest.mark.asyncio
    async def test_handle_switch_ai_command_with_valid_service(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /switch_ai —Å –≤–∞–ª–∏–¥–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.get_args.return_value = "yandexgpt"
        message.date = 1234567890
        message.reply = AsyncMock()

        with patch.object(ai_integration, 'switch_service', return_value=True) as mock_switch:
            await ai_handlers.handle_switch_ai_command(message)

            mock_switch.assert_called_once_with(123, 'yandexgpt')
            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]
            assert "AI —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω" in call_args
            assert "yandexgpt" in call_args

    @pytest.mark.asyncio
    async def test_handle_switch_ai_command_with_invalid_service(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /switch_ai —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.get_args.return_value = "invalid_service"
        message.reply = AsyncMock()

        with patch.object(ai_integration, 'switch_service', return_value=False) as mock_switch:
            await ai_handlers.handle_switch_ai_command(message)

            mock_switch.assert_called_once_with(123, 'invalid_service')
            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]
            assert "–Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in call_args

    @pytest.mark.asyncio
    async def test_handle_max_sync_command(self, ai_handlers):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /max_sync"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.reply = AsyncMock()

        await ai_handlers.handle_max_sync_command(message)

        message.reply.assert_called_once()
        call_args = message.reply.call_args[0][0]
        assert "MAX –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è" in call_args
        assert "–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" in call_args

    @pytest.mark.asyncio
    async def test_handle_ai_message_not_in_ai_mode(self, ai_handlers):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ AI"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.text = "test message"
        message.reply = AsyncMock()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ ai_states
        await ai_handlers.handle_ai_message(message)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        message.reply.assert_not_called()

    @pytest.mark.asyncio
    async def test_handle_ai_message_in_ai_mode(self, ai_handlers):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ AI"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123
        message.text = "test message"
        message.chat = Mock()
        message.chat.id = 456
        message.reply = AsyncMock()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º AI
        ai_handlers.ai_states[123] = {'service': 'gigachat'}

        with patch.object(ai_integration, 'generate_response', return_value="AI response") as mock_generate:
            await ai_handlers.handle_ai_message(message)

            mock_generate.assert_called_once_with('gigachat', 'test message', 123)
            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]
            assert "ü§ñ" in call_args
            assert "AI response" in call_args

    @pytest.mark.asyncio
    async def test_check_ai_access_success(self, ai_handlers, mock_user_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ AI"""
        from core.permissions import UserRole

        mock_user_service.get_user_role_enum_async.return_value = UserRole.USER

        result = await ai_handlers._check_ai_access(123)
        assert result is True

    @pytest.mark.asyncio
    async def test_check_ai_access_failure(self, ai_handlers, mock_user_service):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ AI"""
        mock_user_service.get_user_role_enum_async.side_effect = Exception("Test error")

        result = await ai_handlers._check_ai_access(123)
        assert result is False

    def test_get_command_handlers(self, ai_handlers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –∫–æ–º–∞–Ω–¥"""
        handlers = ai_handlers.get_command_handlers()

        assert isinstance(handlers, dict)
        assert 'gigachat' in handlers
        assert 'yandexgpt' in handlers
        assert 'ai_help' in handlers
        assert 'switch_ai' in handlers
        assert 'max_sync' in handlers

    def test_get_message_handlers(self, ai_handlers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        handlers = ai_handlers.get_message_handlers()

        assert isinstance(handlers, list)
        assert len(handlers) == 1
        assert handlers[0] == ai_handlers.handle_ai_message


if __name__ == "__main__":
    pytest.main([__file__])