"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
–û—Ç–≤–µ—á–∞—é—Ç –∑–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º.
"""

from typing import Dict, Callable, List, Tuple
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .base_handler import BaseHandler
from services.user_service import UserService
from services.moderation_service import ModerationService


class AdminHandlers(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

    –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:
    - /warn [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞] - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    - /mute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - /unmute [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–∫—É
    - /ban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - /unban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - /kick [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞] - –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - /admin_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤:
    - /schedule_post [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
    - /list_posts - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    - /delete_post [id] - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
    - /publish_now [id] - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ

    –°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫:
    - /report_error [—Ç–∏–ø] [–∑–∞–≥–æ–ª–æ–≤–æ–∫] [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    - /admin_errors [—Å—Ç–∞—Ç—É—Å] - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
    - /analyze_error_ai [id] - –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
    - /process_all_errors_ai - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –ò–ò
    - /add_error_to_todo [id] - –¥–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ TODO —Å–ø–∏—Å–æ–∫
    - /add_all_analyzed_to_todo - –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ TODO

    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏:
     - /trigger_add [–∫–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞] [–æ—Ç–≤–µ—Ç] - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
     - /trigger_list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     - /trigger_edit [id] - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
     - /trigger_delete [id] - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
     - /trigger_toggle [id] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä

    –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:
    - /export_stats [—Ñ–æ—Ä–º–∞—Ç] - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV/Excel
    """

    def __init__(self, config, metrics, user_service: UserService, moderation_service: ModerationService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            metrics: –°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
            user_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            moderation_service: –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        """
        super().__init__(config, metrics)
        self.user_service = user_service
        self.moderation_service = moderation_service

    def get_command_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        return {
            # –ú–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ ModerationHandlers
            'admin_stats': self.handle_admin_stats,
            'schedule_post': self.handle_schedule_post,
            'list_posts': self.handle_list_posts,
            'delete_post': self.handle_delete_post,
            'publish_now': self.handle_publish_now,
            'report_error': self.handle_report_error,
            'admin_errors': self.handle_admin_errors,
            'analyze_error_ai': self.handle_analyze_error_ai,
            'process_all_errors_ai': self.handle_process_all_errors_ai,
            'add_error_to_todo': self.handle_add_error_to_todo,
            'add_all_analyzed_to_todo': self.handle_add_all_analyzed_errors_to_todo,
            'export_stats': self.handle_export_stats,
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
            'trigger_add': self.handle_trigger_add,
            'trigger_list': self.handle_trigger_list,
            'trigger_edit': self.handle_trigger_edit,
            'trigger_delete': self.handle_trigger_delete,
            'trigger_toggle': self.handle_trigger_toggle,
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            'admin_chats': self.handle_admin_chats,
        }

    def get_callback_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'admin_moderate_user': self.handle_moderate_user,
            'admin_confirm_action': self.handle_confirm_action,
            'trigger_manage': self.handle_trigger_manage,
            'trigger_edit': self.handle_trigger_edit_callback,
            'trigger_delete': self.handle_trigger_delete_callback,
            'trigger_toggle': self.handle_trigger_toggle_callback,
        }

    def get_message_handlers(self) -> Dict[str, Callable]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {}


    async def handle_admin_stats(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_stats"""
        await self.safe_execute(update, context, "admin_stats", self._handle_admin_stats)

    async def _handle_admin_stats(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_stats"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        stats = await self.moderation_service.get_moderation_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        response_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            f"üîá –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥–ª—É—à–µ–∫: {stats['active_mutes']}\n"
            f"üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {stats['active_bans']}\n"
            f"üìã –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}\n"
            f"üîç –§–∏–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏: {'–í–∫–ª—é—á–µ–Ω' if stats['profanity_filter_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n\n"
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
            "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: -\n"
            f"üèÜ –¢–æ–ø —Ä–∞–Ω–≥: -\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: -"
        )

        await self.send_response(update, response_text, parse_mode='HTML')

    async def handle_moderate_user(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback
        await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def handle_confirm_action(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        query = update.callback_query
        await query.answer()

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    # ===== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ü–û–°–¢–û–í =====

    async def handle_schedule_post(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule_post"""
        await self.safe_execute(update, context, "schedule_post", self._handle_schedule_post)

    async def _handle_schedule_post(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule_post"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 2:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule_post [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç]\n\n"
                "–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
                "‚Ä¢ –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ: 2024-01-15 14:30:00\n"
                "‚Ä¢ –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ: 2024-01-15 14:30\n"
                "‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ: +30m (–º–∏–Ω—É—Ç—ã)\n"
                "‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ: +2h (—á–∞—Å—ã)\n"
                "‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ: +1d (–¥–Ω–∏)\n\n"
                "–ü—Ä–∏–º–µ—Ä: /schedule_post +2h –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!"
            )
            return

        time_str = context.args[0]
        text = ' '.join(context.args[1:])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
        if not text or not text.strip():
            await self.send_response(update, "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        if len(text) > 4000:
            await self.send_response(update, "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if not time_str or not time_str.strip():
            await self.send_response(update, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return

        if len(time_str) > 100:
            await self.send_response(update, "‚ùå –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è")
            return

        try:
            schedule_time = self._parse_schedule_time(time_str)
        except ValueError as e:
            await self.send_response(update, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)[:100]}")
            return

        if schedule_time <= datetime.now():
            await self.send_response(update, "‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥)
        max_future_time = datetime.now() + timedelta(days=365)
        if schedule_time > max_future_time:
            await self.send_response(update, "‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 1 –≥–æ–¥")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
        preview_text = (
            "üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n"
            f"üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {schedule_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"üìã <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n{text}\n\n"
            "‚ùì –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'confirm_schedule_now_{len(text)}')],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data='edit_text')],
            [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data='add_image')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_schedule')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ user_data
        context.user_data['schedule_draft'] = {
            'time_str': time_str,
            'text': text,
            'schedule_time': schedule_time,
            'chat_id': update.effective_chat.id,
            'created_by': user.id
        }

        await self.send_response(update, preview_text, parse_mode='HTML', reply_markup=reply_markup)

    async def handle_list_posts(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list_posts"""
        await self.safe_execute(update, context, "list_posts", self._handle_list_posts)

    async def _handle_list_posts(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list_posts"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        posts = []  # –í –±—É–¥—É—â–µ–º: self.scheduled_post_repo.get_posts(chat_id=update.effective_chat.id)

        if not posts:
            await self.send_response(update, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return

        response = "üìã <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
        for post in posts:
            post_id, chat_id, text, image_path, schedule_time, created_by, status, published_at, created_at, creator_name = post

            response += f"üÜî <b>{post_id}</b>\n"
            response += f"üìÖ {schedule_time}\n"
            response += f"üë§ –°–æ–∑–¥–∞–ª: {creator_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            response += f"üìù {text[:100]}{'...' if len(text) > 100 else ''}\n"
            if image_path:
                response += f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}\n"
            response += "\n" + "‚îÄ" * 30 + "\n"

        await self.send_response(update, response, parse_mode='HTML')

    async def handle_delete_post(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete_post"""
        await self.safe_execute(update, context, "delete_post", self._handle_delete_post)

    async def _handle_delete_post(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete_post"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 1:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_post [ID_–ø–æ—Å—Ç–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /delete_post 1"
            )
            return

        post_id_str = context.args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ—Å—Ç–∞
        try:
            post_id = int(post_id_str)
        except ValueError:
            await self.send_response(update, "‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ID
        if post_id < 1:
            await self.send_response(update, "‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        success = False  # –í –±—É–¥—É—â–µ–º: self.scheduled_post_repo.delete_post(post_id, user.id)

        if success:
            await self.send_response(update, f"‚úÖ –ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await self.send_response(update, f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ")

    async def handle_publish_now(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /publish_now"""
        await self.safe_execute(update, context, "publish_now", self._handle_publish_now)

    async def _handle_publish_now(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /publish_now"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 1:
            await self.send_response(update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /publish_now [ID_–ø–æ—Å—Ç–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /publish_now 1"
            )
            return

        post_id_str = context.args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ—Å—Ç–∞
        try:
            post_id = int(post_id_str)
        except ValueError:
            await self.send_response(update, "‚ùå ID –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        success = False  # –í –±—É–¥—É—â–µ–º: self.scheduled_post_repo.publish_post_now(post_id, user.id)

        if success:
            await self.send_response(update, f"‚úÖ –ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        else:
            await self.send_response(update, f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—é")

    def _parse_schedule_time(self, time_str: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        import re

        current_time = datetime.now()

        # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è: 2024-01-15 14:30:00 –∏–ª–∏ 2024-01-15 14:30
        absolute_pattern = r'^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2})(?::(\d{2}))?$'
        match = re.match(absolute_pattern, time_str)

        if match:
            year, month, day, hour, minute = map(int, match.groups()[:5])
            second = int(match.group(6)) if match.group(6) else 0
            return datetime(year, month, day, hour, minute, second)

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: +30m, +2h, +1d
        relative_pattern = r'^(\+|\-)(\d+)([mhd])$'
        match = re.match(relative_pattern, time_str)

        if match:
            sign, amount, unit = match.groups()
            amount = int(amount)

            if unit == 'm':  # –º–∏–Ω—É—Ç—ã
                delta = timedelta(minutes=amount)
            elif unit == 'h':  # —á–∞—Å—ã
                delta = timedelta(hours=amount)
            elif unit == 'd':  # –¥–Ω–∏
                delta = timedelta(days=amount)

            if sign == '-':
                delta = -delta

            return current_time + delta

        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è (2024-01-15 14:30) –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ (+30m, +2h, +1d)")

    # ===== –°–ò–°–¢–ï–ú–ê –û–®–ò–ë–û–ö –ò –ò–ò –ê–ù–ê–õ–ò–ó–ê =====

    async def handle_report_error(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report_error"""
        await self.safe_execute(update, context, "report_error", self._handle_report_error)

    async def _handle_report_error(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report_error"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await self.send_response(update,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report_error <—Ç–∏–ø> <–∑–∞–≥–æ–ª–æ–≤–æ–∫> [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
                "–¢–∏–ø—ã –æ—à–∏–±–æ–∫:\n"
                "‚Ä¢ bug - –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
                "‚Ä¢ feature - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\n"
                "‚Ä¢ crash - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞/–ø–∞–¥–µ–Ω–∏–µ\n"
                "‚Ä¢ ui - –ø—Ä–æ–±–ª–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                "‚Ä¢ security - –ø—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ improvement - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è\n"
                "‚Ä¢ other - –¥—Ä—É–≥–æ–µ\n\n"
                "–ü—Ä–∏–º–µ—Ä: /report_error bug –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ /weather –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã..."
            )
            return

        error_type = context.args[0].lower()
        title = context.args[1]
        description = ' '.join(context.args[2:]) if len(context.args) > 2 else ""

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        valid_types = ['bug', 'feature', 'crash', 'ui', 'security', 'improvement', 'other']
        if error_type not in valid_types:
            await self.send_response(update,
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏: {error_type}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(valid_types)}"
            )
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(title.strip()) == 0:
            await self.send_response(update, "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        if len(title) > 200:
            await self.send_response(update, "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 2000:
            await self.send_response(update, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        priority_map = {
            'crash': 'critical',
            'security': 'high',
            'bug': 'medium',
            'ui': 'medium',
            'feature': 'low',
            'improvement': 'low',
            'other': 'medium'
        }
        priority = priority_map.get(error_type, 'medium')

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        # error_id = self.error_repository.add_error(user.id, error_type, title, description, priority)

        await self.send_response(update,
            "‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"üÜî ID –æ—à–∏–±–∫–∏: [ID –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω]\n"
            f"üìã –¢–∏–ø: {error_type}\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
            f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤ —É–ª—É—á—à–µ–Ω–∏–µ –±–æ—Ç–∞!"
        )

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
        # await self._send_developer_notification(context, f"üö® –ù–æ–≤–∞—è –æ—à–∏–±–∫–∞: {title}")

    async def handle_admin_errors(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_errors"""
        await self.safe_execute(update, context, "admin_errors", self._handle_admin_errors)

    async def _handle_admin_errors(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_errors"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ —Å—Ç–∞—Ç—É—Å—É)
        status_filter = None
        if context.args and len(context.args) > 0:
            status_filter = context.args[0].lower()
            valid_statuses = ['new', 'in_progress', 'resolved', 'rejected']
            if status_filter not in valid_statuses:
                await self.send_response(update,
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_filter}\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {', '.join(valid_statuses)}"
                )
                return

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        errors = []

        if not errors:
            status_text = f" —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status_filter}'" if status_filter else ""
            await self.send_response(update, f"üì≠ –ù–µ—Ç –æ—à–∏–±–æ–∫{status_text}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö
        response = "üìã <b>–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏ –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"

        for error in errors:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            type_emojis = {
                'bug': 'üêõ', 'feature': '‚ú®', 'crash': 'üí•',
                'ui': 'üé®', 'security': 'üîí', 'improvement': 'üìà', 'other': 'üìù'
            }
            type_emoji = type_emojis.get(error.get('error_type', 'other'), 'üìù')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_emojis = {
                'critical': 'üî¥', 'high': 'üü†', 'medium': 'üü°', 'low': 'üîµ'
            }
            priority_emoji = priority_emojis.get(error.get('priority', 'medium'), 'üü°')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emojis = {
                'new': 'üÜï', 'in_progress': 'üîÑ', 'resolved': '‚úÖ', 'rejected': '‚ùå'
            }
            status_emoji = status_emojis.get(error.get('status', 'new'), '‚ùì')

            response += (
                f"{type_emoji} <b>#{error.get('id', 'N/A')}</b> {priority_emoji} {status_emoji}\n"
                f"üìù <b>{error.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}</b>\n"
                f"üë§ {error.get('admin_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')} | üìÖ {error.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')[:10]}\n"
                f"üìã –¢–∏–ø: {error.get('error_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')} | –°—Ç–∞—Ç—É—Å: {error.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            )

            description = error.get('description', '')
            if description and len(description) > 100:
                response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...\n"
            elif description:
                response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"

            response += "\n" + "‚îÄ" * 40 + "\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–ª–∏–Ω–∞ –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(response) > 4000:
            response = response[:3997] + "..."

        await self.send_response(update, response, parse_mode='HTML')

    async def handle_analyze_error_ai(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze_error_ai"""
        await self.safe_execute(update, context, "analyze_error_ai", self._handle_analyze_error_ai)

    async def _handle_analyze_error_ai(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze_error_ai"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 1:
            await self.send_response(update,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze_error_ai <ID_–æ—à–∏–±–∫–∏>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /analyze_error_ai 1"
            )
            return

        try:
            error_id = int(context.args[0])
        except ValueError:
            await self.send_response(update, "‚ùå ID –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        await self.send_response(update,
            f"ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ #{error_id} —Å –ø–æ–º–æ—â—å—é –ò–ò...\n\n"
            f"–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_errors –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        )

    async def handle_process_all_errors_ai(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /process_all_errors_ai"""
        await self.safe_execute(update, context, "process_all_errors_ai", self._handle_process_all_errors_ai)

    async def _handle_process_all_errors_ai(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /process_all_errors_ai"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        await self.send_response(update,
            "ü§ñ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_errors –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        )

    async def handle_add_error_to_todo(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_error_to_todo"""
        await self.safe_execute(update, context, "add_error_to_todo", self._handle_add_error_to_todo)

    async def _handle_add_error_to_todo(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_error_to_todo"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 1:
            await self.send_response(update,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_error_to_todo <ID_–æ—à–∏–±–∫–∏> [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç]\n\n"
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): high, medium, low\n"
                "–ü—Ä–∏–º–µ—Ä: /add_error_to_todo 1 high"
            )
            return

        try:
            error_id = int(context.args[0])
        except ValueError:
            await self.send_response(update, "‚ùå ID –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        priority = context.args[1].lower() if len(context.args) > 1 else 'medium'
        valid_priorities = ['high', 'medium', 'low']
        if priority not in valid_priorities:
            await self.send_response(update, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_priorities)}")
            return

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ TODO —Ñ–∞–π–ª
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        await self.send_response(update,
            f"‚úÖ –û—à–∏–±–∫–∞ #{error_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ TODO —Å–ø–∏—Å–æ–∫!\n\n"
            f"üìù –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
            f"üìã –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª '{priority.upper()}' –≤ —Ñ–∞–π–ª–µ TODO.md"
        )

    async def handle_add_all_analyzed_errors_to_todo(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_all_analyzed_to_todo"""
        await self.safe_execute(update, context, "add_all_analyzed_to_todo", self._handle_add_all_analyzed_errors_to_todo)

    async def _handle_add_all_analyzed_errors_to_todo(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_all_analyzed_to_todo"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        await self.send_response(update,
            "üìù –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ TODO —Å–ø–∏—Å–æ–∫...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )

    async def _send_developer_notification(self, context: ContextTypes, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            if self.config.bot_config.enable_developer_notifications and self.config.bot_config.developer_chat_id:
                await context.bot.send_message(
                    chat_id=self.config.bot_config.developer_chat_id,
                    text=message,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                return True
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {e}")
            return False

    # ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ò–ì–ì–ï–†–ê–ú–ò =====

    async def handle_trigger_add(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_add"""
        await self.safe_execute(update, context, "trigger_add", self._handle_trigger_add)

    async def _handle_trigger_add(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_add"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 2:
            await self.send_response(update,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trigger_add <–∫–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞> <–æ—Ç–≤–µ—Ç>\n\n"
                "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
                "–ü—Ä–∏–º–µ—Ä: /trigger_add –ø—Ä–∏–≤–µ—Ç,–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?\n\n"
                "–¢—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç:\n"
                "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
                "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /regex/)\n"
                "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫"
            )
            return

        keywords_str = context.args[0]
        response_text = ' '.join(context.args[1:])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        keywords = [kw.strip() for kw in keywords_str.split(',') if kw.strip()]
        if not keywords:
            await self.send_response(update, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            return

        if len(keywords) > 10:
            await self.send_response(update, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)")
            return

        for keyword in keywords:
            if len(keyword) > 50:
                await self.send_response(update, f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword[:20]}...")
                return
            if len(keyword) < 2:
                await self.send_response(update, f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
                return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        if not response_text or not response_text.strip():
            await self.send_response(update, "‚ùå –û—Ç–≤–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        if len(response_text) > 1000:
            await self.send_response(update, "‚ùå –û—Ç–≤–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ –±—É–¥—É—â–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        existing_trigger = None  # self.trigger_repo.get_trigger_by_keywords(keywords)

        if existing_trigger:
            await self.send_response(update,
                f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ '{keywords_str}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trigger_edit –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞."
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ –±—É–¥—É—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        trigger_data = {
            'keywords': keywords,
            'response': response_text,
            'created_by': user.id,
            'created_at': datetime.now(),
            'enabled': True
        }

        # self.trigger_repo.add_trigger(trigger_data)
        trigger_id = 1  # –í –±—É–¥—É—â–µ–º: self.trigger_repo.add_trigger(trigger_data)

        await self.send_response(update,
            f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üÜî ID: {trigger_id}\n"
            f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}\n"
            f"üìù –û—Ç–≤–µ—Ç: {response_text[:100]}{'...' if len(response_text) > 100 else ''}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω' if trigger_data['enabled'] else '–í—ã–∫–ª—é—á–µ–Ω'}"
        )

    async def handle_trigger_list(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_list"""
        await self.safe_execute(update, context, "trigger_list", self._handle_trigger_list)

    async def _handle_trigger_list(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_list"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ –±—É–¥—É—â–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        triggers = []  # self.trigger_repo.get_all_triggers()

        if not triggers:
            await self.send_response(update, "üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
            return

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
        keyboard = []
        response_text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤</b>\n\n"

        for i, trigger in enumerate(triggers[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            trigger_id = trigger.get('id', i+1)
            keywords = trigger.get('keywords', [])
            response = trigger.get('response', '')
            enabled = trigger.get('enabled', True)

            status_emoji = "üü¢" if enabled else "üî¥"
            keywords_display = ', '.join(keywords[:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
            if len(keywords) > 3:
                keywords_display += "..."

            response_text += (
                f"{status_emoji} <b>#{trigger_id}</b>\n"
                f"üîë {keywords_display}\n"
                f"üìù {response[:50]}{'...' if len(response) > 50 else ''}\n\n"
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
            keyboard.append([
                InlineKeyboardButton(f"{'–í—ã–∫–ª—é—á–∏—Ç—å' if enabled else '–í–∫–ª—é—á–∏—Ç—å'} #{trigger_id}",
                                   callback_data=f'trigger_toggle_{trigger_id}'),
                InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å #{trigger_id}",
                                   callback_data=f'trigger_delete_{trigger_id}')
            ])

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä", callback_data='trigger_add_new')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        if len(response_text) > 4000:
            response_text = response_text[:3997] + "..."

        await self.send_response(update, response_text, parse_mode='HTML', reply_markup=reply_markup)

    async def handle_trigger_edit(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_edit"""
        await self.safe_execute(update, context, "trigger_edit", self._handle_trigger_edit)

    async def _handle_trigger_edit(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_edit"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 1:
            await self.send_response(update,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trigger_edit <ID_—Ç—Ä–∏–≥–≥–µ—Ä–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /trigger_edit 1\n\n"
                "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞."
            )
            return

        trigger_id_str = context.args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID —Ç—Ä–∏–≥–≥–µ—Ä–∞
        try:
            trigger_id = int(trigger_id_str)
        except ValueError:
            await self.send_response(update, "‚ùå ID —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ –±—É–¥—É—â–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        trigger = None  # self.trigger_repo.get_trigger_by_id(trigger_id)

        if not trigger:
            await self.send_response(update, f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä #{trigger_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_trigger_id'] = trigger_id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        current_keywords = ', '.join(trigger.get('keywords', []))
        current_response = trigger.get('response', '')

        response_text = (
            f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ #{trigger_id}</b>\n\n"
            f"üîë –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {current_keywords}\n"
            f"üìù –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: {current_response}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )

        await self.send_response(update, response_text, parse_mode='HTML')

    async def handle_trigger_delete(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_delete"""
        await self.safe_execute(update, context, "trigger_delete", self._handle_trigger_delete)

    async def _handle_trigger_delete(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_delete"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 1:
            await self.send_response(update,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trigger_delete <ID_—Ç—Ä–∏–≥–≥–µ—Ä–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /trigger_delete 1"
            )
            return

        trigger_id_str = context.args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID —Ç—Ä–∏–≥–≥–µ—Ä–∞
        try:
            trigger_id = int(trigger_id_str)
        except ValueError:
            await self.send_response(update, "‚ùå ID —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ –±—É–¥—É—â–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        trigger = None  # self.trigger_repo.get_trigger_by_id(trigger_id)

        if not trigger:
            await self.send_response(update, f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä #{trigger_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        keywords = trigger.get('keywords', [])
        keywords_display = ', '.join(keywords[:3])
        if len(keywords) > 3:
            keywords_display += "..."

        response_text = (
            f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ #{trigger_id}</b>\n\n"
            f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords_display}\n"
            f"üìù –û—Ç–≤–µ—Ç: {trigger.get('response', '')[:100]}{'...' if len(trigger.get('response', '')) > 100 else ''}\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f'trigger_confirm_delete_{trigger_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='trigger_cancel_delete')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_response(update, response_text, parse_mode='HTML', reply_markup=reply_markup)

    async def handle_trigger_toggle(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_toggle"""
        await self.safe_execute(update, context, "trigger_toggle", self._handle_trigger_toggle)

    async def _handle_trigger_toggle(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trigger_toggle"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        if len(context.args) < 1:
            await self.send_response(update,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trigger_toggle <ID_—Ç—Ä–∏–≥–≥–µ—Ä–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /trigger_toggle 1"
            )
            return

        trigger_id_str = context.args[0]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID —Ç—Ä–∏–≥–≥–µ—Ä–∞
        try:
            trigger_id = int(trigger_id_str)
        except ValueError:
            await self.send_response(update, "‚ùå ID —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ –±—É–¥—É—â–µ–º —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        success = False  # self.trigger_repo.toggle_trigger(trigger_id, user.id)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            new_status = True  # self.trigger_repo.get_trigger_status(trigger_id)
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
            await self.send_response(update, f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä #{trigger_id} —É—Å–ø–µ—à–Ω–æ {status_text}")
        else:
            await self.send_response(update, f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä #{trigger_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ")

    # ===== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –¢–†–ò–ì–ì–ï–†–û–í =====

    async def handle_trigger_manage(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ callback"""
        query = update.callback_query
        await query.answer()

        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def handle_trigger_edit_callback(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()

        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def handle_trigger_delete_callback(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()

        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def handle_trigger_toggle_callback(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏–∑ callback_data
        callback_data = query.data
        if not callback_data.startswith('trigger_toggle_'):
            return

        try:
            trigger_id = int(callback_data.split('_')[2])
        except (IndexError, ValueError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–∏–≥–≥–µ—Ä–∞")
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ –±—É–¥—É—â–µ–º —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        success = True  # self.trigger_repo.toggle_trigger(trigger_id, query.from_user.id)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            new_status = True  # self.trigger_repo.get_trigger_status(trigger_id)
            status_emoji = "üü¢" if new_status else "üî¥"
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"

            await query.edit_message_text(
                f"{status_emoji} –°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞ #{trigger_id} –∏–∑–º–µ–Ω–µ–Ω: {status_text}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='trigger_back_to_list')]
                ])
            )
        else:
            await query.edit_message_text(f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä #{trigger_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ")

    async def handle_admin_chats(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_chats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        await self.safe_execute(update, context, "admin_chats", self._handle_admin_chats)

    async def _handle_admin_chats(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_chats"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram API —á–µ—Ä–µ–∑ context.bot
            bot = context.bot

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–∞–∫ fallback)
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram API
            chats_info = []

            # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö - –≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            chats_info = [
                {
                    'chat_id': -1001234567890,
                    'chat_title': '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç 1',
                    'user_status': 'administrator',
                    'permissions': ['can_delete_messages', 'can_restrict_members', 'can_promote_members']
                },
                {
                    'chat_id': -1001987654321,
                    'chat_title': '–ú–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã–π —á–∞—Ç 2',
                    'user_status': 'administrator',
                    'permissions': ['can_delete_messages', 'can_restrict_members']
                }
            ]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if not chats_info:
                await self.send_response(update, "‚ÑπÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ")
                return

            response_text = "üè¢ <b>–ß–∞—Ç—ã, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b>\n\n"

            for chat_info in chats_info:
                chat_title = chat_info.get('chat_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç')
                permissions = chat_info.get('permissions', [])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤
                if 'can_promote_members' in permissions:
                    rights_level = "üëë –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞"
                elif 'can_restrict_members' in permissions:
                    rights_level = "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"
                else:
                    rights_level = "‚öñÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞"

                response_text += f"üìç <b>{chat_title}</b>\n"
                response_text += f"üîë –ü—Ä–∞–≤–∞: {rights_level}\n"
                response_text += f"üÜî ID: {chat_info['chat_id']}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = []
            for chat_info in chats_info:
                chat_title = chat_info.get('chat_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç')
                chat_id = chat_info['chat_id']
                keyboard.append([
                    InlineKeyboardButton(f"üéØ –£–ø—Ä–∞–≤–ª—è—Ç—å: {chat_title[:20]}...",
                                       callback_data=f'admin_select_chat_{chat_id}')
                ])

            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_admin')])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await self.send_response(update, response_text, parse_mode='HTML', reply_markup=reply_markup)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await self.send_response(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤")

    # ===== –≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

    async def handle_export_stats(self, update: Update, context: ContextTypes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export_stats"""
        await self.safe_execute(update, context, "export_stats", self._handle_export_stats)

    async def _handle_export_stats(self, update: Update, context: ContextTypes):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export_stats"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.require_admin(update, user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_format = 'csv'
        if context.args and len(context.args) > 0:
            export_format = context.args[0].lower()
            if export_format not in ['csv', 'excel']:
                await self.send_response(update,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/export_stats csv\n"
                    "/export_stats excel"
                )
                return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_data = await self._get_users_statistics()

            if not users_data:
                await self.send_response(update, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
            if export_format == 'csv':
                filename, file_content = self._generate_csv_export(users_data)
            else:
                filename, file_content = self._generate_excel_export(users_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_document(
                document=file_content,
                filename=filename,
                caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({export_format.upper()})\n"
                       f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}"
            )

        except Exception as e:
            await self.send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)[:100]}")

    async def _get_users_statistics(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        return [
            {
                'id': 1,
                'telegram_id': 123456789,
                'username': 'testuser',
                'first_name': '–¢–µ—Å—Ç',
                'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'reputation': 1500,
                'rank': '–ê–∫—Ç–∏–≤–∏—Å—Ç',
                'message_count': 245,
                'game_wins': 12,
                'donations_total': 500.0,
                'warnings': 1,
                'joined_date': '2024-01-15',
                'last_activity': '2024-01-20'
            }
        ]

    def _generate_csv_export(self, users_data: List[Dict]) -> Tuple[str, bytes]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞"""
        import csv
        import io

        output = io.StringIO()
        writer = csv.writer(output, delimiter=';')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow([
            'ID', 'Telegram ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è',
            '–†–µ–ø—É—Ç–∞—Ü–∏—è', '–†–∞–Ω–≥', '–°–æ–æ–±—â–µ–Ω–∏–π', '–ü–æ–±–µ–¥ –≤ –∏–≥—Ä–∞—Ö',
            '–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π', '–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
        ])

        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users_data:
            writer.writerow([
                user['id'],
                user['telegram_id'],
                user['username'] or '',
                user['first_name'],
                user['last_name'] or '',
                user['reputation'],
                user['rank'],
                user['message_count'],
                user['game_wins'],
                user['donations_total'],
                user['warnings'],
                user['joined_date'],
                user['last_activity']
            ])

        csv_content = output.getvalue().encode('utf-8-sig')
        return f'bot_stats_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv', csv_content

    def _generate_excel_export(self, users_data: List[Dict]) -> Tuple[str, bytes]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞"""
        try:
            import pandas as pd
            import io

            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(users_data)

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            column_names = {
                'id': 'ID',
                'telegram_id': 'Telegram ID',
                'username': 'Username',
                'first_name': '–ò–º—è',
                'last_name': '–§–∞–º–∏–ª–∏—è',
                'reputation': '–†–µ–ø—É—Ç–∞—Ü–∏—è',
                'rank': '–†–∞–Ω–≥',
                'message_count': '–°–æ–æ–±—â–µ–Ω–∏–π',
                'game_wins': '–ü–æ–±–µ–¥ –≤ –∏–≥—Ä–∞—Ö',
                'donations_total': '–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤',
                'warnings': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π',
                'joined_date': '–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
                'last_activity': '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
            }

            df = df.rename(columns=column_names)

            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', index=False)

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
                worksheet = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π']
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter

                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass

                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width

            excel_content = output.getvalue()
            return f'bot_stats_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx', excel_content

        except ImportError:
            # –ï—Å–ª–∏ pandas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CSV
            return self._generate_csv_export(users_data)

    def _add_error_to_todo_file(self, error_id: int, title: str, error_type: str, priority: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ TODO —Ñ–∞–π–ª"""
        try:
            import os

            todo_file_path = os.path.join('telegram_bot', 'TODO.md')

            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª TODO
            if os.path.exists(todo_file_path):
                with open(todo_file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
            else:
                content = "# üìã TODO - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n\n"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            priority_sections = {
                'high': '## üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ (High Priority)',
                'medium': '## üéØ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (Medium Priority)',
                'low': '## üîÆ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (Low Priority)'
            }

            section_title = priority_sections.get(priority, priority_sections['medium'])
            task_text = f"- [ ] #{error_id} {title} (–¢–∏–ø: {error_type})"

            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            lines = content.split('\n')
            insert_index = -1

            for i, line in enumerate(lines):
                if line.startswith(section_title):
                    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏–ª–∏ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ
                    for j in range(i + 1, len(lines)):
                        next_line = lines[j]
                        if next_line.startswith('### ') and '–°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫' in next_line:
                            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–º "–°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫"
                            insert_index = j
                            break
                        elif next_line.startswith('## ') and next_line != lines[i]:
                            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–æ–º
                            insert_index = j
                            break
                    if insert_index == -1:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Å—Ç–æ, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞
                        insert_index = len(lines)
                    break

            if insert_index == -1:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                insert_index = len(lines)

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            lines.insert(insert_index, task_text)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(todo_file_path, 'w', encoding='utf-8') as file:
                file.write('\n'.join(lines))

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≤ TODO —Ñ–∞–π–ª: {e}")
            return False