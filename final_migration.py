import sqlite3
import os

def final_migration():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ models.py"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists('telegram_bot.db'):
            backup_name = f"telegram_bot_backup_{sqlite3.datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            os.rename('telegram_bot.db', backup_name)
            print(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
        conn = sqlite3.connect('telegram_bot.db')
        cursor = conn.cursor()

        print("–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• –ü–û –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–•–ï–ú–ï")

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ –∏–∑ models.py
        tables_sql = [
            '''CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                joined_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
                reputation INTEGER DEFAULT 0,
                rank TEXT DEFAULT '–ù–æ–≤–∏—á–æ–∫',
                warnings INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )''',

            '''CREATE TABLE scores (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                total_score INTEGER DEFAULT 0,
                message_count INTEGER DEFAULT 0,
                game_wins INTEGER DEFAULT 0,
                donations_total REAL DEFAULT 0.0,
                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )''',

            '''CREATE TABLE achievements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                description TEXT NOT NULL,
                condition_type TEXT NOT NULL,
                condition_value TEXT NOT NULL,
                badge TEXT NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )''',

            '''CREATE TABLE user_achievements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                achievement_id INTEGER NOT NULL,
                unlocked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (achievement_id) REFERENCES achievements(id),
                UNIQUE(user_id, achievement_id)
            )''',

            '''CREATE TABLE warnings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                reason TEXT NOT NULL,
                admin_id INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (admin_id) REFERENCES users(id)
            )''',

            '''CREATE TABLE donations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                year INTEGER NOT NULL DEFAULT (strftime('%Y', 'now')),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )''',

            '''CREATE TABLE errors (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                admin_id INTEGER NOT NULL,
                error_type TEXT NOT NULL,
                title TEXT NOT NULL,
                description TEXT,
                status TEXT DEFAULT 'new',
                priority TEXT DEFAULT 'medium',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                ai_analysis TEXT,
                todo_added BOOLEAN DEFAULT 0,
                resolved_at DATETIME,
                FOREIGN KEY (admin_id) REFERENCES users(id)
            )''',

            '''CREATE TABLE scheduled_posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                text TEXT NOT NULL,
                image_path TEXT,
                schedule_time DATETIME NOT NULL,
                created_by INTEGER DEFAULT 0,
                status TEXT DEFAULT 'pending',
                published_at DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )''',

            '''CREATE TABLE games (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                type TEXT NOT NULL,
                status TEXT DEFAULT 'active',
                participants TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )'''
        ]

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for i, sql in enumerate(tables_sql, 1):
            cursor.execute(sql)
            print(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {i}/{len(tables_sql)}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = [
            ("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ", "messages", "1", "üí¨"),
            ("–ë–æ–ª—Ç—É–Ω", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 100 —Å–æ–æ–±—â–µ–Ω–∏–π", "messages", "100", "üó£Ô∏è"),
            ("–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 1000 —Å–æ–æ–±—â–µ–Ω–∏–π", "messages", "1000", "üì¢"),
            ("–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞", "–°—ã–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É", "games", "1", "üéÆ"),
            ("–ò–≥—Ä–æ–∫", "–í—ã–∏–≥—Ä–∞—Ç—å 10 –∏–≥—Ä", "games", "10", "üèÜ"),
            ("–ß–µ–º–ø–∏–æ–Ω", "–í—ã–∏–≥—Ä–∞—Ç—å 100 –∏–≥—Ä", "games", "100", "üëë"),
            ("–ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç", "–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç", "donations", "1", "üí∞"),
            ("–ú–µ—Ü–µ–Ω–∞—Ç", "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 1000 —Ä—É–±–ª–µ–π", "donations", "1000", "üè¶"),
            ("–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å", "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 10000 —Ä—É–±–ª–µ–π", "donations", "10000", "üíé"),
            ("–ù–æ–≤–∏—á–æ–∫", "–ù–∞–±—Ä–∞—Ç—å 100 –æ—á–∫–æ–≤", "score", "100", "üåü"),
            ("–ê–∫—Ç–∏–≤–∏—Å—Ç", "–ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤", "score", "1000", "‚≠ê"),
            ("–≠–∫—Å–ø–µ—Ä—Ç", "–ù–∞–±—Ä–∞—Ç—å 10000 –æ—á–∫–æ–≤", "score", "10000", "üèÖ"),
            ("–õ–µ–≥–µ–Ω–¥–∞", "–ù–∞–±—Ä–∞—Ç—å 100000 –æ—á–∫–æ–≤", "score", "100000", "üëë"),
            ("–î–æ–ª–≥–æ–∂–∏—Ç–µ–ª—å", "–ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º 7 –¥–Ω–µ–π", "days_active", "7", "üìÖ"),
            ("–í–µ—Ç–µ—Ä–∞–Ω", "–ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º 30 –¥–Ω–µ–π", "days_active", "30", "üéñÔ∏è"),
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        for name, description, condition_type, condition_value, badge in achievements:
            cursor.execute("""
                INSERT INTO achievements (name, description, condition_type, condition_value, badge)
                VALUES (?, ?, ?, ?, ?)
            """, (name, description, condition_type, condition_value, badge))

        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        table_names = [table[0] for table in tables]

        print(f"–°–û–ó–î–ê–ù–û –¢–ê–ë–õ–ò–¶: {len(table_names)}")
        print(f"–°–ü–ò–°–û–ö –¢–ê–ë–õ–ò–¶: {table_names}")

        conn.commit()
        conn.close()

        print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    final_migration()