"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: handlers -> services -> repositories.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–ª–æ—è–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
"""

import pytest
import tempfile
import os
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.config import Config
from services.user_service import UserService
from handlers.user_handlers import UserHandlers
from database.repository import UserRepository, ScoreRepository


class TestUserCommandsIntegration:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (/start, /rank, /leaderboard)"""

    @pytest.fixture
    def temp_config(self):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
            f.write("""
BOT_TOKEN = "123456789:integration_test_token"
ADMIN_IDS = [123456789, 987654321]
OPENWEATHER_API_KEY = "test_key"
NEWS_API_KEY = "test_key"
OPENAI_API_KEY = "test_key"
""")
            config_path = f.name

        yield config_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(config_path):
            os.unlink(config_path)

    @pytest.fixture
    def temp_db(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–∞–±–ª–∏—Ü"""
        from database.models import DatabaseSchema

        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        repo = UserRepository(db_path)
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            for table_sql in DatabaseSchema.get_create_tables_sql():
                repo._execute_query(table_sql)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            repo.initialize_achievements()

        finally:
            repo.close()

        yield db_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(db_path):
            os.unlink(db_path)

    @pytest.fixture
    def mock_update(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        update = Mock()

        # –ú–æ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Mock()
        user.id = 123456789
        user.username = "test_user"
        user.first_name = "Test"
        user.last_name = "User"
        update.effective_user = user

        # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Mock()
        message.message_id = 1
        message.reply_text = AsyncMock()
        update.message = message

        # –ú–æ–∫–∞–µ–º —á–∞—Ç
        chat = Mock()
        chat.id = -1001234567890
        update.effective_chat = chat

        return update

    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.args = []

        # –ú–æ–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Mock()
        app._date_time = datetime.now()
        context._application = app

        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞
        bot = AsyncMock()
        context.bot = bot

        context.user_data = {}

        return context

    @pytest.mark.asyncio
    async def test_start_command_full_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: handler -> service -> repository"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            initial_user_data = user_repo.get_by_id(mock_update.effective_user.id)
            assert initial_user_data is None

            # –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
            await user_handlers.handle_start(mock_update, mock_context)

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()
            response_text = mock_update.message.reply_text.call_args[0][0]
            assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in response_text or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" not in response_text

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            created_user_data = user_repo.get_by_id(mock_update.effective_user.id)
            assert created_user_data is not None
            assert created_user_data['telegram_id'] == mock_update.effective_user.id
            assert created_user_data['username'] == mock_update.effective_user.username
            assert created_user_data['first_name'] == mock_update.effective_user.first_name
            assert created_user_data['last_name'] == mock_update.effective_user.last_name
            assert created_user_data['rank'] == "–ù–æ–≤–∏—á–æ–∫"
            assert created_user_data['reputation'] == 0

            # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ scores
            user_score = score_repo.get_total_score(mock_update.effective_user.id)
            assert user_score == 0

            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )
            assert profile.user_id == mock_update.effective_user.id
            assert profile.username == mock_update.effective_user.username
            assert profile.rank == "–ù–æ–≤–∏—á–æ–∫"

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_rank_command_full_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã /rank: handler -> service -> repository"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –æ—á–∫–∞–º–∏
            profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
            await score_repo.update_score(mock_update.effective_user.id, 50)  # –¢–µ–ø–µ—Ä—å 50 –æ—á–∫–æ–≤

            # –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /rank
            await user_handlers.handle_rank(mock_update, mock_context)

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()
            response_text = mock_update.message.reply_text.call_args[0][0]

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            assert "üèÜ" in response_text or "–†–∞–Ω–≥" in response_text
            assert mock_update.effective_user.first_name in response_text or "test_user" in response_text

            # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–Ω–≥ –æ–±–Ω–æ–≤–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            updated_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –ü—Ä–∏ 50 –æ—á–∫–∞—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω–≥ "–ù–æ–≤–∏—á–æ–∫" (–¥–æ 100 –æ—á–∫–æ–≤)
            assert updated_profile.rank == "–ù–æ–≤–∏—á–æ–∫"
            assert updated_profile.reputation == 50

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_leaderboard_command_full_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã /leaderboard: handler -> service -> repository"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –æ—á–∫–∞–º–∏
            users_data = [
                (123456789, "user1", "User", "One", 100),
                (987654321, "user2", "User", "Two", 80),
                (555666777, "user3", "User", "Three", 60),
                (111222333, "user4", "User", "Four", 40),
            ]

            for telegram_id, username, first_name, last_name, score in users_data:
                await user_service.get_or_create_user(telegram_id, username, first_name, last_name)
                await score_repo.update_score(telegram_id, score)

            # –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /leaderboard
            await user_handlers.handle_leaderboard(mock_update, mock_context)

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()
            response_text = mock_update.message.reply_text.call_args[0][0]

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            assert "ü•á" in response_text or "–¢–æ–ø" in response_text or "Leaderboard" in response_text

            # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            top_users = await user_service.get_top_users(10)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤)
            assert len(top_users) >= 4
            assert top_users[0][3] >= top_users[1][3] >= top_users[2][3] >= top_users[3][3]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—á–∫–∏
            assert top_users[0][3] == 100

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_user_commands_data_consistency(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ /start, /rank, /leaderboard"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start
            await user_handlers.handle_start(mock_update, mock_context)

            # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            await score_repo.update_score(mock_update.effective_user.id, 25)

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ /rank
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_rank(mock_update, mock_context)

            rank_response = mock_update.message.reply_text.call_args[0][0]
            assert "25" in rank_response or "–†–µ–ø—É—Ç–∞—Ü–∏—è" in rank_response

            # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ leaderboard
            mock_update.effective_user.id = 987654321
            mock_update.effective_user.username = "user2"
            mock_update.effective_user.first_name = "User2"
            mock_update.effective_user.last_name = "Test"

            await user_handlers.handle_start(mock_update, mock_context)
            await score_repo.update_score(987654321, 50)

            # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º leaderboard
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_leaderboard(mock_update, mock_context)

            leaderboard_response = mock_update.message.reply_text.call_args[0][0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            assert "User2" in leaderboard_response or "user2" in leaderboard_response

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            top_users = await user_service.get_top_users(10)
            assert len(top_users) >= 2

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å 50 –æ—á–∫–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å 25 –æ—á–∫–∞–º–∏
            user1_score = next((score for _, _, _, score in top_users if _ == 987654321), None)
            user2_score = next((score for _, _, _, score in top_users if _ == 123456789), None)

            if user1_score is not None and user2_score is not None:
                assert user1_score >= user2_score

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_commands_error_handling_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ü–µ–ø–æ—á–∫–µ –∫–æ–º–∞–Ω–¥"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –®–∞–≥ 1: –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            original_get_by_id = user_repo.get_by_id
            user_repo.get_by_id = Mock(side_effect=Exception("Database connection error"))

            # –®–∞–≥ 2: –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /rank (–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É)
            await user_handlers.handle_rank(mock_update, mock_context)

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            mock_update.message.reply_text.assert_called_once()
            error_response = mock_update.message.reply_text.call_args[0][0]
            assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in error_response or "–æ—à–∏–±–∫–∞" in error_response.lower()

            # –®–∞–≥ 4: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            user_repo.get_by_id = original_get_by_id

            # –®–∞–≥ 5: –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å–µ—Ä–≤–∏—Å–µ
            original_get_or_create = user_service.get_or_create_user
            user_service.get_or_create_user = AsyncMock(side_effect=Exception("Service error"))

            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_start(mock_update, mock_context)

            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ
            mock_update.message.reply_text.assert_called_once()
            service_error_response = mock_update.message.reply_text.call_args[0][0]
            assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in service_error_response

            # –®–∞–≥ 7: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            user_service.get_or_create_user = original_get_or_create

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_commands_performance_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥"""
        import time

        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_handlers.handle_start(mock_update, mock_context)

            # –®–∞–≥ 2: –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
            commands_to_test = [
                ('rank', user_handlers.handle_rank),
                ('leaderboard', user_handlers.handle_leaderboard),
            ]

            for command_name, handler_method in commands_to_test:
                start_time = time.time()

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É 10 —Ä–∞–∑
                for _ in range(10):
                    mock_update.message.reply_text.reset_mock()
                    await handler_method(mock_update, mock_context)

                end_time = time.time()
                total_time = end_time - start_time
                avg_time = total_time / 10

                # –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
                assert avg_time < 1.0, f"–ö–æ–º–∞–Ω–¥–∞ /{command_name} —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è: {avg_time:.2f}s"
                assert avg_time < 0.5, f"–ö–æ–º–∞–Ω–¥–∞ /{command_name} –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è: {avg_time:.2f}s"

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_user_lifecycle_integration(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã"""
        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        user_handlers = UserHandlers(config, None, user_service)

        try:
            # –®–∞–≥ 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> /start
            await user_handlers.handle_start(mock_update, mock_context)
            profile_initial = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )
            assert profile_initial.rank == "–ù–æ–≤–∏—á–æ–∫"
            assert profile_initial.reputation == 0

            # –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±–∏—Ä–∞–µ—Ç –æ—á–∫–∏
            await score_repo.update_score(mock_update.effective_user.id, 150)  # –ê–∫—Ç–∏–≤–∏—Å—Ç

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω–≥ —á–µ—Ä–µ–∑ /rank
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_rank(mock_update, mock_context)
            rank_response = mock_update.message.reply_text.call_args[0][0]

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º leaderboard
            mock_update.message.reply_text.reset_mock()
            await user_handlers.handle_leaderboard(mock_update, mock_context)
            leaderboard_response = mock_update.message.reply_text.call_args[0][0]

            # –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            profile_final = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –ü—Ä–∏ 150 –æ—á–∫–∞—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω–≥ "–ê–∫—Ç–∏–≤–∏—Å—Ç"
            assert profile_final.reputation == 150
            assert profile_final.rank in ["–ê–∫—Ç–∏–≤–∏—Å—Ç", "–ù–æ–≤–∏—á–æ–∫"]  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞–Ω–≥–æ–≤

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –±–µ–∑ –æ—à–∏–±–æ–∫
            assert mock_update.message.reply_text.call_count == 2

        finally:
            user_repo.close()
            score_repo.close()