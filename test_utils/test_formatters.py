"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
"""

import pytest
from datetime import datetime
from utils.formatters import MessageFormatter, KeyboardFormatter
from telegram import InlineKeyboardButton, InlineKeyboardMarkup


class TestMessageFormatter:
    """–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def test_format_user_info(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user_data = {
            'id': 123456789,
            'name': 'Test User',
            'username': 'test_user',
            'reputation': 150,
            'rank': '–ê–∫—Ç–∏–≤–∏—Å—Ç',
            'message_count': 45,
            'joined_date': '2024-01-15'
        }

        result = MessageFormatter.format_user_info(user_data)

        assert "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>" in result
        assert "üÜî ID: 123456789" in result
        assert "üë§ –ò–º—è: Test User" in result
        assert "üì± Username: @test_user" in result
        assert "üèÜ –†–µ–ø—É—Ç–∞—Ü–∏—è: 150" in result
        assert "‚≠ê –†–∞–Ω–≥: –ê–∫—Ç–∏–≤–∏—Å—Ç" in result
        assert "üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: 45" in result

    def test_format_rank_info(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–Ω–≥–µ"""
        result = MessageFormatter.format_rank_info(150, 2, "–ê–∫—Ç–∏–≤–∏—Å—Ç")

        assert "üèÜ <b>–í–∞—à —Ä–∞–Ω–≥:</b>" in result
        assert "‚≠ê –û—á–∫–∏: 150" in result
        assert "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 2" in result
        assert "üëë –†–æ–ª—å: –ê–∫—Ç–∏–≤–∏—Å—Ç" in result

    def test_format_leaderboard_empty(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        result = MessageFormatter.format_leaderboard([])
        assert "üì≠ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞" in result

    def test_format_leaderboard_with_data(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        users = [
            (111, "user1", "User One", 100),
            (222, "user2", "User Two", 90),
            (333, None, "User Three", 80)
        ]

        result = MessageFormatter.format_leaderboard(users)

        assert "üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>" in result
        assert "ü•á <b>User One</b> - 100 –æ—á–∫–æ–≤" in result
        assert "ü•à <b>User Two</b> - 90 –æ—á–∫–æ–≤" in result
        assert "ü•â <b>User Three</b> - 80 –æ—á–∫–æ–≤" in result

    def test_get_medal(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        formatter = MessageFormatter()

        assert formatter._get_medal(1) == "ü•á"
        assert formatter._get_medal(2) == "ü•à"
        assert formatter._get_medal(3) == "ü•â"
        assert formatter._get_medal(10) == "üîü"
        assert formatter._get_medal(15) == "15."

    def test_format_weather_info(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
        weather_data = {
            'city': '–ú–æ—Å–∫–≤–∞',
            'temp': 20,
            'feels_like': 18,
            'humidity': 65,
            'description': '—è—Å–Ω–æ'
        }

        result = MessageFormatter.format_weather_info(weather_data)

        assert "üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–∞</b>" in result
        assert "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 20¬∞C" in result
        assert "üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: 18¬∞C" in result
        assert "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: 65%" in result
        assert "üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: —è—Å–Ω–æ" in result

    def test_format_news_empty(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        result = MessageFormatter.format_news([])
        assert "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in result

    def test_format_news_with_data(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏"""
        articles = [
            {
                'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ 1',
                'url': 'https://example.com/news1'
            },
            {
                'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ 2',
                'url': 'https://example.com/news2'
            }
        ]

        result = MessageFormatter.format_news(articles)

        assert "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>" in result
        assert "1. <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ 1</b>" in result
        assert "üîó https://example.com/news1" in result
        assert "2. <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ 2</b>" in result

    def test_format_error_report(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        error_data = {
            'id': 1,
            'type': 'bug',
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞',
            'priority': 'high',
            'admin_name': 'Test Admin',
            'created_at': '2024-01-15',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏'
        }

        result = MessageFormatter.format_error_report(error_data)

        assert "üêõ <b>–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ #1</b>" in result
        assert "üìã –¢–∏–ø: bug" in result
        assert "üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞" in result
        assert "‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: high" in result
        assert "üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: Test Admin" in result
        assert "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏" in result

    def test_format_donation_info(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–Ω–∞—Ç–µ"""
        result = MessageFormatter.format_donation_info(100.0, 10)

        assert "üí∞ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>" in result
        assert "üíµ –°—É–º–º–∞: 100.0 RUB" in result
        assert "‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: 10" in result
        assert "üéâ –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞!" in result

    def test_format_achievement(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        result = MessageFormatter.format_achievement("–ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç", "–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç!")

        assert "üèÜ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>" in result
        assert "üéñ –ü–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç" in result
        assert "üìù –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–Ω–∞—Ç!" in result

    def test_format_moderation_info_with_transcription(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
        result = MessageFormatter.format_moderation_info("audio", "Test User", "–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")

        assert "üîç <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>" in result
        assert "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Test User" in result
        assert "üìÅ –¢–∏–ø —Ñ–∞–π–ª–∞: –ê–£–î–ò–û" in result
        assert "üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏" in result

    def test_format_moderation_info_without_transcription(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        result = MessageFormatter.format_moderation_info("video", "Test User")

        assert "üîç <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>" in result
        assert "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Test User" in result
        assert "üìÅ –¢–∏–ø —Ñ–∞–π–ª–∞: –í–ò–î–ï–û" in result
        assert "üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:" not in result

    def test_escape_html(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–∏–º–≤–æ–ª–æ–≤"""
        text = '<div>Test & "quotes" \'apostrophe\'</div>'
        result = MessageFormatter.escape_html(text)

        assert "<div>" in result
        assert "&" in result
        #assert ""quotes"" in result #–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∫–∞–≤—ã—á–∫–∞–º–∏
        assert "&quot;quotes&quot;" in result
        assert "&#x27;apostrophe&#x27;" in result

    def test_escape_html_empty(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏"""
        assert MessageFormatter.escape_html("") == ""
        assert MessageFormatter.escape_html(None) == ""

    def test_truncate_text(self):
        """–¢–µ—Å—Ç —É—Å–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å–µ—á—å"

        # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        result = MessageFormatter.truncate_text(text, 50)
        assert len(result) <= 50
        # Text length is 45, max_length is 50, so no truncation should occur
        assert result == text

        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        short_text = "–ö–æ—Ä–æ—Ç–∫–∏–π"
        result = MessageFormatter.truncate_text(short_text, 50)
        assert result == short_text

        # –¢–µ–∫—Å—Ç –±–µ–∑ —É—Å–µ—á–µ–Ω–∏—è
        result = MessageFormatter.truncate_text(text, 100)
        assert result == text

    def test_truncate_text_custom_suffix(self):
        """–¢–µ—Å—Ç —É—Å–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º"""
        text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
        result = MessageFormatter.truncate_text(text, 5, "[...]")
        # "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç" has length 14, max_length=5, suffix="[...]" has length 5
        # So text[:5-5] + "[...]" = text[:0] + "[...]" = "[...]"
        assert result == "[...]"
        assert len(result) == 5  # —Å—É—Ñ—Ñ–∏–∫—Å –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É 5 —Å–∏–º–≤–æ–ª–æ–≤


class TestKeyboardFormatter:
    """–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    def test_create_main_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = KeyboardFormatter.create_main_menu()

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 4

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = keyboard.inline_keyboard
        assert buttons[0][0].text == "üìã –ü–æ–º–æ—â—å"
        assert buttons[0][0].callback_data == "menu_help"
        assert buttons[1][0].text == "üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã"
        assert buttons[1][0].callback_data == "menu_games"

    def test_create_games_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∏–≥—Ä"""
        keyboard = KeyboardFormatter.create_games_menu()

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 8  # 7 –∏–≥—Ä + –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É (–ù–∞–∑–∞–¥)
        buttons = keyboard.inline_keyboard
        assert buttons[-1][0].text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        assert buttons[-1][0].callback_data == "menu_main"

    def test_create_donation_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –¥–æ–Ω–∞—Ç–æ–≤"""
        keyboard = KeyboardFormatter.create_donation_menu()

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 7  # 5 —Å—É–º–º + –¥—Ä—É–≥–∞—è —Å—É–º–º–∞ + –Ω–∞–∑–∞–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—É–º–º
        buttons = keyboard.inline_keyboard
        assert buttons[0][0].text == "üí∞ 100 ‚ÇΩ"
        assert buttons[0][0].callback_data == "donate_100"
        assert buttons[5][0].text == "üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞"
        assert buttons[5][0].callback_data == "donate_custom"

    def test_create_admin_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = KeyboardFormatter.create_admin_menu()

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 5  # 4 —Ñ—É–Ω–∫—Ü–∏–∏ + –Ω–∞–∑–∞–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        buttons = keyboard.inline_keyboard
        assert buttons[0][0].text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        assert buttons[0][0].callback_data == "admin_users"
        assert buttons[1][0].text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        assert buttons[1][0].callback_data == "admin_stats"

    def test_create_moderation_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = KeyboardFormatter.create_moderation_menu("audio", 123456789)

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 3  # 3 –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

        buttons = keyboard.inline_keyboard
        assert buttons[0][0].text == "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å"
        assert buttons[0][0].callback_data == "moderate_approve_123456789"
        assert buttons[1][0].text == "‚è∞ –û–¥–æ–±—Ä–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"
        assert buttons[1][0].callback_data == "moderate_delay_123456789"
        assert buttons[2][0].text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        assert buttons[2][0].callback_data == "moderate_reject_123456789"

    def test_create_confirmation_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        keyboard = KeyboardFormatter.create_confirmation_menu("yes", "no")

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 2

        buttons = keyboard.inline_keyboard
        assert buttons[0][0].text == "–î–∞"
        assert buttons[0][0].callback_data == "yes"
        assert buttons[1][0].text == "–ù–µ—Ç"
        assert buttons[1][0].callback_data == "no"

    def test_create_confirmation_menu_custom_text(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        keyboard = KeyboardFormatter.create_confirmation_menu("confirm", "cancel", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∞")

        assert isinstance(keyboard, InlineKeyboardMarkup)
        buttons = keyboard.inline_keyboard
        assert buttons[0][0].text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        assert buttons[0][0].callback_data == "confirm"
        assert buttons[1][0].text == "–û—Ç–º–µ–Ω–∞"
        assert buttons[1][0].callback_data == "cancel"

    def test_create_pagination_menu_single_page(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        keyboard = KeyboardFormatter.create_pagination_menu(1, 1, "test")

        assert isinstance(keyboard, InlineKeyboardMarkup)
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        assert len(keyboard.inline_keyboard) == 1
        assert keyboard.inline_keyboard[0][0].text == "üìÑ 1/1"

    def test_create_pagination_menu_multiple_pages(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        keyboard = KeyboardFormatter.create_pagination_menu(2, 5, "test")

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 2  # –ù–∞–≤–∏–≥–∞—Ü–∏—è + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        nav_buttons = keyboard.inline_keyboard[0]
        assert nav_buttons[0].text == "‚¨ÖÔ∏è"
        assert nav_buttons[0].callback_data == "test_prev"
        assert nav_buttons[1].text == "‚û°Ô∏è"
        assert nav_buttons[1].callback_data == "test_next"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        info_button = keyboard.inline_keyboard[1][0]
        assert info_button.text == "üìÑ 2/5"
        assert info_button.callback_data == "test_info"

    def test_create_pagination_menu_first_page(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        keyboard = KeyboardFormatter.create_pagination_menu(1, 5, "test")

        assert isinstance(keyboard, InlineKeyboardMarkup)
        nav_buttons = keyboard.inline_keyboard[0]
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥"
        assert len(nav_buttons) == 1
        assert nav_buttons[0].text == "‚û°Ô∏è"
        assert nav_buttons[0].callback_data == "test_next"

    def test_create_pagination_menu_last_page(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        keyboard = KeyboardFormatter.create_pagination_menu(5, 5, "test")

        assert isinstance(keyboard, InlineKeyboardMarkup)
        nav_buttons = keyboard.inline_keyboard[0]
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
        assert len(nav_buttons) == 1
        assert nav_buttons[0].text == "‚¨ÖÔ∏è"
        assert nav_buttons[0].callback_data == "test_prev"
