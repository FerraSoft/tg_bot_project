"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã.
"""

import logging
import time
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes
from core.exceptions import BotException, ValidationError, PermissionError
from utils.formatters import MessageFormatter
from metrics.monitoring import MetricsCollector


class BaseHandler(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.

    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    - –ü—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    """

    def __init__(self, config, metrics: MetricsCollector, message_formatter: MessageFormatter = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            metrics: –°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
            message_formatter: –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.config = config
        self.metrics = metrics
        self.message_formatter = message_formatter or MessageFormatter()
        self.logger = logging.getLogger(__name__)

    def _ensure_utf8_encoding(self, text: str) -> str:
        """
        –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram API.

        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            –¢–µ–∫—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        """
        if isinstance(text, str):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –≤ UTF-8
            try:
                text.encode('utf-8')
                return text
            except UnicodeEncodeError:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
                return text.encode('utf-8', errors='replace').decode('utf-8')
        return str(text)

    async def safe_execute(self, update: Update, context: ContextTypes, action: str, func, *args, **kwargs):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            action: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        start_time = time.time()
        try:
            result = await func(update, context, *args, **kwargs)
            duration = time.time() - start_time
            if self.metrics:
                self.metrics.record_command(action, self.__class__.__name__, duration)
            return result
        except BotException as e:
            duration = time.time() - start_time
            if self.metrics:
                self.metrics.record_error(e.__class__.__name__, self.__class__.__name__, e)
            await self._handle_bot_exception(update, e)
        except Exception as e:
            duration = time.time() - start_time
            self.logger.error(f"Unexpected error in {action}: {e}", exc_info=True)
            if self.metrics:
                self.metrics.record_error(e.__class__.__name__, self.__class__.__name__, e)
            await self._handle_unexpected_error(update, context, action, e)

    async def _handle_bot_exception(self, update: Update, exception: BotException):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
        error_message = f"‚ùå {exception.message}"

        if isinstance(exception, ValidationError):
            error_message = f"‚ö†Ô∏è {exception.message}"
        elif isinstance(exception, PermissionError):
            error_message = f"üö´ {exception.message}"

        await self._send_error_message(update, error_message)

    async def _handle_unexpected_error(self, update: Update, context: ContextTypes, action: str, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if isinstance(error, TypeError) and "can't be used in 'await' expression" in str(error):
            error_message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif isinstance(error, Exception) and "FOREIGN KEY" in str(error):
            error_message = "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö."
        elif isinstance(error, Exception) and "database is locked" in str(error):
            error_message = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await self._log_error_to_admin(context, action, error)

        await self._send_error_message(update, error_message)

    async def send_response(self, update: Update, text: str, parse_mode: str = None, reply_markup=None):
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ ('HTML', 'Markdown', etc.)
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
            safe_text = self._ensure_utf8_encoding(text)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if update.message:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await update.message.reply_text(
                    safe_text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
            elif update.callback_query:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    await update.callback_query.edit_message_text(
                        safe_text,
                        parse_mode=parse_mode,
                        reply_markup=reply_markup
                    )
                except Exception as edit_error:
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                    if update.callback_query.message:
                        await update.callback_query.message.reply_text(
                            safe_text,
                            parse_mode=parse_mode,
                            reply_markup=reply_markup
                        )
            else:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
                if update.effective_chat:
                    await update.effective_chat.send_message(
                        safe_text,
                        parse_mode=parse_mode,
                        reply_markup=reply_markup
                    )
                else:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

        except Exception as e:
            if "TimedOut" in str(type(e)) or "timeout" in str(e).lower():
                self.logger.warning(f"Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {e}")
                return  # –ù–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö
            elif "Query is too old" in str(e):
                self.logger.warning(f"Query —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {e}")
                return  # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ queries
            elif "Message is not modified" in str(e):
                self.logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {e}")
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∏–∑–º–µ–Ω–∏–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}", exc_info=True)

    async def _send_error_message(self, update: Update, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await self.send_response(update, message)

    async def _log_error_to_admin(self, context: ContextTypes, action: str, error: Exception):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            if self.config.bot_config.enable_developer_notifications:
                developer_id = self.config.bot_config.developer_chat_id
                if developer_id:
                    from datetime import datetime
                    error_text = (
                        "üö® –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ\n\n"
                        f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
                        f"–û—à–∏–±–∫–∞: {str(error)}\n"
                        f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
                    safe_error_text = self._ensure_utf8_encoding(error_text)
                    await context.bot.send_message(
                        chat_id=developer_id,
                        text=safe_error_text
                    )
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: '{e}'", exc_info=True)

    def validate_user_id(self, user_id: str) -> int:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: –°—Ç—Ä–æ–∫–∞ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –¶–µ–ª–æ–µ —á–∏—Å–ª–æ ID

        Raises:
            ValidationError: –ï—Å–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        """
        try:
            uid = int(user_id)
            if not (1 <= uid <= 2147483647):
                raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return uid
        except ValueError:
            raise ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    def validate_chat_id(self, chat_id: str) -> int:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID —á–∞—Ç–∞.

        Args:
            chat_id: –°—Ç—Ä–æ–∫–∞ —Å ID —á–∞—Ç–∞

        Returns:
            –¶–µ–ª–æ–µ —á–∏—Å–ª–æ ID

        Raises:
            ValidationError: –ï—Å–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        """
        try:
            cid = int(chat_id)
            if not (-2147483648 <= cid <= 2147483647):
                raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ID —á–∞—Ç–∞")
            return cid
        except ValueError:
            raise ValidationError("ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async def is_admin(self, update: Update, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ PermissionManager.

        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        """
        from core.permissions import permission_manager, UserRole

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        effective_role = await permission_manager.get_effective_role(update, user_id, self.config)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π
        return effective_role in [UserRole.ADMIN, UserRole.SUPER_ADMIN]

    async def require_admin(self, update: Update, user_id: int):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Raises:
            PermissionError: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        """
        if not await self.is_admin(update, user_id):
            raise PermissionError("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")

    def extract_user_id_from_args(self, args: list) -> Optional[int]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã.

        Args:
            args: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã

        Returns:
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        if not args:
            return None

        try:
            return self.validate_user_id(args[0])
        except ValidationError:
            return None

    def extract_amount_from_args(self, args: list, default: float = None) -> Optional[float]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã.

        Args:
            args: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        Returns:
            –°—É–º–º–∞ –∏–ª–∏ None
        """
        if not args:
            return default

        try:
            amount = float(args[0])
            if amount <= 0:
                return None
            return amount
        except (ValueError, IndexError):
            return None

    def format_user_mention(self, user_id: int, name: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        """
        return f"[{name}](tg://user?id={user_id})"

    @abstractmethod
    def get_command_handlers(self) -> Dict[str, callable]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∫–æ–º–∞–Ω–¥–∞: —Ñ—É–Ω–∫—Ü–∏—è_–æ–±—Ä–∞–±–æ—Ç—á–∏–∫}
        """
        pass

    @abstractmethod
    def get_callback_handlers(self) -> Dict[str, callable]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤.

        Returns:
            –°–ª–æ–≤–∞—Ä—å {callback_data: —Ñ—É–Ω–∫—Ü–∏—è_–æ–±—Ä–∞–±–æ—Ç—á–∏–∫}
        """
        pass

    @abstractmethod
    def get_message_handlers(self) -> Dict[str, callable]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.

        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Ç–∏–ø_—Å–æ–æ–±—â–µ–Ω–∏—è: —Ñ—É–Ω–∫—Ü–∏—è_–æ–±—Ä–∞–±–æ—Ç—á–∏–∫}
        """
        pass