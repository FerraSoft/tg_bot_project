#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É roles –∏ –∫–æ–ª–æ–Ω–∫—É role_id –≤ —Ç–∞–±–ª–∏—Ü—É users.
"""

import sqlite3
import json
import sys
import os

# Set UTF-8 encoding for Windows console
try:
    if sys.platform == 'win32':
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'replace')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'replace')
except:
    pass  # Ignore if encoding setup fails

def migrate_roles():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""

    db_path = 'telegram_bot.db'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(db_path):
        print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π...")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π...")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS roles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                display_name TEXT NOT NULL,
                description TEXT,
                permissions TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ roles —Å–æ–∑–¥–∞–Ω–∞")

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏
        roles_data = [
            (1, 'user', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Ç–∞', json.dumps({
                "can_use_basic_commands": True,
                "can_play_games": True
            })),
            (2, 'moderator', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', json.dumps({
                "can_use_basic_commands": True,
                "can_play_games": True,
                "can_moderate": True,
                "can_warn_users": True
            })),
            (3, 'admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏', json.dumps({
                "can_use_basic_commands": True,
                "can_play_games": True,
                "can_moderate": True,
                "can_warn_users": True,
                "can_manage_users": True,
                "can_schedule_posts": True,
                "can_export_data": True
            }))
        ]

        print("üìù –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏...")
        for role_data in roles_data:
            cursor.execute('''
                INSERT OR IGNORE INTO roles (id, name, display_name, description, permissions)
                VALUES (?, ?, ?, ?, ?)
            ''', role_data)

        print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É role_id –≤ —Ç–∞–±–ª–∏—Ü—É users
        print("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É role_id –≤ —Ç–∞–±–ª–∏—Ü—É users...")
        try:
            cursor.execute('ALTER TABLE users ADD COLUMN role_id INTEGER DEFAULT 1')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ role_id –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except sqlite3.OperationalError as e:
            if 'duplicate column name' in str(e):
                print("‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ role_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                raise e

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_users_role_id ON users(role_id)')
        print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_users_role_id —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
        cursor.execute('SELECT COUNT(*) as count FROM roles')
        roles_count = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) as count FROM users')
        users_count = cursor.fetchone()[0]

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –†–æ–ª–µ–π: {roles_count}")
        print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        cursor.execute('SELECT id, name, display_name FROM roles ORDER BY id')
        roles = cursor.fetchall()
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:")
        for role in roles:
            print(f"   ‚Ä¢ {role[0]}: {role[1]} ({role[2]})")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –ø–æ —Ä–æ–ª—è–º.")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        if 'conn' in locals():
            conn.rollback()
        return False

    finally:
        if 'conn' in locals():
            conn.close()


if __name__ == "__main__":
    success = migrate_roles()
    sys.exit(0 if success else 1)