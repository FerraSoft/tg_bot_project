#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
"""

import os
import json
import sys
import io
from pathlib import Path

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def print_header(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏"""
    print(f"\nüöÄ {text}")
    print("=" * (len(text) + 3))

def print_success(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"‚úÖ {text}")

def print_warning(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"‚ö†Ô∏è {text}")

def print_error(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—à–∏–±–∫—É"""
    print(f"‚ùå {text}")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

    required_packages = [
        'prometheus_client',
        'sentry-sdk',
        'flask',
        'requests'
    ]

    missing_packages = []

    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print_success(f"{package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_packages.append(package)
            print_error(f"{package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    if missing_packages:
        print_warning(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: pip install {' '.join(missing_packages)}")
        return False

    return True

def setup_configuration():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    config_path = "config_local.py"

    if not os.path.exists(config_path):
        print_warning(f"–§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ config_template.py")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    with open(config_path, 'r', encoding='utf-8') as f:
        config_content = f.read()

    monitoring_settings = [
        'ENABLE_SENTRY',
        'SENTRY_DSN',
        'PROMETHEUS_PORT',
        'ENABLE_DEVELOPER_NOTIFICATIONS',
        'DEVELOPER_CHAT_ID'
    ]

    missing_settings = []
    for setting in monitoring_settings:
        if setting not in config_content:
            missing_settings.append(setting)

    if missing_settings:
        print_warning("–î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ config_local.py:")
        print("\n# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫")
        print("ENABLE_SENTRY = True")
        print('SENTRY_DSN = "http://localhost:8000/api/1/project/your-project/dsn/"')
        print("PROMETHEUS_PORT = 8000")
        print("ENABLE_DEVELOPER_NOTIFICATIONS = True")
        print("DEVELOPER_CHAT_ID = 123456789  # –í–∞—à Telegram ID")
        return False

    print_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    return True

def check_glitchtip_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GlitchTip"""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ GlitchTip")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
    docker_compose_path = "docker-compose.yml"
    if os.path.exists(docker_compose_path):
        with open(docker_compose_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if 'glitchtip' in content.lower():
                print_success("Docker Compose –¥–ª—è GlitchTip –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print_warning("GlitchTip –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ docker-compose.yml")
    else:
        print_warning("docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ GLITCHTIP_SETUP.md")

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π")

    modules_to_test = [
        ('core.monitoring', 'MetricsCollector'),
        ('core.alerts', 'AlertManager'),
        ('prometheus_client', 'Counter'),
        ('sentry_sdk', 'init')
    ]

    all_good = True

    for module_name, class_name in modules_to_test:
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            print_success(f"{module_name}.{class_name} - –¥–æ—Å—Ç—É–ø–µ–Ω")
        except (ImportError, AttributeError) as e:
            print_error(f"{module_name}.{class_name} - –æ—à–∏–±–∫–∞: {e}")
            all_good = False

    return all_good

def check_documentation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

    required_docs = [
        'MONITORING.md',
        'README_MONITORING.md',
        'GLITCHTIP_SETUP.md',
        'WEBHOOK_ALERTS.md',
        'START_MONITORING.md'
    ]

    all_docs_present = True

    for doc in required_docs:
        if os.path.exists(doc):
            print_success(f"{doc} - –Ω–∞–π–¥–µ–Ω")
        else:
            print_error(f"{doc} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_docs_present = False

    return all_docs_present

def create_sample_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_header("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    sample_config = '''
# –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è config_local.py

# –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
ENABLE_SENTRY = True
SENTRY_DSN = "http://localhost:8000/api/1/project/your-project-id/dsn/"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Prometheus
PROMETHEUS_PORT = 8000

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
ENABLE_DEVELOPER_NOTIFICATIONS = True
DEVELOPER_CHAT_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_CONFIG = {
    "level": "INFO",
    "file": "bot.log",
    "format": "json",
    "max_size": 10*1024*1024,
    "backup_count": 5
}
'''

    config_path = "config_monitoring_sample.py"
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(sample_config)

    print_success(f"–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {config_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 50)

    all_checks_passed = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        all_checks_passed = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not setup_configuration():
        all_checks_passed = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GlitchTip
    check_glitchtip_setup()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        all_checks_passed = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    if not check_documentation():
        all_checks_passed = False

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    create_sample_config()

    print("\n" + "=" * 50)
    if all_checks_passed:
        print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GlitchTip –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ GLITCHTIP_SETUP.md")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ DSN –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ config_local.py")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python new_bot.py")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏: http://localhost:8000/metrics")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–Ω–æ–≤–∞")

    print(f"\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–∞—Ö:")
    for file in ['MONITORING.md', 'README_MONITORING.md', 'GLITCHTIP_SETUP.md', 'START_MONITORING.md']:
        if os.path.exists(file):
            print(f"‚Ä¢ {file}")

if __name__ == "__main__":
    main()