"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—É—Ç—å: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Üí –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ /info –∫–æ–º–∞–Ω–¥–µ.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, —ç–º–æ–¥–∑–∏ –∏ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏.
"""

import pytest
import tempfile
import os
from unittest.mock import Mock, AsyncMock
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.application import Application
from core.config import Config


class TestWarningsIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8"""

    @pytest.fixture
    def temp_config(self):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
            f.write("""
BOT_TOKEN = "123456789:integration_test_token"
ADMIN_IDS = [123456789, 987654321]
OPENWEATHER_API_KEY = "test_key"
NEWS_API_KEY = "test_key"
OPENAI_API_KEY = "test_key"
""")
            config_path = f.name

        yield config_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(config_path):
            os.unlink(config_path)

    @pytest.fixture
    def temp_db(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–∞–±–ª–∏—Ü"""
        from database.models import DatabaseSchema
        from database.repository import UserRepository, ScoreRepository

        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        repo = UserRepository(db_path)
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            for table_sql in DatabaseSchema.get_create_tables_sql():
                repo._execute_query(table_sql)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            repo.initialize_achievements()

        finally:
            repo.close()

        yield db_path

        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(db_path):
            os.unlink(db_path)

    @pytest.fixture
    def mock_update(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        update = Mock()

        # –ú–æ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Mock()
        user.id = 123456789
        user.username = "test_user"
        user.first_name = "–¢–µ—Å—Ç–æ–≤—ã–π"
        user.last_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        update.effective_user = user

        # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Mock()
        message.message_id = 1
        message.reply_text = AsyncMock()
        update.message = message

        # –ú–æ–∫–∞–µ–º —á–∞—Ç
        chat = Mock()
        chat.id = -1001234567890
        update.effective_chat = chat

        return update

    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞"""
        context = Mock()
        context.args = []

        # –ú–æ–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Mock()
        app._date_time = datetime.now()
        context._application = app

        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞
        bot = AsyncMock()
        context.bot = bot

        context.user_data = {}

        return context

    @pytest.mark.asyncio
    async def test_full_warnings_flow_utf8(self, temp_config, temp_db, mock_update, mock_context):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config(temp_config)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
        from database.repository import UserRepository, ScoreRepository
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)

        from services.user_service import UserService
        user_service = UserService(user_repo, score_repo)

        from services.moderation_service import ModerationService
        moderation_service = ModerationService(user_repo, score_repo)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
        from handlers.user_handlers import UserHandlers
        user_handlers = UserHandlers(config, config, user_service)

        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )
            assert user_profile is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
            assert user_profile.warnings == 0, "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0"

            # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å UTF-8 —Ç–µ–∫—Å—Ç–æ–º
            test_reasons = [
                "–°–ø–∞–º –≤ —á–∞—Ç–µ üö´",
                "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ —Å —ç–º–æ–¥–∑–∏ üò°",
                "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–æ–≤–µ–¥–µ–Ω–∏—è üìã",
                "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å UTF-8 —Å–∏–º–≤–æ–ª–∞–º–∏: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üåç",
                "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: √†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø",
                "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞: –ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
            ]

            admin_id = 987654321  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

            for i, reason in enumerate(test_reasons):
                print(f"[TEST] –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {i+1}: '{reason}'")
                result = await moderation_service.warn_user(
                    mock_update.effective_user.id,
                    reason,
                    admin_id
                )

                assert result['success'] == True, f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {i+1} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
                assert result['warnings_count'] == i + 1, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {i+1}"
                assert result['reason'] == reason, f"–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è: {reason}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                current_warnings = user_repo.get_warnings_count(mock_update.effective_user.id)
                assert current_warnings == i + 1, f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {i+1} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ(–π)"

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ /info
            await user_handlers.handle_info(mock_update, mock_context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            mock_update.message.reply_text.assert_called_once()

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            assert "üë§" in response_text, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            assert "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" in response_text, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
            assert "–¢–µ—Å—Ç–æ–≤—ã–π" in response_text, "–î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            assert f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(test_reasons)}" in response_text, f"–î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è {len(test_reasons)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ UTF-8 —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            for reason in test_reasons:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ
                if "–°–ø–∞–º –≤ —á–∞—Ç–µ" in reason:
                    assert "–°–ø–∞–º" in response_text, "–¢–µ–∫—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                if "üö´" in reason:
                    assert "üö´" in response_text, "–≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                if "üåç" in reason:
                    assert "üåç" in response_text, "–≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

            print("[SUCCESS] –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ /info")

        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_warnings_with_special_characters(self, temp_config, temp_db):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ UTF-8"""
        from database.repository import UserRepository, ScoreRepository
        from services.user_service import UserService
        from services.moderation_service import ModerationService

        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        moderation_service = ModerationService(user_repo, score_repo)

        try:
            test_user_id = 111111111
            admin_id = 222222222

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_service.get_or_create_user(test_user_id, "testuser", "–¢–µ—Å—Ç", "–Æ–∑–µ—Ä")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            special_reasons = [
                "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã: ‚àë‚àè‚àö‚à´‚àÜ‚àû‚â†‚âà‚â§‚â•",
                "–°—Ç—Ä–µ–ª–∫–∏: ‚Üê‚Üë‚Üí‚Üì‚Üî‚áÑ‚áÖ",
                "–§–∏–≥—É—Ä–∫–∏: ‚óè‚óã‚ñ†‚ñ°‚óÜ‚óá‚òÖ‚òÜ‚ô°‚ô¢‚ô§‚ôß",
                "–í–∞–ª—é—Ç—ã: ¬¢¬£¬§¬•‚Ç¨‚ÇΩ‚Çø",
                "–î—Ä–æ–±–∏: ¬Ω‚Öì¬º¬æ‚Öï‚Öô‚Öõ‚Öî‚Öñ‚Öö‚Öú‚Öó‚Öò‚Öô‚Öö‚Öõ‚Öú‚Öù‚Öû‚Öü",
                "–ù–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–µ: ‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ‚Åø",
                "–ü–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–µ: ‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çä‚Çã‚Çå‚Çç‚Çé",
                "–ê–∫—Ü–µ–Ω—Ç—ã: √†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø",
                "–ì—Ä–µ—á–µ—Å–∫–∏–π: Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÑœÖœÜœáœàœâ",
                "–ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã: ‰Ω†Â•Ω‰∏ñÁïå„Åì„Çì„Å´„Å°„ÅØÏïàÎÖïÌïòÏÑ∏Ïöî"
            ]

            for reason in special_reasons:
                print(f"[TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É: '{reason}'")
                result = await moderation_service.warn_user(test_user_id, reason, admin_id)

                assert result['success'] == True, f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ '{reason[:20]}...' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ"
                assert result['reason'] == reason, f"–¢–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {reason}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                warnings_count = user_repo.get_warnings_count(test_user_id)
                assert warnings_count > 0, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î"

            print("[SUCCESS] –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã UTF-8 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_warnings_display_in_info_command(self, temp_config, temp_db, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥–µ /info"""
        from database.repository import UserRepository, ScoreRepository
        from services.user_service import UserService
        from services.moderation_service import ModerationService
        from handlers.user_handlers import UserHandlers
        from core.config import Config

        config = Config(temp_config)
        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        moderation_service = ModerationService(user_repo, score_repo)
        user_handlers = UserHandlers(config, config, user_service)

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_service.get_or_create_user(
                mock_update.effective_user.id,
                mock_update.effective_user.username,
                mock_update.effective_user.first_name,
                mock_update.effective_user.last_name
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
            warnings_to_add = [
                "–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚ö†Ô∏è",
                "–í—Ç–æ—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ üö´",
                "–¢—Ä–µ—Ç—å–µ –∑–∞–º–µ—á–∞–Ω–∏–µ üìã"
            ]

            for reason in warnings_to_add:
                await moderation_service.warn_user(
                    mock_update.effective_user.id,
                    reason,
                    987654321
                )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /info
            await user_handlers.handle_info(mock_update, mock_context)

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            call_args = mock_update.message.reply_text.call_args
            response_text = call_args[0][0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            assert "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 3" in response_text, "–î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            assert "–¢–µ—Å—Ç–æ–≤—ã–π" in response_text, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è"

            print("[SUCCESS] –ö–æ–º–∞–Ω–¥–∞ /info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")

        finally:
            user_repo.close()
            score_repo.close()

    @pytest.mark.asyncio
    async def test_warnings_persistence_across_sessions(self, temp_config, temp_db):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏"""
        from database.repository import UserRepository, ScoreRepository
        from services.user_service import UserService
        from services.moderation_service import ModerationService

        # –ü–µ—Ä–≤–∞—è "—Å–µ—Å—Å–∏—è" - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        user_repo1 = UserRepository(temp_db)
        score_repo1 = ScoreRepository(temp_db)
        user_service1 = UserService(user_repo1, score_repo1)
        moderation_service1 = ModerationService(user_repo1, score_repo1)

        try:
            test_user_id = 333333333
            admin_id = 444444444

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            await user_service1.get_or_create_user(test_user_id, "persist_test", "–ü–µ—Ä—Å–∏—Å—Ç", "–¢–µ—Å—Ç")

            test_reason = "–¢–µ—Å—Ç persistence —Å —ç–º–æ–¥–∑–∏ üíæ"
            await moderation_service1.warn_user(test_user_id, test_reason, admin_id)

            initial_count = user_repo1.get_warnings_count(test_user_id)
            assert initial_count == 1, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"

        finally:
            user_repo1.close()
            score_repo1.close()

        # –í—Ç–æ—Ä–∞—è "—Å–µ—Å—Å–∏—è" - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        user_repo2 = UserRepository(temp_db)
        score_repo2 = ScoreRepository(temp_db)
        user_service2 = UserService(user_repo2, score_repo2)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await user_service2.get_or_create_user(test_user_id, "persist_test", "–ü–µ—Ä—Å–∏—Å—Ç", "–¢–µ—Å—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            final_count = user_repo2.get_warnings_count(test_user_id)
            assert final_count == 1, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏"

            assert user_profile.warnings == 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º"

            print("[SUCCESS] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏")

        finally:
            user_repo2.close()
            score_repo2.close()

    @pytest.mark.asyncio
    async def test_multiple_users_warnings_isolation(self, temp_config, temp_db):
        """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        from database.repository import UserRepository, ScoreRepository
        from services.user_service import UserService
        from services.moderation_service import ModerationService

        user_repo = UserRepository(temp_db)
        score_repo = ScoreRepository(temp_db)
        user_service = UserService(user_repo, score_repo)
        moderation_service = ModerationService(user_repo, score_repo)

        try:
            # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user1_id = 555555555
            user2_id = 666666666
            admin_id = 777777777

            await user_service.get_or_create_user(user1_id, "user1", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ü–µ—Ä–≤—ã–π")
            await user_service.get_or_create_user(user2_id, "user2", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–í—Ç–æ—Ä–æ–π")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await moderation_service.warn_user(user1_id, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§", admin_id)
            await moderation_service.warn_user(user1_id, "–í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ üö®", admin_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await moderation_service.warn_user(user2_id, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üéØ", admin_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
            user1_warnings = user_repo.get_warnings_count(user1_id)
            user2_warnings = user_repo.get_warnings_count(user2_id)

            assert user1_warnings == 2, "–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
            assert user2_warnings == 1, "–í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"

            print("[SUCCESS] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞")

        finally:
            user_repo.close()
            score_repo.close()