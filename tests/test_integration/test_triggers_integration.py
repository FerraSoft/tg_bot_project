"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.
"""

import pytest
from unittest.mock import Mock, AsyncMock, patch
from telegram import Update, Message, User

from core.message_router import create_message_router
from services.trigger_service import TriggerService
from database.repository import TriggerRepository


class TestTriggersIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""

    @pytest.fixture
    def mock_database_url(self):
        """URL —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return ':memory:'

    @pytest.fixture
    async def trigger_service(self, mock_database_url):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        service = TriggerService(mock_database_url)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        await service.add_trigger({
            'name': 'test_hello',
            'pattern': r'hello\s+world',
            'response_text': 'Hi there!',
            'chat_type': 'group'
        })

        yield service

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        await service.clear_cache()

    @pytest.fixture
    def message_router(self, trigger_service):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        return create_message_router(trigger_service)

    @pytest.fixture
    def mock_update_group_message(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
        update = Mock(spec=Update)
        message = Mock(spec=Message)
        user = Mock(spec=User)
        chat = Mock()

        user.id = 123456
        message.text = "hello world test"
        message.message_id = 789
        message.chat_id = 987654
        chat.type = "group"

        update.message = message
        update.effective_user = user
        update.effective_chat = chat

        return update

    @pytest.fixture
    def mock_update_private_message(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–µ"""
        update = Mock(spec=Update)
        message = Mock(spec=Message)
        user = Mock(spec=User)
        chat = Mock()

        user.id = 123456
        message.text = "hello world private"
        chat.type = "private"

        update.message = message
        update.effective_user = user
        update.effective_chat = chat

        return update

    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞"""
        context = Mock()
        context.bot = Mock()
        context.bot.send_message = AsyncMock()
        context.bot.send_sticker = AsyncMock()
        context.bot.send_animation = AsyncMock()
        context.bot.set_message_reaction = AsyncMock()
        return context

    @pytest.mark.asyncio
    async def test_trigger_fires_in_group_chat(self, trigger_service, message_router,
                                              mock_update_group_message, mock_context):
        """–¢–µ—Å—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞–π–¥–µ–Ω
        matched_triggers = await trigger_service.check_triggers("hello world test", "group")
        assert len(matched_triggers) == 1
        assert matched_triggers[0]['name'] == 'test_hello'

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        actions = await trigger_service.execute_trigger_actions(
            matched_triggers, 987654, "hello world test", 789
        )

        assert len(actions) == 1
        assert actions[0]['type'] == 'text'
        assert actions[0]['content'] == 'Hi there!'

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
        await message_router._execute_trigger_actions(actions, mock_update_group_message, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_context.bot.send_message.assert_called_once_with(
            chat_id=987654,
            text='Hi there!',
            reply_to_message_id=789
        )

    @pytest.mark.asyncio
    async def test_trigger_not_fires_in_private_chat(self, trigger_service, message_router,
                                                    mock_update_private_message, mock_context):
        """–¢–µ—Å—Ç, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        matched_triggers = await trigger_service.check_triggers("hello world private", "private")
        assert len(matched_triggers) == 0

        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        result = await message_router.route_text_message(mock_update_private_message, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        # (–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è)

    @pytest.mark.asyncio
    async def test_trigger_with_reaction(self, trigger_service, message_router,
                                        mock_update_group_message, mock_context):
        """–¢–µ—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å —Ä–µ–∞–∫—Ü–∏–µ–π"""
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —Å —Ä–µ–∞–∫—Ü–∏–µ–π
        await trigger_service.add_trigger({
            'name': 'reaction_trigger',
            'pattern': r'react\s+test',
            'reaction_type': 'emoji',
            'action_data': 'üëç',
            'chat_type': 'group'
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        matched_triggers = await trigger_service.check_triggers("react test message", "group")
        assert len(matched_triggers) == 1

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        actions = await trigger_service.execute_trigger_actions(
            matched_triggers, 987654, "react test message", 789
        )

        assert len(actions) == 1
        assert actions[0]['type'] == 'reaction'
        assert actions[0]['content'] == 'üëç'

        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
        await message_router._execute_trigger_actions(actions, mock_update_group_message, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–∞–∫—Ü–∏–∏
        mock_context.bot.set_message_reaction.assert_called_once_with(
            chat_id=987654,
            message_id=789,
            reaction='üëç'
        )

    @pytest.mark.asyncio
    async def test_trigger_with_multiple_responses(self, trigger_service, message_router,
                                                 mock_update_group_message, mock_context):
        """–¢–µ—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        await trigger_service.add_trigger({
            'name': 'multi_trigger',
            'pattern': r'multi\s+test',
            'response_text': 'Text response',
            'response_sticker': 'sticker123',
            'response_gif': 'gif456',
            'reaction_type': 'emoji',
            'action_data': '‚ù§Ô∏è',
            'chat_type': 'group'
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        matched_triggers = await trigger_service.check_triggers("multi test message", "group")
        assert len(matched_triggers) == 1

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        actions = await trigger_service.execute_trigger_actions(
            matched_triggers, 987654, "multi test message", 789
        )

        assert len(actions) == 4  # text, sticker, gif, reaction

        action_types = [a['type'] for a in actions]
        assert 'text' in action_types
        assert 'sticker' in action_types
        assert 'gif' in action_types
        assert 'reaction' in action_types

        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
        await message_router._execute_trigger_actions(actions, mock_update_group_message, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
        assert mock_context.bot.send_message.call_count == 1
        assert mock_context.bot.send_sticker.call_count == 1
        assert mock_context.bot.send_animation.call_count == 1
        assert mock_context.bot.set_message_reaction.call_count == 1

    @pytest.mark.asyncio
    async def test_trigger_statistics_update(self, trigger_service):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        all_triggers = await trigger_service.get_all_triggers()
        initial_trigger = next(t for t in all_triggers if t['name'] == 'test_hello')
        initial_count = initial_trigger['trigger_count']

        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        success = await trigger_service.update_trigger_stats(initial_trigger['id'])
        assert success == True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        all_triggers_after = await trigger_service.get_all_triggers()
        updated_trigger = next(t for t in all_triggers_after if t['name'] == 'test_hello')

        assert updated_trigger['trigger_count'] == initial_count + 1
        assert updated_trigger['last_triggered'] is not None

    @pytest.mark.asyncio
    async def test_trigger_cache_invalidation(self, trigger_service):
        """–¢–µ—Å—Ç –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –∫–µ—à)
        triggers = await trigger_service.get_active_triggers('group')
        assert len(triggers) > 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        triggers_cached = await trigger_service.get_active_triggers('group')
        assert triggers_cached == triggers

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä (–¥–æ–ª–∂–µ–Ω –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à)
        await trigger_service.add_trigger({
            'name': 'new_trigger',
            'pattern': r'new\s+pattern',
            'response_text': 'New response',
            'chat_type': 'group'
        })

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å–Ω–æ–≤–∞ (–∫–µ—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω)
        triggers_after = await trigger_service.get_active_triggers('group')
        assert len(triggers_after) == len(triggers) + 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        new_trigger_names = [t['name'] for t in triggers_after]
        assert 'new_trigger' in new_trigger_names

    @pytest.mark.asyncio
    async def test_trigger_toggle_activation(self, trigger_service):
        """–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        all_triggers = await trigger_service.get_all_triggers()
        trigger_id = all_triggers[0]['id']

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        success = await trigger_service.toggle_trigger(trigger_id, False)
        assert success == True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        active_triggers = await trigger_service.get_active_triggers('group')
        active_ids = [t['id'] for t in active_triggers]
        assert trigger_id not in active_ids

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ
        success = await trigger_service.toggle_trigger(trigger_id, True)
        assert success == True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω
        active_triggers_after = await trigger_service.get_active_triggers('group')
        active_ids_after = [t['id'] for t in active_triggers_after]
        assert trigger_id in active_ids_after

    @pytest.mark.asyncio
    async def test_regex_pattern_matching(self, trigger_service):
        """–¢–µ—Å—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        await trigger_service.add_trigger({
            'name': 'word_boundary',
            'pattern': r'\bhello\b',
            'response_text': 'Word boundary match',
            'chat_type': 'group'
        })

        await trigger_service.add_trigger({
            'name': 'case_insensitive',
            'pattern': r'HELLO',
            'response_text': 'Case insensitive match',
            'chat_type': 'group'
        })

        # –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤–∞
        matches = await trigger_service.check_triggers("hello world", "group")
        assert len(matches) == 3  # test_hello, word_boundary, case_insensitive

        # –¢–µ—Å—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞
        matches = await trigger_service.check_triggers("helloworld", "group")
        # word_boundary –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        boundary_trigger = next((m for m in matches if m['name'] == 'word_boundary'), None)
        assert boundary_trigger is None

    @pytest.mark.asyncio
    async def test_trigger_error_handling(self, trigger_service, message_router,
                                         mock_update_group_message, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
        await trigger_service.add_trigger({
            'name': 'invalid_regex',
            'pattern': r'[invalid',  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π regex
            'response_text': 'Should not work',
            'chat_type': 'group'
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è –≤—Å—é —Å–∏—Å—Ç–µ–º—É
        matched_triggers = await trigger_service.check_triggers("test message", "group")

        # –î–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        valid_matches = [t for t in matched_triggers if t['name'] == 'test_hello']
        assert len(valid_matches) == 1

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—à–∏–±–∫–æ–π –≤ –±–æ—Ç–µ
        mock_context.bot.send_message.side_effect = Exception("Bot error")

        actions = await trigger_service.execute_trigger_actions(
            valid_matches, 987654, "test message", 789
        )

        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        await message_router._execute_trigger_actions(actions, mock_update_group_message, mock_context)

        # –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
        mock_context.bot.send_message.assert_called_once()

    @pytest.mark.asyncio
    async def test_trigger_reaction_priority(self, trigger_service, message_router,
                                            mock_update_group_message, mock_context):
        """–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö"""
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
        await trigger_service.add_trigger({
            'name': 'first_reaction',
            'pattern': r'priority\s+test',
            'reaction_type': 'emoji',
            'action_data': 'üëç',
            'chat_type': 'group'
        })

        await trigger_service.add_trigger({
            'name': 'second_reaction',
            'pattern': r'priority\s+test',
            'reaction_type': 'emoji',
            'action_data': '‚ù§Ô∏è',
            'chat_type': 'group'
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –æ–±–æ–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        matched_triggers = await trigger_service.check_triggers("priority test", "group")
        assert len(matched_triggers) == 2

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        actions = await trigger_service.execute_trigger_actions(
            matched_triggers, 987654, "priority test", 789
        )

        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–≤–µ —Ä–µ–∞–∫—Ü–∏–∏
        reactions = [a for a in actions if a['type'] == 'reaction']
        assert len(reactions) == 2

        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è)
        await message_router._execute_trigger_actions(actions, mock_update_group_message, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è
        mock_context.bot.set_message_reaction.assert_called_once()
        call_args = mock_context.bot.set_message_reaction.call_args
        assert call_args[1]['reaction'] in ['üëç', '‚ù§Ô∏è']  # –û–¥–Ω–∞ –∏–∑ —Ä–µ–∞–∫—Ü–∏–π

    @pytest.mark.asyncio
    async def test_end_to_end_trigger_flow(self, trigger_service, message_router,
                                          mock_update_group_message, mock_context):
        """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π end-to-end —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        # 1. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        trigger_id = await trigger_service.add_trigger({
            'name': 'e2e_trigger',
            'pattern': r'e2e\s+test',
            'response_text': 'E2E Response',
            'response_sticker': 'sticker123',
            'reaction_type': 'emoji',
            'action_data': 'üéâ',
            'chat_type': 'group'
        })
        assert trigger_id is not None

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
        active_triggers = await trigger_service.get_active_triggers('group')
        e2e_trigger = next((t for t in active_triggers if t['name'] == 'e2e_trigger'), None)
        assert e2e_trigger is not None
        assert e2e_trigger['trigger_count'] == 0

        # 3. –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        mock_update_group_message.message.text = "e2e test message"

        # 4. –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await message_router.route_text_message(mock_update_group_message, mock_context)

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        assert mock_context.bot.send_message.call_count == 1
        assert mock_context.bot.send_sticker.call_count == 1
        assert mock_context.bot.set_message_reaction.call_count == 1

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_trigger = await trigger_service.get_trigger_by_id(trigger_id)
        assert updated_trigger['trigger_count'] == 1
        assert updated_trigger['last_triggered'] is not None

    @pytest.mark.asyncio
    async def test_private_chat_trigger_isolation(self, trigger_service, message_router,
                                                 mock_update_private_message, mock_context):
        """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        await trigger_service.add_trigger({
            'name': 'private_trigger',
            'pattern': r'private\s+only',
            'response_text': 'Private response',
            'chat_type': 'private'
        })

        # –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        matched_private = await trigger_service.check_triggers("private only message", "private")
        assert len(matched_private) == 1
        assert matched_private[0]['name'] == 'private_trigger'

        # –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —Ç–æ—Ç –∂–µ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        matched_group = await trigger_service.check_triggers("private only message", "group")
        private_triggers_in_group = [t for t in matched_group if t['name'] == 'private_trigger']
        assert len(private_triggers_in_group) == 0